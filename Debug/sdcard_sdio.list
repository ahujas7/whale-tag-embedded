
sdcard_sdio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f6d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000944  0800f868  0800f868  0001f868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080101ac  080101ac  000302e8  2**0
                  CONTENTS
  4 .ARM          00000008  080101ac  080101ac  000201ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080101b4  080101b4  000302e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080101b4  080101b4  000201b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080101b8  080101b8  000201b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e8  20000000  080101bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c04  200002e8  080104a4  000302e8  2**3
                  ALLOC
 10 ._user_heap_stack 00006004  20000eec  080104a4  00030eec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000239fc  00000000  00000000  00030318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046f3  00000000  00000000  00053d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002020  00000000  00000000  00058408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e28  00000000  00000000  0005a428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008af5  00000000  00000000  0005c250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028db9  00000000  00000000  00064d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109089  00000000  00000000  0008dafe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00196b87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b4c  00000000  00000000  00196bd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002e8 	.word	0x200002e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f84c 	.word	0x0800f84c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002ec 	.word	0x200002ec
 80001cc:	0800f84c 	.word	0x0800f84c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	2007      	movs	r0, #7
 8000ebc:	f000 fe42 	bl	8001b44 <bno055_writeData>
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	203d      	movs	r0, #61	; 0x3d
 8000ed8:	f000 fe34 	bl	8001b44 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d103      	bne.n	8000eea <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000ee2:	2013      	movs	r0, #19
 8000ee4:	f000 fe22 	bl	8001b2c <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000ee8:	e002      	b.n	8000ef0 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000eea:	2007      	movs	r0, #7
 8000eec:	f000 fe1e 	bl	8001b2c <bno055_delay>
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff ffe3 	bl	8000ec8 <bno055_setOperationMode>
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000f06:	b580      	push	{r7, lr}
 8000f08:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000f0a:	200c      	movs	r0, #12
 8000f0c:	f7ff ffdc 	bl	8000ec8 <bno055_setOperationMode>
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000f18:	2120      	movs	r1, #32
 8000f1a:	203f      	movs	r0, #63	; 0x3f
 8000f1c:	f000 fe12 	bl	8001b44 <bno055_writeData>
  bno055_delay(700);
 8000f20:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000f24:	f000 fe02 	bl	8001b2c <bno055_delay>
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
  bno055_reset();
 8000f32:	f7ff ffef 	bl	8000f14 <bno055_reset>

  uint8_t id = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000f3a:	1dfb      	adds	r3, r7, #7
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	4619      	mov	r1, r3
 8000f40:	2000      	movs	r0, #0
 8000f42:	f000 feeb 	bl	8001d1c <bno055_readData>
  if (id != BNO055_ID) {
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	2ba0      	cmp	r3, #160	; 0xa0
 8000f4a:	d004      	beq.n	8000f56 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4809      	ldr	r0, [pc, #36]	; (8000f78 <bno055_setup+0x4c>)
 8000f52:	f00c f94f 	bl	800d1f4 <iprintf>
  }
  bno055_setPage(0);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f7ff ffa8 	bl	8000eac <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	203f      	movs	r0, #63	; 0x3f
 8000f60:	f000 fdf0 	bl	8001b44 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000f64:	f7ff ffc8 	bl	8000ef8 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8000f68:	200a      	movs	r0, #10
 8000f6a:	f000 fddf 	bl	8001b2c <bno055_delay>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	0800f868 	.word	0x0800f868

08000f7c <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8000f7c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f80:	b09e      	sub	sp, #120	; 0x78
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	4603      	mov	r3, r0
 8000f86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f7ff ff8e 	bl	8000eac <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8000f90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f94:	2b20      	cmp	r3, #32
 8000f96:	d108      	bne.n	8000faa <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8000f98:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fa0:	2208      	movs	r2, #8
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 feba 	bl	8001d1c <bno055_readData>
 8000fa8:	e007      	b.n	8000fba <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8000faa:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000fae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fb2:	2206      	movs	r2, #6
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 feb1 	bl	8001d1c <bno055_readData>

  double scale = 1;
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	4b8b      	ldr	r3, [pc, #556]	; (80011ec <bno055_getVector+0x270>)
 8000fc0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8000fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fc8:	2b0e      	cmp	r3, #14
 8000fca:	d109      	bne.n	8000fe0 <bno055_getVector+0x64>
    scale = magScale;
 8000fcc:	4b88      	ldr	r3, [pc, #544]	; (80011f0 <bno055_getVector+0x274>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fa97 	bl	8000504 <__aeabi_ui2d>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8000fde:	e03e      	b.n	800105e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fe4:	2b08      	cmp	r3, #8
 8000fe6:	d007      	beq.n	8000ff8 <bno055_getVector+0x7c>
 8000fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fec:	2b28      	cmp	r3, #40	; 0x28
 8000fee:	d003      	beq.n	8000ff8 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ff4:	2b2e      	cmp	r3, #46	; 0x2e
 8000ff6:	d109      	bne.n	800100c <bno055_getVector+0x90>
    scale = accelScale;
 8000ff8:	4b7e      	ldr	r3, [pc, #504]	; (80011f4 <bno055_getVector+0x278>)
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fa81 	bl	8000504 <__aeabi_ui2d>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800100a:	e028      	b.n	800105e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 800100c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001010:	2b14      	cmp	r3, #20
 8001012:	d109      	bne.n	8001028 <bno055_getVector+0xac>
    scale = angularRateScale;
 8001014:	4b78      	ldr	r3, [pc, #480]	; (80011f8 <bno055_getVector+0x27c>)
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fa73 	bl	8000504 <__aeabi_ui2d>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001026:	e01a      	b.n	800105e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8001028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800102c:	2b1a      	cmp	r3, #26
 800102e:	d109      	bne.n	8001044 <bno055_getVector+0xc8>
    scale = eulerScale;
 8001030:	4b72      	ldr	r3, [pc, #456]	; (80011fc <bno055_getVector+0x280>)
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fa65 	bl	8000504 <__aeabi_ui2d>
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
 800103e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001042:	e00c      	b.n	800105e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8001044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001048:	2b20      	cmp	r3, #32
 800104a:	d108      	bne.n	800105e <bno055_getVector+0xe2>
    scale = quaScale;
 800104c:	4b6c      	ldr	r3, [pc, #432]	; (8001200 <bno055_getVector+0x284>)
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fa57 	bl	8000504 <__aeabi_ui2d>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 800105e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001062:	2220      	movs	r2, #32
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f00b fc52 	bl	800c910 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 800106c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001070:	2b20      	cmp	r3, #32
 8001072:	d150      	bne.n	8001116 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001074:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001078:	021b      	lsls	r3, r3, #8
 800107a:	b21a      	sxth	r2, r3
 800107c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001080:	b21b      	sxth	r3, r3
 8001082:	4313      	orrs	r3, r2
 8001084:	b21b      	sxth	r3, r3
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fa4c 	bl	8000524 <__aeabi_i2d>
 800108c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001090:	f7ff fbdc 	bl	800084c <__aeabi_ddiv>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800109c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80010a8:	b21b      	sxth	r3, r3
 80010aa:	4313      	orrs	r3, r2
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fa38 	bl	8000524 <__aeabi_i2d>
 80010b4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80010b8:	f7ff fbc8 	bl	800084c <__aeabi_ddiv>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80010c4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80010c8:	021b      	lsls	r3, r3, #8
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fa24 	bl	8000524 <__aeabi_i2d>
 80010dc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80010e0:	f7ff fbb4 	bl	800084c <__aeabi_ddiv>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 80010ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	b21a      	sxth	r2, r3
 80010f4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	4313      	orrs	r3, r2
 80010fc:	b21b      	sxth	r3, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fa10 	bl	8000524 <__aeabi_i2d>
 8001104:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001108:	f7ff fba0 	bl	800084c <__aeabi_ddiv>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001114:	e03b      	b.n	800118e <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001116:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	b21a      	sxth	r2, r3
 800111e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001122:	b21b      	sxth	r3, r3
 8001124:	4313      	orrs	r3, r2
 8001126:	b21b      	sxth	r3, r3
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff f9fb 	bl	8000524 <__aeabi_i2d>
 800112e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001132:	f7ff fb8b 	bl	800084c <__aeabi_ddiv>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800113e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b21a      	sxth	r2, r3
 8001146:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800114a:	b21b      	sxth	r3, r3
 800114c:	4313      	orrs	r3, r2
 800114e:	b21b      	sxth	r3, r3
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff f9e7 	bl	8000524 <__aeabi_i2d>
 8001156:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800115a:	f7ff fb77 	bl	800084c <__aeabi_ddiv>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001166:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800116a:	021b      	lsls	r3, r3, #8
 800116c:	b21a      	sxth	r2, r3
 800116e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001172:	b21b      	sxth	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b21b      	sxth	r3, r3
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff f9d3 	bl	8000524 <__aeabi_i2d>
 800117e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001182:	f7ff fb63 	bl	800084c <__aeabi_ddiv>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 800118e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001192:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8001196:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001198:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800119a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800119e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80011a2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80011a6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80011aa:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80011ae:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80011b2:	ec49 8b14 	vmov	d4, r8, r9
 80011b6:	ec45 4b15 	vmov	d5, r4, r5
 80011ba:	ec41 0b16 	vmov	d6, r0, r1
 80011be:	ec43 2b17 	vmov	d7, r2, r3
}
 80011c2:	eeb0 0a44 	vmov.f32	s0, s8
 80011c6:	eef0 0a64 	vmov.f32	s1, s9
 80011ca:	eeb0 1a45 	vmov.f32	s2, s10
 80011ce:	eef0 1a65 	vmov.f32	s3, s11
 80011d2:	eeb0 2a46 	vmov.f32	s4, s12
 80011d6:	eef0 2a66 	vmov.f32	s5, s13
 80011da:	eeb0 3a47 	vmov.f32	s6, s14
 80011de:	eef0 3a67 	vmov.f32	s7, s15
 80011e2:	3778      	adds	r7, #120	; 0x78
 80011e4:	46bd      	mov	sp, r7
 80011e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011ea:	bf00      	nop
 80011ec:	3ff00000 	.word	0x3ff00000
 80011f0:	20000006 	.word	0x20000006
 80011f4:	20000000 	.word	0x20000000
 80011f8:	20000002 	.word	0x20000002
 80011fc:	20000004 	.word	0x20000004
 8001200:	20000008 	.word	0x20000008

08001204 <bno055_getVectorQuaternion>:
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 8001204:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001208:	b090      	sub	sp, #64	; 0x40
 800120a:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 800120c:	2020      	movs	r0, #32
 800120e:	f7ff feb5 	bl	8000f7c <bno055_getVector>
 8001212:	eeb0 4a40 	vmov.f32	s8, s0
 8001216:	eef0 4a60 	vmov.f32	s9, s1
 800121a:	eeb0 5a41 	vmov.f32	s10, s2
 800121e:	eef0 5a61 	vmov.f32	s11, s3
 8001222:	eeb0 6a42 	vmov.f32	s12, s4
 8001226:	eef0 6a62 	vmov.f32	s13, s5
 800122a:	eeb0 7a43 	vmov.f32	s14, s6
 800122e:	eef0 7a63 	vmov.f32	s15, s7
 8001232:	ed87 4b08 	vstr	d4, [r7, #32]
 8001236:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 800123a:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 800123e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001242:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001246:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800124a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800124e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001252:	ec49 8b14 	vmov	d4, r8, r9
 8001256:	ec45 4b15 	vmov	d5, r4, r5
 800125a:	ec41 0b16 	vmov	d6, r0, r1
 800125e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001262:	eeb0 0a44 	vmov.f32	s0, s8
 8001266:	eef0 0a64 	vmov.f32	s1, s9
 800126a:	eeb0 1a45 	vmov.f32	s2, s10
 800126e:	eef0 1a65 	vmov.f32	s3, s11
 8001272:	eeb0 2a46 	vmov.f32	s4, s12
 8001276:	eef0 2a66 	vmov.f32	s5, s13
 800127a:	eeb0 3a47 	vmov.f32	s6, s14
 800127e:	eef0 3a67 	vmov.f32	s7, s15
 8001282:	3740      	adds	r7, #64	; 0x40
 8001284:	46bd      	mov	sp, r7
 8001286:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800128c <fuelGauge_assignI2C>:
bno055_vector_t vectorData;
uint8_t _shutdown_flag = 0;


// Assignment initialization functions
void fuelGauge_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  _ds2778_i2c_port = hi2c_device;
 8001294:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <fuelGauge_assignI2C+0x1c>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6013      	str	r3, [r2, #0]
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	20000304 	.word	0x20000304

080012ac <keller_assignI2C>:

void keller_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  _keller_i2c_port = hi2c_device;
 80012b4:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <keller_assignI2C+0x1c>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6013      	str	r3, [r2, #0]
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000308 	.word	0x20000308

080012cc <light_assignI2C>:

void light_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  _light_i2c_port = hi2c_device;
 80012d4:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <light_assignI2C+0x1c>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6013      	str	r3, [r2, #0]
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	2000030c 	.word	0x2000030c

080012ec <fuelGauge_readData>:


// Read functions
HAL_StatusTypeDef fuelGauge_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af02      	add	r7, sp, #8
 80012f2:	4603      	mov	r3, r0
 80012f4:	6039      	str	r1, [r7, #0]
 80012f6:	71fb      	strb	r3, [r7, #7]
 80012f8:	4613      	mov	r3, r2
 80012fa:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_I2C_Master_Transmit(_ds2778_i2c_port, BMS_ADDR << 1, &reg, 1,
 80012fc:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <fuelGauge_readData+0x48>)
 80012fe:	6818      	ldr	r0, [r3, #0]
 8001300:	1dfa      	adds	r2, r7, #7
 8001302:	2364      	movs	r3, #100	; 0x64
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2301      	movs	r3, #1
 8001308:	21b2      	movs	r1, #178	; 0xb2
 800130a:	f002 fb4b 	bl	80039a4 <HAL_I2C_Master_Transmit>
 800130e:	4603      	mov	r3, r0
 8001310:	73fb      	strb	r3, [r7, #15]
		  	 								100);
	hal_status = HAL_I2C_Master_Receive(_ds2778_i2c_port, BMS_ADDR << 1, data, len,
 8001312:	4b08      	ldr	r3, [pc, #32]	; (8001334 <fuelGauge_readData+0x48>)
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	79bb      	ldrb	r3, [r7, #6]
 8001318:	b29b      	uxth	r3, r3
 800131a:	2264      	movs	r2, #100	; 0x64
 800131c:	9200      	str	r2, [sp, #0]
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	21b2      	movs	r1, #178	; 0xb2
 8001322:	f002 fc33 	bl	8003b8c <HAL_I2C_Master_Receive>
 8001326:	4603      	mov	r3, r0
 8001328:	73fb      	strb	r3, [r7, #15]
							   	   	   	   	100);
	return hal_status;
 800132a:	7bfb      	ldrb	r3, [r7, #15]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000304 	.word	0x20000304

08001338 <keller_readData>:

HAL_StatusTypeDef keller_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af02      	add	r7, sp, #8
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	71fb      	strb	r3, [r7, #7]
 8001344:	4613      	mov	r3, r2
 8001346:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_I2C_Master_Transmit(_keller_i2c_port, KELLER_ADDR << 1, &reg, 1,
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <keller_readData+0x50>)
 800134a:	6818      	ldr	r0, [r3, #0]
 800134c:	1dfa      	adds	r2, r7, #7
 800134e:	2364      	movs	r3, #100	; 0x64
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2301      	movs	r3, #1
 8001354:	2180      	movs	r1, #128	; 0x80
 8001356:	f002 fb25 	bl	80039a4 <HAL_I2C_Master_Transmit>
 800135a:	4603      	mov	r3, r0
 800135c:	73fb      	strb	r3, [r7, #15]
		  	 								100);
	HAL_Delay(20);
 800135e:	2014      	movs	r0, #20
 8001360:	f001 fd48 	bl	8002df4 <HAL_Delay>
	hal_status = HAL_I2C_Master_Receive(_keller_i2c_port, KELLER_ADDR << 1, data, len,
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <keller_readData+0x50>)
 8001366:	6818      	ldr	r0, [r3, #0]
 8001368:	79bb      	ldrb	r3, [r7, #6]
 800136a:	b29b      	uxth	r3, r3
 800136c:	2264      	movs	r2, #100	; 0x64
 800136e:	9200      	str	r2, [sp, #0]
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	2180      	movs	r1, #128	; 0x80
 8001374:	f002 fc0a 	bl	8003b8c <HAL_I2C_Master_Receive>
 8001378:	4603      	mov	r3, r0
 800137a:	73fb      	strb	r3, [r7, #15]
							   	   	   	   	100);
	return hal_status;
 800137c:	7bfb      	ldrb	r3, [r7, #15]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000308 	.word	0x20000308

0800138c <light_readData>:

HAL_StatusTypeDef light_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af02      	add	r7, sp, #8
 8001392:	4603      	mov	r3, r0
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	71fb      	strb	r3, [r7, #7]
 8001398:	4613      	mov	r3, r2
 800139a:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_I2C_Master_Transmit(_light_i2c_port, LIGHT_ADDR << 1, &reg, 1,
 800139c:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <light_readData+0x48>)
 800139e:	6818      	ldr	r0, [r3, #0]
 80013a0:	1dfa      	adds	r2, r7, #7
 80013a2:	2364      	movs	r3, #100	; 0x64
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2301      	movs	r3, #1
 80013a8:	2152      	movs	r1, #82	; 0x52
 80013aa:	f002 fafb 	bl	80039a4 <HAL_I2C_Master_Transmit>
 80013ae:	4603      	mov	r3, r0
 80013b0:	73fb      	strb	r3, [r7, #15]
		  	 								100);
	hal_status = HAL_I2C_Master_Receive(_light_i2c_port, LIGHT_ADDR << 1, data, len,
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <light_readData+0x48>)
 80013b4:	6818      	ldr	r0, [r3, #0]
 80013b6:	79bb      	ldrb	r3, [r7, #6]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	2264      	movs	r2, #100	; 0x64
 80013bc:	9200      	str	r2, [sp, #0]
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	2152      	movs	r1, #82	; 0x52
 80013c2:	f002 fbe3 	bl	8003b8c <HAL_I2C_Master_Receive>
 80013c6:	4603      	mov	r3, r0
 80013c8:	73fb      	strb	r3, [r7, #15]
							   	   	   	   	100);
	return hal_status;
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	2000030c 	.word	0x2000030c

080013d8 <sensors_initI2C>:

// Sensor initialization
/**
 * Based on the sensor flags, initializes the sensors
 */
int sensors_initI2C(void) {
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
	  HAL_I2C_Master_Transmit(_ds2778_i2c_port, BMS_ADDR << 1, underVolt, 2, 100);
	  //establish overvoltage cutoff
	  uint8_t overVolt[2] = {OVER_VOLTAGE, OV_VAL};
	  HAL_I2C_Master_Transmit(_ds2778_i2c_port, BMS_ADDR << 1, overVolt, 2, 100);
#endif
	  return 0;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <getBatteryStatus>:


void getBatteryStatus() {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
	// BMS Battery Gas Gauge
	  uint8_t bms_result = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	70fb      	strb	r3, [r7, #3]

	  // CELL 1
	  fuelGauge_readData(CELL_1_V_MS, &bms_result, 1);
 80013f2:	1cfb      	adds	r3, r7, #3
 80013f4:	2201      	movs	r2, #1
 80013f6:	4619      	mov	r1, r3
 80013f8:	200c      	movs	r0, #12
 80013fa:	f7ff ff77 	bl	80012ec <fuelGauge_readData>
	  short voltage = bms_result << 3;
 80013fe:	78fb      	ldrb	r3, [r7, #3]
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	80fb      	strh	r3, [r7, #6]

	  bms_result = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	70fb      	strb	r3, [r7, #3]
	  fuelGauge_readData(CELL_1_V_LS, &bms_result, 1);
 8001408:	1cfb      	adds	r3, r7, #3
 800140a:	2201      	movs	r2, #1
 800140c:	4619      	mov	r1, r3
 800140e:	200d      	movs	r0, #13
 8001410:	f7ff ff6c 	bl	80012ec <fuelGauge_readData>

	  voltage = (voltage | (bms_result >> 5));
 8001414:	78fb      	ldrb	r3, [r7, #3]
 8001416:	095b      	lsrs	r3, r3, #5
 8001418:	b2db      	uxtb	r3, r3
 800141a:	b21a      	sxth	r2, r3
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	4313      	orrs	r3, r2
 8001420:	80fb      	strh	r3, [r7, #6]
	  batteryData[0] = 4.883e-3 * voltage;
 8001422:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff f87c 	bl	8000524 <__aeabi_i2d>
 800142c:	a334      	add	r3, pc, #208	; (adr r3, 8001500 <getBatteryStatus+0x118>)
 800142e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001432:	f7ff f8e1 	bl	80005f8 <__aeabi_dmul>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4935      	ldr	r1, [pc, #212]	; (8001510 <getBatteryStatus+0x128>)
 800143c:	e9c1 2300 	strd	r2, r3, [r1]

	  // CELL 2
	  bms_result = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	70fb      	strb	r3, [r7, #3]
	  fuelGauge_readData(CELL_2_V_MS, &bms_result, 1);
 8001444:	1cfb      	adds	r3, r7, #3
 8001446:	2201      	movs	r2, #1
 8001448:	4619      	mov	r1, r3
 800144a:	201c      	movs	r0, #28
 800144c:	f7ff ff4e 	bl	80012ec <fuelGauge_readData>
	  voltage = bms_result << 3;
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	80fb      	strh	r3, [r7, #6]

	  bms_result = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	70fb      	strb	r3, [r7, #3]
	  fuelGauge_readData(CELL_2_V_LS, &bms_result, 1);
 800145a:	1cfb      	adds	r3, r7, #3
 800145c:	2201      	movs	r2, #1
 800145e:	4619      	mov	r1, r3
 8001460:	201d      	movs	r0, #29
 8001462:	f7ff ff43 	bl	80012ec <fuelGauge_readData>

	  voltage = (voltage | (bms_result >> 5));
 8001466:	78fb      	ldrb	r3, [r7, #3]
 8001468:	095b      	lsrs	r3, r3, #5
 800146a:	b2db      	uxtb	r3, r3
 800146c:	b21a      	sxth	r2, r3
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	4313      	orrs	r3, r2
 8001472:	80fb      	strh	r3, [r7, #6]
	  batteryData[1] = 4.883e-3 * voltage;
 8001474:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff f853 	bl	8000524 <__aeabi_i2d>
 800147e:	a320      	add	r3, pc, #128	; (adr r3, 8001500 <getBatteryStatus+0x118>)
 8001480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001484:	f7ff f8b8 	bl	80005f8 <__aeabi_dmul>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4920      	ldr	r1, [pc, #128]	; (8001510 <getBatteryStatus+0x128>)
 800148e:	e9c1 2302 	strd	r2, r3, [r1, #8]

	  // CURRENT
	  bms_result = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	70fb      	strb	r3, [r7, #3]
	  fuelGauge_readData(BATT_I_MS, &bms_result, 1);
 8001496:	1cfb      	adds	r3, r7, #3
 8001498:	2201      	movs	r2, #1
 800149a:	4619      	mov	r1, r3
 800149c:	200e      	movs	r0, #14
 800149e:	f7ff ff25 	bl	80012ec <fuelGauge_readData>

	  int16_t current = bms_result << 8;
 80014a2:	78fb      	ldrb	r3, [r7, #3]
 80014a4:	021b      	lsls	r3, r3, #8
 80014a6:	80bb      	strh	r3, [r7, #4]

	  bms_result = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	70fb      	strb	r3, [r7, #3]
	  fuelGauge_readData(BATT_I_LS, &bms_result, 1);
 80014ac:	1cfb      	adds	r3, r7, #3
 80014ae:	2201      	movs	r2, #1
 80014b0:	4619      	mov	r1, r3
 80014b2:	200f      	movs	r0, #15
 80014b4:	f7ff ff1a 	bl	80012ec <fuelGauge_readData>

	  current = current | bms_result;
 80014b8:	78fb      	ldrb	r3, [r7, #3]
 80014ba:	b21a      	sxth	r2, r3
 80014bc:	88bb      	ldrh	r3, [r7, #4]
 80014be:	4313      	orrs	r3, r2
 80014c0:	80bb      	strh	r3, [r7, #4]
	  batteryData[2] = 1000.0 * (double)current * (1.5625e-6 / R_SENSE);
 80014c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff f82c 	bl	8000524 <__aeabi_i2d>
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	4b10      	ldr	r3, [pc, #64]	; (8001514 <getBatteryStatus+0x12c>)
 80014d2:	f7ff f891 	bl	80005f8 <__aeabi_dmul>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	a30a      	add	r3, pc, #40	; (adr r3, 8001508 <getBatteryStatus+0x120>)
 80014e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e4:	f7ff f888 	bl	80005f8 <__aeabi_dmul>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4908      	ldr	r1, [pc, #32]	; (8001510 <getBatteryStatus+0x128>)
 80014ee:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	f3af 8000 	nop.w
 8001500:	54e6e222 	.word	0x54e6e222
 8001504:	3f740032 	.word	0x3f740032
 8001508:	d2f1a9fc 	.word	0xd2f1a9fc
 800150c:	3f10624d 	.word	0x3f10624d
 8001510:	20000330 	.word	0x20000330
 8001514:	408f4000 	.word	0x408f4000

08001518 <getPressureData>:


void getPressureData() {
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
	// Keller depth/pressure sensor: move to new file later
	uint8_t reg = 0xAC;
 800151e:	23ac      	movs	r3, #172	; 0xac
 8001520:	75fb      	strb	r3, [r7, #23]
	uint8_t kellerData[5] = {0};
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	2300      	movs	r3, #0
 8001528:	723b      	strb	r3, [r7, #8]
	int32_t temperature, pressure;

	keller_readData(reg, kellerData, 5);
 800152a:	1d39      	adds	r1, r7, #4
 800152c:	7dfb      	ldrb	r3, [r7, #23]
 800152e:	2205      	movs	r2, #5
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff01 	bl	8001338 <keller_readData>

	temperature = kellerData[3] << 8;
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	613b      	str	r3, [r7, #16]
	temperature = temperature + kellerData[4];
 800153c:	7a3b      	ldrb	r3, [r7, #8]
 800153e:	461a      	mov	r2, r3
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4413      	add	r3, r2
 8001544:	613b      	str	r3, [r7, #16]

	// convert to deg C
	// convert to bar - see Keller data sheet for the particular sensor in use
	pressureData[0] =  (float)((temperature >> 4) - 24) * .05 - 50;
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	111b      	asrs	r3, r3, #4
 800154a:	3b18      	subs	r3, #24
 800154c:	ee07 3a90 	vmov	s15, r3
 8001550:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001554:	ee17 0a90 	vmov	r0, s15
 8001558:	f7fe fff6 	bl	8000548 <__aeabi_f2d>
 800155c:	a322      	add	r3, pc, #136	; (adr r3, 80015e8 <getPressureData+0xd0>)
 800155e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001562:	f7ff f849 	bl	80005f8 <__aeabi_dmul>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <getPressureData+0xc0>)
 8001574:	f7fe fe88 	bl	8000288 <__aeabi_dsub>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4917      	ldr	r1, [pc, #92]	; (80015dc <getPressureData+0xc4>)
 800157e:	e9c1 2300 	strd	r2, r3, [r1]
	pressure = kellerData[1] << 8;
 8001582:	797b      	ldrb	r3, [r7, #5]
 8001584:	021b      	lsls	r3, r3, #8
 8001586:	60fb      	str	r3, [r7, #12]
	pressure = pressure + kellerData[2];
 8001588:	79bb      	ldrb	r3, [r7, #6]
 800158a:	461a      	mov	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4413      	add	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
	// convert to bar
	pressureData[1] = (200.0f / 32768.0f) * ((float)pressure - 16384.0);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	ee07 3a90 	vmov	s15, r3
 8001598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800159c:	ee17 0a90 	vmov	r0, s15
 80015a0:	f7fe ffd2 	bl	8000548 <__aeabi_f2d>
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <getPressureData+0xc8>)
 80015aa:	f7fe fe6d 	bl	8000288 <__aeabi_dsub>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <getPressureData+0xcc>)
 80015bc:	f7ff f81c 	bl	80005f8 <__aeabi_dmul>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4905      	ldr	r1, [pc, #20]	; (80015dc <getPressureData+0xc4>)
 80015c6:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 80015ca:	bf00      	nop
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	f3af 8000 	nop.w
 80015d8:	40490000 	.word	0x40490000
 80015dc:	20000320 	.word	0x20000320
 80015e0:	40d00000 	.word	0x40d00000
 80015e4:	3f790000 	.word	0x3f790000
 80015e8:	9999999a 	.word	0x9999999a
 80015ec:	3fa99999 	.word	0x3fa99999

080015f0 <getAmbientLight>:


void getAmbientLight() {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
	uint8_t reg = 0x88;
 80015f6:	2388      	movs	r3, #136	; 0x88
 80015f8:	73fb      	strb	r3, [r7, #15]
	uint8_t data[4] = {0};
 80015fa:	2300      	movs	r3, #0
 80015fc:	60bb      	str	r3, [r7, #8]
	uint8_t stat_reg = 0x8C;
 80015fe:	238c      	movs	r3, #140	; 0x8c
 8001600:	73bb      	strb	r3, [r7, #14]
	uint8_t status = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	71fb      	strb	r3, [r7, #7]

	light_readData(stat_reg, &status, 1);
 8001606:	1df9      	adds	r1, r7, #7
 8001608:	7bbb      	ldrb	r3, [r7, #14]
 800160a:	2201      	movs	r2, #1
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff febd 	bl	800138c <light_readData>

	if ((status & 0x04) > 0) {
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	dd12      	ble.n	8001642 <getAmbientLight+0x52>
		light_readData(reg, data, 4);
 800161c:	f107 0108 	add.w	r1, r7, #8
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	2204      	movs	r2, #4
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff feb1 	bl	800138c <light_readData>

		// Combining lower and upper bytes to give 16-bit Ch1 data
		// Goes: (Ch1 << 16) | Ch0
		ambientLight = (((data[1] << 8) | data[0]) << 16) | ((data[3] << 8) | data[2]);
 800162a:	7a7b      	ldrb	r3, [r7, #9]
 800162c:	021b      	lsls	r3, r3, #8
 800162e:	7a3a      	ldrb	r2, [r7, #8]
 8001630:	4313      	orrs	r3, r2
 8001632:	041a      	lsls	r2, r3, #16
 8001634:	7afb      	ldrb	r3, [r7, #11]
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	7ab9      	ldrb	r1, [r7, #10]
 800163a:	430b      	orrs	r3, r1
 800163c:	4313      	orrs	r3, r2
 800163e:	4a03      	ldr	r2, [pc, #12]	; (800164c <getAmbientLight+0x5c>)
 8001640:	6013      	str	r3, [r2, #0]
	}
}
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000348 	.word	0x20000348

08001650 <getIMUData>:

void getIMUData() {
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
	vectorData = bno055_getVectorQuaternion();
 8001654:	f7ff fdd6 	bl	8001204 <bno055_getVectorQuaternion>
 8001658:	eeb0 4a40 	vmov.f32	s8, s0
 800165c:	eef0 4a60 	vmov.f32	s9, s1
 8001660:	eeb0 5a41 	vmov.f32	s10, s2
 8001664:	eef0 5a61 	vmov.f32	s11, s3
 8001668:	eeb0 6a42 	vmov.f32	s12, s4
 800166c:	eef0 6a62 	vmov.f32	s13, s5
 8001670:	eeb0 7a43 	vmov.f32	s14, s6
 8001674:	eef0 7a63 	vmov.f32	s15, s7
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <getIMUData+0x40>)
 800167a:	ed83 4b00 	vstr	d4, [r3]
 800167e:	ed83 5b02 	vstr	d5, [r3, #8]
 8001682:	ed83 6b04 	vstr	d6, [r3, #16]
 8001686:	ed83 7b06 	vstr	d7, [r3, #24]
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000550 	.word	0x20000550

08001694 <sensors_getAll>:

// Gets all the data and then formats it all
int sensors_getAll(uint8_t* rtc_time, uint8_t* rtc_date) {
 8001694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001698:	b099      	sub	sp, #100	; 0x64
 800169a:	af16      	add	r7, sp, #88	; 0x58
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	6039      	str	r1, [r7, #0]
	// Get the data from the battery, the pressure/depth sensor, light sensor, and IMU
	// Also get GPS data
	if (!_shutdown_flag) {
 80016a0:	4b29      	ldr	r3, [pc, #164]	; (8001748 <sensors_getAll+0xb4>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d147      	bne.n	8001738 <sensors_getAll+0xa4>
		getBatteryStatus();
 80016a8:	f7ff fe9e 	bl	80013e8 <getBatteryStatus>
		getPressureData();
 80016ac:	f7ff ff34 	bl	8001518 <getPressureData>
		getAmbientLight();
 80016b0:	f7ff ff9e 	bl	80015f0 <getAmbientLight>
		getIMUData();
 80016b4:	f7ff ffcc 	bl	8001650 <getIMUData>

		sprintf(textToLog, "%s:%s [%s]: %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %ld, %s\n",
 80016b8:	4b24      	ldr	r3, [pc, #144]	; (800174c <sensors_getAll+0xb8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 f99e 	bl	8001a00 <sensors_getStateStr>
 80016c4:	4606      	mov	r6, r0
 80016c6:	4b22      	ldr	r3, [pc, #136]	; (8001750 <sensors_getAll+0xbc>)
 80016c8:	e9d3 ab00 	ldrd	sl, fp, [r3]
 80016cc:	4b20      	ldr	r3, [pc, #128]	; (8001750 <sensors_getAll+0xbc>)
 80016ce:	ed93 7b02 	vldr	d7, [r3, #8]
 80016d2:	4b20      	ldr	r3, [pc, #128]	; (8001754 <sensors_getAll+0xc0>)
 80016d4:	ed93 6b00 	vldr	d6, [r3]
 80016d8:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <sensors_getAll+0xc0>)
 80016da:	ed93 5b02 	vldr	d5, [r3, #8]
 80016de:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <sensors_getAll+0xc0>)
 80016e0:	ed93 4b04 	vldr	d4, [r3, #16]
 80016e4:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <sensors_getAll+0xc4>)
 80016e6:	ed93 3b00 	vldr	d3, [r3]
 80016ea:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <sensors_getAll+0xc4>)
 80016ec:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 80016f0:	4b19      	ldr	r3, [pc, #100]	; (8001758 <sensors_getAll+0xc4>)
 80016f2:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80016f6:	4b18      	ldr	r3, [pc, #96]	; (8001758 <sensors_getAll+0xc4>)
 80016f8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80016fc:	4b17      	ldr	r3, [pc, #92]	; (800175c <sensors_getAll+0xc8>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b17      	ldr	r3, [pc, #92]	; (8001760 <sensors_getAll+0xcc>)
 8001702:	9315      	str	r3, [sp, #84]	; 0x54
 8001704:	9214      	str	r2, [sp, #80]	; 0x50
 8001706:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800170a:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 800170e:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8001712:	ed8d 3b0c 	vstr	d3, [sp, #48]	; 0x30
 8001716:	ed8d 4b0a 	vstr	d4, [sp, #40]	; 0x28
 800171a:	ed8d 5b08 	vstr	d5, [sp, #32]
 800171e:	ed8d 6b06 	vstr	d6, [sp, #24]
 8001722:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001726:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800172a:	9600      	str	r6, [sp, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	490c      	ldr	r1, [pc, #48]	; (8001764 <sensors_getAll+0xd0>)
 8001732:	480d      	ldr	r0, [pc, #52]	; (8001768 <sensors_getAll+0xd4>)
 8001734:	f00b fe20 	bl	800d378 <siprintf>
			  ambientLight,
			  gpsLocation);
	}


	sensors_updateState();
 8001738:	f000 f822 	bl	8001780 <sensors_updateState>

	return 0;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001748:	20000570 	.word	0x20000570
 800174c:	20000310 	.word	0x20000310
 8001750:	20000320 	.word	0x20000320
 8001754:	20000330 	.word	0x20000330
 8001758:	20000550 	.word	0x20000550
 800175c:	20000348 	.word	0x20000348
 8001760:	2000000c 	.word	0x2000000c
 8001764:	0800f8a4 	.word	0x0800f8a4
 8001768:	2000034c 	.word	0x2000034c

0800176c <sensors_updatePeriodic>:

int sensors_updatePeriodic() {
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0

	logging_writeToFile(textToLog);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <sensors_updatePeriodic+0x10>)
 8001772:	f000 f98b 	bl	8001a8c <logging_writeToFile>

	return 0;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	bd80      	pop	{r7, pc}
 800177c:	2000034c 	.word	0x2000034c

08001780 <sensors_updateState>:

int sensors_updateState() {
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
    // timing
//    static unsigned int startTime = 0;

    // Deployment sequencer FSM

    switch (presentState) {
 8001784:	4b98      	ldr	r3, [pc, #608]	; (80019e8 <sensors_updateState+0x268>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b07      	cmp	r3, #7
 800178a:	f200 8118 	bhi.w	80019be <sensors_updateState+0x23e>
 800178e:	a201      	add	r2, pc, #4	; (adr r2, 8001794 <sensors_updateState+0x14>)
 8001790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001794:	080017b5 	.word	0x080017b5
 8001798:	080017cb 	.word	0x080017cb
 800179c:	080017d3 	.word	0x080017d3
 80017a0:	08001827 	.word	0x08001827
 80017a4:	0800187b 	.word	0x0800187b
 80017a8:	080018cf 	.word	0x080018cf
 80017ac:	0800194f 	.word	0x0800194f
 80017b0:	080019af 	.word	0x080019af
		case (ST_CONFIG):
			// Load the deployment configuration
			// the configuration file units are minutes
			timeout_seconds = T0 * 60;
 80017b4:	4b8d      	ldr	r3, [pc, #564]	; (80019ec <sensors_updateState+0x26c>)
 80017b6:	f44f 5261 	mov.w	r2, #14400	; 0x3840
 80017ba:	601a      	str	r2, [r3, #0]
			timeout_minutes = T0;
 80017bc:	4b8c      	ldr	r3, [pc, #560]	; (80019f0 <sensors_updateState+0x270>)
 80017be:	22f0      	movs	r2, #240	; 0xf0
 80017c0:	601a      	str	r2, [r3, #0]

			presentState = ST_START;
 80017c2:	4b89      	ldr	r3, [pc, #548]	; (80019e8 <sensors_updateState+0x268>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	601a      	str	r2, [r3, #0]
			break;
 80017c8:	e0f9      	b.n	80019be <sensors_updateState+0x23e>

		case (ST_START):
			// Originally the ADC capture started here but it won't anymore
			presentState = ST_DEPLOY;    // underway!
 80017ca:	4b87      	ldr	r3, [pc, #540]	; (80019e8 <sensors_updateState+0x268>)
 80017cc:	2202      	movs	r2, #2
 80017ce:	601a      	str	r2, [r3, #0]
			break;
 80017d0:	e0f5      	b.n	80019be <sensors_updateState+0x23e>

		case (ST_DEPLOY):

			// Waiting for 1st dive
			if (batteryData[0] + batteryData[1] < V_LOW) {//||
 80017d2:	4b88      	ldr	r3, [pc, #544]	; (80019f4 <sensors_updateState+0x274>)
 80017d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017d8:	4b86      	ldr	r3, [pc, #536]	; (80019f4 <sensors_updateState+0x274>)
 80017da:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80017de:	f7fe fd55 	bl	800028c <__adddf3>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	a377      	add	r3, pc, #476	; (adr r3, 80019c8 <sensors_updateState+0x248>)
 80017ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f0:	f7ff f974 	bl	8000adc <__aeabi_dcmplt>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d005      	beq.n	8001806 <sensors_updateState+0x86>
//				(rtcCount - startTime > timeout_seconds)) {
				// TODO fix this to pull the start time and current RTC so this can trigger
				burnwireOn();
 80017fa:	f000 f917 	bl	8001a2c <burnwireOn>
				presentState = ST_BRN_ON;
 80017fe:	4b7a      	ldr	r3, [pc, #488]	; (80019e8 <sensors_updateState+0x268>)
 8001800:	2205      	movs	r2, #5
 8001802:	601a      	str	r2, [r3, #0]
				break;
 8001804:	e0db      	b.n	80019be <sensors_updateState+0x23e>
			}

			if (pressureData[1] > V_CRIT)
 8001806:	4b7c      	ldr	r3, [pc, #496]	; (80019f8 <sensors_updateState+0x278>)
 8001808:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800180c:	a370      	add	r3, pc, #448	; (adr r3, 80019d0 <sensors_updateState+0x250>)
 800180e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001812:	f7ff f981 	bl	8000b18 <__aeabi_dcmpgt>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d100      	bne.n	800181e <sensors_updateState+0x9e>
				presentState = ST_REC_SUB; // 1st dive after deploy

			break;
 800181c:	e0cf      	b.n	80019be <sensors_updateState+0x23e>
				presentState = ST_REC_SUB; // 1st dive after deploy
 800181e:	4b72      	ldr	r3, [pc, #456]	; (80019e8 <sensors_updateState+0x268>)
 8001820:	2203      	movs	r2, #3
 8001822:	601a      	str	r2, [r3, #0]
			break;
 8001824:	e0cb      	b.n	80019be <sensors_updateState+0x23e>

		case (ST_REC_SUB):
			// Recording while sumberged
			if (batteryData[0] + batteryData[1] < V_LOW) { //||
 8001826:	4b73      	ldr	r3, [pc, #460]	; (80019f4 <sensors_updateState+0x274>)
 8001828:	e9d3 0100 	ldrd	r0, r1, [r3]
 800182c:	4b71      	ldr	r3, [pc, #452]	; (80019f4 <sensors_updateState+0x274>)
 800182e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001832:	f7fe fd2b 	bl	800028c <__adddf3>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4610      	mov	r0, r2
 800183c:	4619      	mov	r1, r3
 800183e:	a362      	add	r3, pc, #392	; (adr r3, 80019c8 <sensors_updateState+0x248>)
 8001840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001844:	f7ff f94a 	bl	8000adc <__aeabi_dcmplt>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d005      	beq.n	800185a <sensors_updateState+0xda>
//				(rtcCount - startTime > timeout_seconds)) {
				// TODO fix this to pull the start time and current RTC so this can trigger
				burnwireOn();
 800184e:	f000 f8ed 	bl	8001a2c <burnwireOn>
				presentState = ST_BRN_ON;
 8001852:	4b65      	ldr	r3, [pc, #404]	; (80019e8 <sensors_updateState+0x268>)
 8001854:	2205      	movs	r2, #5
 8001856:	601a      	str	r2, [r3, #0]
				break;
 8001858:	e0b1      	b.n	80019be <sensors_updateState+0x23e>
			}

			if (pressureData[1] < P1) {
 800185a:	4b67      	ldr	r3, [pc, #412]	; (80019f8 <sensors_updateState+0x278>)
 800185c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001860:	a35d      	add	r3, pc, #372	; (adr r3, 80019d8 <sensors_updateState+0x258>)
 8001862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001866:	f7ff f939 	bl	8000adc <__aeabi_dcmplt>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d100      	bne.n	8001872 <sensors_updateState+0xf2>
				presentState = ST_REC_SURF; // came to surface
				break;
			}

			break;
 8001870:	e0a5      	b.n	80019be <sensors_updateState+0x23e>
				presentState = ST_REC_SURF; // came to surface
 8001872:	4b5d      	ldr	r3, [pc, #372]	; (80019e8 <sensors_updateState+0x268>)
 8001874:	2204      	movs	r2, #4
 8001876:	601a      	str	r2, [r3, #0]
				break;
 8001878:	e0a1      	b.n	80019be <sensors_updateState+0x23e>

		case (ST_REC_SURF):
			// Recording while at surface, trying to get a GPS fix

			if (batteryData[0] + batteryData[1] < V_LOW) { //||
 800187a:	4b5e      	ldr	r3, [pc, #376]	; (80019f4 <sensors_updateState+0x274>)
 800187c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001880:	4b5c      	ldr	r3, [pc, #368]	; (80019f4 <sensors_updateState+0x274>)
 8001882:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001886:	f7fe fd01 	bl	800028c <__adddf3>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4610      	mov	r0, r2
 8001890:	4619      	mov	r1, r3
 8001892:	a34d      	add	r3, pc, #308	; (adr r3, 80019c8 <sensors_updateState+0x248>)
 8001894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001898:	f7ff f920 	bl	8000adc <__aeabi_dcmplt>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d005      	beq.n	80018ae <sensors_updateState+0x12e>
//				(rtcCount - startTime > timeout_seconds)) {
				// TODO fix this to pull the start time and current RTC so this can trigger
				burnwireOn();
 80018a2:	f000 f8c3 	bl	8001a2c <burnwireOn>
				presentState = ST_BRN_ON;
 80018a6:	4b50      	ldr	r3, [pc, #320]	; (80019e8 <sensors_updateState+0x268>)
 80018a8:	2205      	movs	r2, #5
 80018aa:	601a      	str	r2, [r3, #0]
				break;
 80018ac:	e087      	b.n	80019be <sensors_updateState+0x23e>
			}

			if (pressureData[1] > P2) {
 80018ae:	4b52      	ldr	r3, [pc, #328]	; (80019f8 <sensors_updateState+0x278>)
 80018b0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80018b4:	a34a      	add	r3, pc, #296	; (adr r3, 80019e0 <sensors_updateState+0x260>)
 80018b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ba:	f7ff f92d 	bl	8000b18 <__aeabi_dcmpgt>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d100      	bne.n	80018c6 <sensors_updateState+0x146>
				presentState = ST_REC_SUB; // back under....
				break;
			}
			break;
 80018c4:	e07b      	b.n	80019be <sensors_updateState+0x23e>
				presentState = ST_REC_SUB; // back under....
 80018c6:	4b48      	ldr	r3, [pc, #288]	; (80019e8 <sensors_updateState+0x268>)
 80018c8:	2203      	movs	r2, #3
 80018ca:	601a      	str	r2, [r3, #0]
				break;
 80018cc:	e077      	b.n	80019be <sensors_updateState+0x23e>

		case (ST_BRN_ON):
			// Releasing
			if (batteryData[0] + batteryData[1] < V_CRIT) {
 80018ce:	4b49      	ldr	r3, [pc, #292]	; (80019f4 <sensors_updateState+0x274>)
 80018d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018d4:	4b47      	ldr	r3, [pc, #284]	; (80019f4 <sensors_updateState+0x274>)
 80018d6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018da:	f7fe fcd7 	bl	800028c <__adddf3>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	a33a      	add	r3, pc, #232	; (adr r3, 80019d0 <sensors_updateState+0x250>)
 80018e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ec:	f7ff f8f6 	bl	8000adc <__aeabi_dcmplt>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <sensors_updateState+0x17e>
				presentState = ST_SHUTDOWN; // critical battery
 80018f6:	4b3c      	ldr	r3, [pc, #240]	; (80019e8 <sensors_updateState+0x268>)
 80018f8:	2207      	movs	r2, #7
 80018fa:	601a      	str	r2, [r3, #0]
				break;
 80018fc:	e05f      	b.n	80019be <sensors_updateState+0x23e>
			}

			if (batteryData[0] + batteryData[1] < V_LOW) {
 80018fe:	4b3d      	ldr	r3, [pc, #244]	; (80019f4 <sensors_updateState+0x274>)
 8001900:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001904:	4b3b      	ldr	r3, [pc, #236]	; (80019f4 <sensors_updateState+0x274>)
 8001906:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800190a:	f7fe fcbf 	bl	800028c <__adddf3>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4610      	mov	r0, r2
 8001914:	4619      	mov	r1, r3
 8001916:	a32c      	add	r3, pc, #176	; (adr r3, 80019c8 <sensors_updateState+0x248>)
 8001918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191c:	f7ff f8de 	bl	8000adc <__aeabi_dcmplt>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <sensors_updateState+0x1ae>
				presentState = ST_RETRIEVE; // low battery
 8001926:	4b30      	ldr	r3, [pc, #192]	; (80019e8 <sensors_updateState+0x268>)
 8001928:	2206      	movs	r2, #6
 800192a:	601a      	str	r2, [r3, #0]
				break;
 800192c:	e047      	b.n	80019be <sensors_updateState+0x23e>
			}

			// at surface, Recovery Board should be on, stop data capture
			if (pressureData[1] < P1) {
 800192e:	4b32      	ldr	r3, [pc, #200]	; (80019f8 <sensors_updateState+0x278>)
 8001930:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001934:	a328      	add	r3, pc, #160	; (adr r3, 80019d8 <sensors_updateState+0x258>)
 8001936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193a:	f7ff f8cf 	bl	8000adc <__aeabi_dcmplt>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <sensors_updateState+0x1cc>
				// [TODO]: Stop the ADC audio data capture to preserve battery now
				// that the tag is on the surface
				presentState = ST_RETRIEVE; // low battery
 8001944:	4b28      	ldr	r3, [pc, #160]	; (80019e8 <sensors_updateState+0x268>)
 8001946:	2206      	movs	r2, #6
 8001948:	601a      	str	r2, [r3, #0]
				break;
 800194a:	e038      	b.n	80019be <sensors_updateState+0x23e>

			// still under or resubmerged
			if (pressureData[1] > P2) {
				// [TODO]: keep recording the ADC audio data since still submerged
			}
			break;
 800194c:	e037      	b.n	80019be <sensors_updateState+0x23e>

		case (ST_RETRIEVE):
			//  Waiting to be retrieved.

			// critical battery
			if (batteryData[0] + batteryData[1] < V_CRIT) {
 800194e:	4b29      	ldr	r3, [pc, #164]	; (80019f4 <sensors_updateState+0x274>)
 8001950:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001954:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <sensors_updateState+0x274>)
 8001956:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800195a:	f7fe fc97 	bl	800028c <__adddf3>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4610      	mov	r0, r2
 8001964:	4619      	mov	r1, r3
 8001966:	a31a      	add	r3, pc, #104	; (adr r3, 80019d0 <sensors_updateState+0x250>)
 8001968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196c:	f7ff f8b6 	bl	8000adc <__aeabi_dcmplt>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <sensors_updateState+0x1fe>
				presentState = ST_SHUTDOWN;
 8001976:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <sensors_updateState+0x268>)
 8001978:	2207      	movs	r2, #7
 800197a:	601a      	str	r2, [r3, #0]
				break;
 800197c:	e01f      	b.n	80019be <sensors_updateState+0x23e>
			}

			// low battery
			if (batteryData[0] + batteryData[1] < V_LOW) {
 800197e:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <sensors_updateState+0x274>)
 8001980:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001984:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <sensors_updateState+0x274>)
 8001986:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800198a:	f7fe fc7f 	bl	800028c <__adddf3>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4610      	mov	r0, r2
 8001994:	4619      	mov	r1, r3
 8001996:	a30c      	add	r3, pc, #48	; (adr r3, 80019c8 <sensors_updateState+0x248>)
 8001998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199c:	f7ff f89e 	bl	8000adc <__aeabi_dcmplt>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d100      	bne.n	80019a8 <sensors_updateState+0x228>
				burnwireOn(); // redundant, is already on
			}
			break;
 80019a6:	e00a      	b.n	80019be <sensors_updateState+0x23e>
				burnwireOn(); // redundant, is already on
 80019a8:	f000 f840 	bl	8001a2c <burnwireOn>
			break;
 80019ac:	e007      	b.n	80019be <sensors_updateState+0x23e>

		case (ST_SHUTDOWN):
			//  Shut everything off in an orderly way if battery is critical to
			//  reduce file system corruption risk
			burnwireOff();
 80019ae:	f000 f848 	bl	8001a42 <burnwireOff>
			recoveryOff();
 80019b2:	f000 f851 	bl	8001a58 <recoveryOff>
			_shutdown_flag = 1; // Stop logging sensors
 80019b6:	4b11      	ldr	r3, [pc, #68]	; (80019fc <sensors_updateState+0x27c>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	701a      	strb	r2, [r3, #0]
			break;
 80019bc:	bf00      	nop
    }
    return(0);
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	f3af 8000 	nop.w
 80019c8:	9999999a 	.word	0x9999999a
 80019cc:	40199999 	.word	0x40199999
 80019d0:	cccccccd 	.word	0xcccccccd
 80019d4:	4018cccc 	.word	0x4018cccc
 80019d8:	47ae147b 	.word	0x47ae147b
 80019dc:	3fa47ae1 	.word	0x3fa47ae1
 80019e0:	9999999a 	.word	0x9999999a
 80019e4:	3fb99999 	.word	0x3fb99999
 80019e8:	20000310 	.word	0x20000310
 80019ec:	20000318 	.word	0x20000318
 80019f0:	20000314 	.word	0x20000314
 80019f4:	20000330 	.word	0x20000330
 80019f8:	20000320 	.word	0x20000320
 80019fc:	20000570 	.word	0x20000570

08001a00 <sensors_getStateStr>:

/**
 * Returns the name of a state as a string (char*)
 * @param state An enum state from the state machine
 */
const char* sensors_getStateStr(wt_state_t state) {
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
    if ( (state < ST_CONFIG) || (state > ST_UNKNOWN) ) {
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d901      	bls.n	8001a14 <sensors_getStateStr+0x14>
//        CETI_LOG("get_state_str(): presentState is out of bounds. Setting to ST_UNKNOWN. Current value: %d", presentState);
        state = ST_UNKNOWN;
 8001a10:	2308      	movs	r3, #8
 8001a12:	71fb      	strb	r3, [r7, #7]
    }
    return state_str[state];
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	015b      	lsls	r3, r3, #5
 8001a18:	4a03      	ldr	r2, [pc, #12]	; (8001a28 <sensors_getStateStr+0x28>)
 8001a1a:	4413      	add	r3, r2
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	0800fb4c 	.word	0x0800fb4c

08001a2c <burnwireOn>:

/**
 * Right now this just simply turns on an LED
 * since there's no burn wire connected
 */
int burnwireOn() {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001a30:	2201      	movs	r2, #1
 8001a32:	2120      	movs	r1, #32
 8001a34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a38:	f001 ff0c 	bl	8003854 <HAL_GPIO_WritePin>
	return 0;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <burnwireOff>:

/**
 * Right now this just turns off the LED
 * since there's no burn wire connected
 */
int burnwireOff() {
 8001a42:	b580      	push	{r7, lr}
 8001a44:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2120      	movs	r1, #32
 8001a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4e:	f001 ff01 	bl	8003854 <HAL_GPIO_WritePin>
	return 0;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <recoveryOff>:

int recoveryOff() {
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
	// [TODO]: put the recovery board into the indefinite deep sleep.
	// Does not recover from this without a power cycle
}
 8001a5c:	bf00      	nop
 8001a5e:	4618      	mov	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <logging_setFilename>:
#include <stdio.h>

uint32_t byteswritten = 0;
char cetiSensorFilename[13] = "";

void logging_setFilename(uint8_t* time) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	snprintf(cetiSensorFilename, 13, "%s.txt", time);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <logging_setFilename+0x1c>)
 8001a74:	210d      	movs	r1, #13
 8001a76:	4804      	ldr	r0, [pc, #16]	; (8001a88 <logging_setFilename+0x20>)
 8001a78:	f00b fc4a 	bl	800d310 <sniprintf>

}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	0800f8f0 	.word	0x0800f8f0
 8001a88:	20000578 	.word	0x20000578

08001a8c <logging_writeToFile>:

void logging_writeToFile(char* line) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	FRESULT res; /* FatFs function common result code */

		//Open file for writing (Create)
		if(f_open(&SDFile, cetiSensorFilename, FA_OPEN_APPEND | FA_WRITE) == FR_OK) {
 8001a94:	2232      	movs	r2, #50	; 0x32
 8001a96:	4913      	ldr	r1, [pc, #76]	; (8001ae4 <logging_writeToFile+0x58>)
 8001a98:	4813      	ldr	r0, [pc, #76]	; (8001ae8 <logging_writeToFile+0x5c>)
 8001a9a:	f00a fac9 	bl	800c030 <f_open>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d118      	bne.n	8001ad6 <logging_writeToFile+0x4a>
			//Write to the text file
			res = f_write(&SDFile, line, strlen((char *)line), (void *)&byteswritten);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7fe fb93 	bl	80001d0 <strlen>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <logging_writeToFile+0x60>)
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	480d      	ldr	r0, [pc, #52]	; (8001ae8 <logging_writeToFile+0x5c>)
 8001ab2:	f00a fc7b 	bl	800c3ac <f_write>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	73fb      	strb	r3, [r7, #15]
			if((byteswritten == 0) || (res != FR_OK)) {
 8001aba:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <logging_writeToFile+0x60>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <logging_writeToFile+0x3c>
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d002      	beq.n	8001ace <logging_writeToFile+0x42>
//				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
				Error_Handler();
 8001ac8:	f000 fcba 	bl	8002440 <Error_Handler>
//			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
			Error_Handler();
		}


}
 8001acc:	e005      	b.n	8001ada <logging_writeToFile+0x4e>
				f_close(&SDFile);
 8001ace:	4806      	ldr	r0, [pc, #24]	; (8001ae8 <logging_writeToFile+0x5c>)
 8001ad0:	f00a fe5f 	bl	800c792 <f_close>
}
 8001ad4:	e001      	b.n	8001ada <logging_writeToFile+0x4e>
			Error_Handler();
 8001ad6:	f000 fcb3 	bl	8002440 <Error_Handler>
}
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000578 	.word	0x20000578
 8001ae8:	20000c78 	.word	0x20000c78
 8001aec:	20000574 	.word	0x20000574

08001af0 <logging_mountSD>:

int logging_mountSD() {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
	return f_mount(&SDFatFS, (TCHAR const*)SDPath, 1);
 8001af4:	2201      	movs	r2, #1
 8001af6:	4903      	ldr	r1, [pc, #12]	; (8001b04 <logging_mountSD+0x14>)
 8001af8:	4803      	ldr	r0, [pc, #12]	; (8001b08 <logging_mountSD+0x18>)
 8001afa:	f00a fa53 	bl	800bfa4 <f_mount>
 8001afe:	4603      	mov	r3, r0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000a44 	.word	0x20000a44
 8001b08:	20000a48 	.word	0x20000a48

08001b0c <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001b14:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <bno055_assignI2C+0x1c>)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6013      	str	r3, [r2, #0]
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000588 	.word	0x20000588

08001b2c <bno055_delay>:

void bno055_delay(int time) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f001 f95c 	bl	8002df4 <HAL_Delay>
#endif
}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	460a      	mov	r2, r1
 8001b4e:	71fb      	strb	r3, [r7, #7]
 8001b50:	4613      	mov	r3, r2
 8001b52:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	733b      	strb	r3, [r7, #12]
 8001b58:	79bb      	ldrb	r3, [r7, #6]
 8001b5a:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001b5c:	4b5a      	ldr	r3, [pc, #360]	; (8001cc8 <bno055_writeData+0x184>)
 8001b5e:	6818      	ldr	r0, [r3, #0]
 8001b60:	f107 020c 	add.w	r2, r7, #12
 8001b64:	230a      	movs	r3, #10
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	2302      	movs	r3, #2
 8001b6a:	2150      	movs	r1, #80	; 0x50
 8001b6c:	f001 ff1a 	bl	80039a4 <HAL_I2C_Master_Transmit>
 8001b70:	4603      	mov	r3, r0
 8001b72:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8001b74:	7dfb      	ldrb	r3, [r7, #23]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 80a0 	beq.w	8001cbc <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8001b7c:	7dfb      	ldrb	r3, [r7, #23]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d103      	bne.n	8001b8a <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8001b82:	4852      	ldr	r0, [pc, #328]	; (8001ccc <bno055_writeData+0x188>)
 8001b84:	f00b fbbc 	bl	800d300 <puts>
 8001b88:	e012      	b.n	8001bb0 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8001b8a:	7dfb      	ldrb	r3, [r7, #23]
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d103      	bne.n	8001b98 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001b90:	484f      	ldr	r0, [pc, #316]	; (8001cd0 <bno055_writeData+0x18c>)
 8001b92:	f00b fbb5 	bl	800d300 <puts>
 8001b96:	e00b      	b.n	8001bb0 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001b98:	7dfb      	ldrb	r3, [r7, #23]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d103      	bne.n	8001ba6 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8001b9e:	484d      	ldr	r0, [pc, #308]	; (8001cd4 <bno055_writeData+0x190>)
 8001ba0:	f00b fbae 	bl	800d300 <puts>
 8001ba4:	e004      	b.n	8001bb0 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001ba6:	7dfb      	ldrb	r3, [r7, #23]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	484b      	ldr	r0, [pc, #300]	; (8001cd8 <bno055_writeData+0x194>)
 8001bac:	f00b fb22 	bl	800d1f4 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001bb0:	4b45      	ldr	r3, [pc, #276]	; (8001cc8 <bno055_writeData+0x184>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f002 f8ed 	bl	8003d94 <HAL_I2C_GetError>
 8001bba:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d07e      	beq.n	8001cc0 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d103      	bne.n	8001bd0 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001bc8:	4844      	ldr	r0, [pc, #272]	; (8001cdc <bno055_writeData+0x198>)
 8001bca:	f00b fb99 	bl	800d300 <puts>
 8001bce:	e021      	b.n	8001c14 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d103      	bne.n	8001bde <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001bd6:	4842      	ldr	r0, [pc, #264]	; (8001ce0 <bno055_writeData+0x19c>)
 8001bd8:	f00b fb92 	bl	800d300 <puts>
 8001bdc:	e01a      	b.n	8001c14 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d103      	bne.n	8001bec <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001be4:	483f      	ldr	r0, [pc, #252]	; (8001ce4 <bno055_writeData+0x1a0>)
 8001be6:	f00b fb8b 	bl	800d300 <puts>
 8001bea:	e013      	b.n	8001c14 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	2b08      	cmp	r3, #8
 8001bf0:	d103      	bne.n	8001bfa <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8001bf2:	483d      	ldr	r0, [pc, #244]	; (8001ce8 <bno055_writeData+0x1a4>)
 8001bf4:	f00b fb84 	bl	800d300 <puts>
 8001bf8:	e00c      	b.n	8001c14 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	2b10      	cmp	r3, #16
 8001bfe:	d103      	bne.n	8001c08 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001c00:	483a      	ldr	r0, [pc, #232]	; (8001cec <bno055_writeData+0x1a8>)
 8001c02:	f00b fb7d 	bl	800d300 <puts>
 8001c06:	e005      	b.n	8001c14 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	2b20      	cmp	r3, #32
 8001c0c:	d102      	bne.n	8001c14 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8001c0e:	4838      	ldr	r0, [pc, #224]	; (8001cf0 <bno055_writeData+0x1ac>)
 8001c10:	f00b fb76 	bl	800d300 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001c14:	4b2c      	ldr	r3, [pc, #176]	; (8001cc8 <bno055_writeData+0x184>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f002 f8ad 	bl	8003d78 <HAL_I2C_GetState>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d103      	bne.n	8001c30 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001c28:	4832      	ldr	r0, [pc, #200]	; (8001cf4 <bno055_writeData+0x1b0>)
 8001c2a:	f00b fb69 	bl	800d300 <puts>
 8001c2e:	e048      	b.n	8001cc2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	2b20      	cmp	r3, #32
 8001c34:	d103      	bne.n	8001c3e <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001c36:	482f      	ldr	r0, [pc, #188]	; (8001cf4 <bno055_writeData+0x1b0>)
 8001c38:	f00b fb62 	bl	800d300 <puts>
 8001c3c:	e041      	b.n	8001cc2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
 8001c40:	2b24      	cmp	r3, #36	; 0x24
 8001c42:	d103      	bne.n	8001c4c <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001c44:	482c      	ldr	r0, [pc, #176]	; (8001cf8 <bno055_writeData+0x1b4>)
 8001c46:	f00b fb5b 	bl	800d300 <puts>
 8001c4a:	e03a      	b.n	8001cc2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	2b21      	cmp	r3, #33	; 0x21
 8001c50:	d103      	bne.n	8001c5a <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8001c52:	482a      	ldr	r0, [pc, #168]	; (8001cfc <bno055_writeData+0x1b8>)
 8001c54:	f00b fb54 	bl	800d300 <puts>
 8001c58:	e033      	b.n	8001cc2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
 8001c5c:	2b22      	cmp	r3, #34	; 0x22
 8001c5e:	d103      	bne.n	8001c68 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001c60:	4827      	ldr	r0, [pc, #156]	; (8001d00 <bno055_writeData+0x1bc>)
 8001c62:	f00b fb4d 	bl	800d300 <puts>
 8001c66:	e02c      	b.n	8001cc2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	2b28      	cmp	r3, #40	; 0x28
 8001c6c:	d103      	bne.n	8001c76 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8001c6e:	4825      	ldr	r0, [pc, #148]	; (8001d04 <bno055_writeData+0x1c0>)
 8001c70:	f00b fb46 	bl	800d300 <puts>
 8001c74:	e025      	b.n	8001cc2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	2b29      	cmp	r3, #41	; 0x29
 8001c7a:	d103      	bne.n	8001c84 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001c7c:	4822      	ldr	r0, [pc, #136]	; (8001d08 <bno055_writeData+0x1c4>)
 8001c7e:	f00b fb3f 	bl	800d300 <puts>
 8001c82:	e01e      	b.n	8001cc2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	2b2a      	cmp	r3, #42	; 0x2a
 8001c88:	d103      	bne.n	8001c92 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001c8a:	4820      	ldr	r0, [pc, #128]	; (8001d0c <bno055_writeData+0x1c8>)
 8001c8c:	f00b fb38 	bl	800d300 <puts>
 8001c90:	e017      	b.n	8001cc2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	2b60      	cmp	r3, #96	; 0x60
 8001c96:	d103      	bne.n	8001ca0 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001c98:	481d      	ldr	r0, [pc, #116]	; (8001d10 <bno055_writeData+0x1cc>)
 8001c9a:	f00b fb31 	bl	800d300 <puts>
 8001c9e:	e010      	b.n	8001cc2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	2ba0      	cmp	r3, #160	; 0xa0
 8001ca4:	d103      	bne.n	8001cae <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001ca6:	481b      	ldr	r0, [pc, #108]	; (8001d14 <bno055_writeData+0x1d0>)
 8001ca8:	f00b fb2a 	bl	800d300 <puts>
 8001cac:	e009      	b.n	8001cc2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	2be0      	cmp	r3, #224	; 0xe0
 8001cb2:	d106      	bne.n	8001cc2 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001cb4:	4818      	ldr	r0, [pc, #96]	; (8001d18 <bno055_writeData+0x1d4>)
 8001cb6:	f00b fb23 	bl	800d300 <puts>
 8001cba:	e002      	b.n	8001cc2 <bno055_writeData+0x17e>
    return;
 8001cbc:	bf00      	nop
 8001cbe:	e000      	b.n	8001cc2 <bno055_writeData+0x17e>
    return;
 8001cc0:	bf00      	nop
  }
}
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000588 	.word	0x20000588
 8001ccc:	0800f8f8 	.word	0x0800f8f8
 8001cd0:	0800f91c 	.word	0x0800f91c
 8001cd4:	0800f944 	.word	0x0800f944
 8001cd8:	0800f968 	.word	0x0800f968
 8001cdc:	0800f980 	.word	0x0800f980
 8001ce0:	0800f994 	.word	0x0800f994
 8001ce4:	0800f9a8 	.word	0x0800f9a8
 8001ce8:	0800f9bc 	.word	0x0800f9bc
 8001cec:	0800f9d0 	.word	0x0800f9d0
 8001cf0:	0800f9e4 	.word	0x0800f9e4
 8001cf4:	0800f9fc 	.word	0x0800f9fc
 8001cf8:	0800fa14 	.word	0x0800fa14
 8001cfc:	0800fa28 	.word	0x0800fa28
 8001d00:	0800fa40 	.word	0x0800fa40
 8001d04:	0800fa58 	.word	0x0800fa58
 8001d08:	0800fa70 	.word	0x0800fa70
 8001d0c:	0800fa90 	.word	0x0800fa90
 8001d10:	0800fab0 	.word	0x0800fab0
 8001d14:	0800fac8 	.word	0x0800fac8
 8001d18:	0800fae0 	.word	0x0800fae0

08001d1c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af02      	add	r7, sp, #8
 8001d22:	4603      	mov	r3, r0
 8001d24:	6039      	str	r1, [r7, #0]
 8001d26:	71fb      	strb	r3, [r7, #7]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <bno055_readData+0x40>)
 8001d2e:	6818      	ldr	r0, [r3, #0]
 8001d30:	1dfa      	adds	r2, r7, #7
 8001d32:	2364      	movs	r3, #100	; 0x64
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	2301      	movs	r3, #1
 8001d38:	2150      	movs	r1, #80	; 0x50
 8001d3a:	f001 fe33 	bl	80039a4 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8001d3e:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <bno055_readData+0x40>)
 8001d40:	6818      	ldr	r0, [r3, #0]
 8001d42:	79bb      	ldrb	r3, [r7, #6]
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	2264      	movs	r2, #100	; 0x64
 8001d48:	9200      	str	r2, [sp, #0]
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	2150      	movs	r1, #80	; 0x50
 8001d4e:	f001 ff1d 	bl	8003b8c <HAL_I2C_Master_Receive>
                         100);
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000588 	.word	0x20000588

08001d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d64:	f000 ffca 	bl	8002cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d68:	f000 f870 	bl	8001e4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d6c:	f000 fa6e 	bl	800224c <MX_GPIO_Init>
  MX_DMA_Init();
 8001d70:	f000 fa2a 	bl	80021c8 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8001d74:	f000 f96e 	bl	8002054 <MX_SDMMC1_SD_Init>
  MX_USART2_UART_Init();
 8001d78:	f000 f9f2 	bl	8002160 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8001d7c:	f008 f9fc 	bl	800a178 <MX_FATFS_Init>
  MX_SPI2_Init();
 8001d80:	f000 f988 	bl	8002094 <MX_SPI2_Init>
  MX_I2C1_Init();
 8001d84:	f000 f8b6 	bl	8001ef4 <MX_I2C1_Init>
  MX_RTC_Init();
 8001d88:	f000 f8f4 	bl	8001f74 <MX_RTC_Init>
  MX_TIM16_Init();
 8001d8c:	f000 f9c0 	bl	8002110 <MX_TIM16_Init>



  // IMU startup functions
#if USE_IMU
  bno055_assignI2C(&hi2c1);
 8001d90:	4826      	ldr	r0, [pc, #152]	; (8001e2c <main+0xcc>)
 8001d92:	f7ff febb 	bl	8001b0c <bno055_assignI2C>
  bno055_setup();
 8001d96:	f7ff f8c9 	bl	8000f2c <bno055_setup>
  bno055_setOperationModeNDOF();
 8001d9a:	f7ff f8b4 	bl	8000f06 <bno055_setOperationModeNDOF>
#endif
  // Other I2C sensor startup functions
#if USE_PRESSURE_SNSR
  keller_assignI2C(&hi2c1);
 8001d9e:	4823      	ldr	r0, [pc, #140]	; (8001e2c <main+0xcc>)
 8001da0:	f7ff fa84 	bl	80012ac <keller_assignI2C>
#endif
#if USE_FUEL_GAUGE
  fuelGauge_assignI2C(&hi2c1);
 8001da4:	4821      	ldr	r0, [pc, #132]	; (8001e2c <main+0xcc>)
 8001da6:	f7ff fa71 	bl	800128c <fuelGauge_assignI2C>
#endif
#if USE_LIGHT_SNSR
  light_assignI2C(&hi2c1);
 8001daa:	4820      	ldr	r0, [pc, #128]	; (8001e2c <main+0xcc>)
 8001dac:	f7ff fa8e 	bl	80012cc <light_assignI2C>
#endif
  sensors_initI2C();
 8001db0:	f7ff fb12 	bl	80013d8 <sensors_initI2C>
        - Synch Prediv   = Value according to source clock
        - OutPut         = Output Disable
        - OutPutPolarity = High Polarity
        - OutPutType     = Open Drain */
//    __HAL_RTC_RESET_HANDLE_STATE(&RtcHandle);
    RtcHandle.Instance = RTC;
 8001db4:	4b1e      	ldr	r3, [pc, #120]	; (8001e30 <main+0xd0>)
 8001db6:	4a1f      	ldr	r2, [pc, #124]	; (8001e34 <main+0xd4>)
 8001db8:	601a      	str	r2, [r3, #0]
    RtcHandle.Init.HourFormat     = RTC_HOURFORMAT_12;
 8001dba:	4b1d      	ldr	r3, [pc, #116]	; (8001e30 <main+0xd0>)
 8001dbc:	2240      	movs	r2, #64	; 0x40
 8001dbe:	605a      	str	r2, [r3, #4]
    RtcHandle.Init.AsynchPrediv   = RTC_ASYNCH_PREDIV;
 8001dc0:	4b1b      	ldr	r3, [pc, #108]	; (8001e30 <main+0xd0>)
 8001dc2:	227f      	movs	r2, #127	; 0x7f
 8001dc4:	609a      	str	r2, [r3, #8]
    RtcHandle.Init.SynchPrediv    = RTC_SYNCH_PREDIV;
 8001dc6:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <main+0xd0>)
 8001dc8:	22f9      	movs	r2, #249	; 0xf9
 8001dca:	60da      	str	r2, [r3, #12]
    RtcHandle.Init.OutPut         = RTC_OUTPUT_DISABLE;
 8001dcc:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <main+0xd0>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	611a      	str	r2, [r3, #16]
    RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001dd2:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <main+0xd0>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
    RtcHandle.Init.OutPutType     = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001dd8:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <main+0xd0>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	61da      	str	r2, [r3, #28]

    if(HAL_RTC_Init(&RtcHandle) != HAL_OK)
 8001dde:	4814      	ldr	r0, [pc, #80]	; (8001e30 <main+0xd0>)
 8001de0:	f004 fc72 	bl	80066c8 <HAL_RTC_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <main+0x8e>
    {
      /* Initialization Error */
      Error_Handler();
 8001dea:	f000 fb29 	bl	8002440 <Error_Handler>
    }



  RTC_CalendarShow();
 8001dee:	f000 fac7 	bl	8002380 <RTC_CalendarShow>
//  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RTO);
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxData, 255);
 8001df2:	22ff      	movs	r2, #255	; 0xff
 8001df4:	4910      	ldr	r1, [pc, #64]	; (8001e38 <main+0xd8>)
 8001df6:	4811      	ldr	r0, [pc, #68]	; (8001e3c <main+0xdc>)
 8001df8:	f007 fc2f 	bl	800965a <HAL_UARTEx_ReceiveToIdle_DMA>

//  HAL_UART_ReceiverTimeout_Config(&huart2, 345600);
//  HAL_UART_Receive_IT(&huart2, rxData, 255);

  // Set the sensor data filename to be the timestamp
  if (logging_mountSD() == FR_OK) {
 8001dfc:	f7ff fe78 	bl	8001af0 <logging_mountSD>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d105      	bne.n	8001e12 <main+0xb2>
	  logging_setFilename(aShowTime);
 8001e06:	480e      	ldr	r0, [pc, #56]	; (8001e40 <main+0xe0>)
 8001e08:	f7ff fe2e 	bl	8001a68 <logging_setFilename>

	  // Start the interrupt timer
		logging_writeToFile(header);
 8001e0c:	480d      	ldr	r0, [pc, #52]	; (8001e44 <main+0xe4>)
 8001e0e:	f7ff fe3d 	bl	8001a8c <logging_writeToFile>
//  bno080_sendFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, 500, 0);


  while (1)
  {
	  RTC_CalendarShow();
 8001e12:	f000 fab5 	bl	8002380 <RTC_CalendarShow>
//			  v.w, v.x, v.y, v.z,
//			  ambientLight);

//	  logging_writeToFile();

	  sensors_getAll(aShowTime, aShowDate);
 8001e16:	490c      	ldr	r1, [pc, #48]	; (8001e48 <main+0xe8>)
 8001e18:	4809      	ldr	r0, [pc, #36]	; (8001e40 <main+0xe0>)
 8001e1a:	f7ff fc3b 	bl	8001694 <sensors_getAll>
	  sensors_updatePeriodic();
 8001e1e:	f7ff fca5 	bl	800176c <sensors_updatePeriodic>

	  HAL_Delay(1000);
 8001e22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e26:	f000 ffe5 	bl	8002df4 <HAL_Delay>
	  RTC_CalendarShow();
 8001e2a:	e7f2      	b.n	8001e12 <main+0xb2>
 8001e2c:	2000058c 	.word	0x2000058c
 8001e30:	200008dc 	.word	0x200008dc
 8001e34:	40002800 	.word	0x40002800
 8001e38:	20000900 	.word	0x20000900
 8001e3c:	200007c8 	.word	0x200007c8
 8001e40:	20000a00 	.word	0x20000a00
 8001e44:	0800fc6c 	.word	0x0800fc6c
 8001e48:	20000a1c 	.word	0x20000a1c

08001e4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b096      	sub	sp, #88	; 0x58
 8001e50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e52:	f107 0314 	add.w	r3, r7, #20
 8001e56:	2244      	movs	r2, #68	; 0x44
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f00a fd58 	bl	800c910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e60:	463b      	mov	r3, r7
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	605a      	str	r2, [r3, #4]
 8001e68:	609a      	str	r2, [r3, #8]
 8001e6a:	60da      	str	r2, [r3, #12]
 8001e6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001e6e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001e72:	f002 fab9 	bl	80043e8 <HAL_PWREx_ControlVoltageScaling>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001e7c:	f000 fae0 	bl	8002440 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001e80:	230a      	movs	r3, #10
 8001e82:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e88:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e8a:	2310      	movs	r3, #16
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e92:	2302      	movs	r3, #2
 8001e94:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e96:	2302      	movs	r3, #2
 8001e98:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001e9e:	230a      	movs	r3, #10
 8001ea0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ea2:	2307      	movs	r3, #7
 8001ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f002 faee 	bl	8004494 <HAL_RCC_OscConfig>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001ebe:	f000 fabf 	bl	8002440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ec2:	230f      	movs	r3, #15
 8001ec4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ed6:	463b      	mov	r3, r7
 8001ed8:	2104      	movs	r1, #4
 8001eda:	4618      	mov	r0, r3
 8001edc:	f002 feb6 	bl	8004c4c <HAL_RCC_ClockConfig>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001ee6:	f000 faab 	bl	8002440 <Error_Handler>
  }
}
 8001eea:	bf00      	nop
 8001eec:	3758      	adds	r7, #88	; 0x58
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ef8:	4b1b      	ldr	r3, [pc, #108]	; (8001f68 <MX_I2C1_Init+0x74>)
 8001efa:	4a1c      	ldr	r2, [pc, #112]	; (8001f6c <MX_I2C1_Init+0x78>)
 8001efc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001efe:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <MX_I2C1_Init+0x74>)
 8001f00:	4a1b      	ldr	r2, [pc, #108]	; (8001f70 <MX_I2C1_Init+0x7c>)
 8001f02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f04:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <MX_I2C1_Init+0x74>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f0a:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <MX_I2C1_Init+0x74>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f10:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <MX_I2C1_Init+0x74>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f16:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <MX_I2C1_Init+0x74>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f1c:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <MX_I2C1_Init+0x74>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f22:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <MX_I2C1_Init+0x74>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f28:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <MX_I2C1_Init+0x74>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f2e:	480e      	ldr	r0, [pc, #56]	; (8001f68 <MX_I2C1_Init+0x74>)
 8001f30:	f001 fca8 	bl	8003884 <HAL_I2C_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001f3a:	f000 fa81 	bl	8002440 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4809      	ldr	r0, [pc, #36]	; (8001f68 <MX_I2C1_Init+0x74>)
 8001f42:	f002 f9ab 	bl	800429c <HAL_I2CEx_ConfigAnalogFilter>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001f4c:	f000 fa78 	bl	8002440 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f50:	2100      	movs	r1, #0
 8001f52:	4805      	ldr	r0, [pc, #20]	; (8001f68 <MX_I2C1_Init+0x74>)
 8001f54:	f002 f9ed 	bl	8004332 <HAL_I2CEx_ConfigDigitalFilter>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001f5e:	f000 fa6f 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	2000058c 	.word	0x2000058c
 8001f6c:	40005400 	.word	0x40005400
 8001f70:	10909cec 	.word	0x10909cec

08001f74 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001f88:	2300      	movs	r3, #0
 8001f8a:	603b      	str	r3, [r7, #0]

  /* USER CODE BEGIN RTC_Init 1 */

    /*##-1- Configure the Time Stamp peripheral ################################*/
    HAL_RTCEx_SetTimeStamp_IT(&RtcHandle, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_DEFAULT);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2100      	movs	r1, #0
 8001f90:	482d      	ldr	r0, [pc, #180]	; (8002048 <MX_RTC_Init+0xd4>)
 8001f92:	f004 feb3 	bl	8006cfc <HAL_RTCEx_SetTimeStamp_IT>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001f96:	4b2d      	ldr	r3, [pc, #180]	; (800204c <MX_RTC_Init+0xd8>)
 8001f98:	4a2d      	ldr	r2, [pc, #180]	; (8002050 <MX_RTC_Init+0xdc>)
 8001f9a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001f9c:	4b2b      	ldr	r3, [pc, #172]	; (800204c <MX_RTC_Init+0xd8>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001fa2:	4b2a      	ldr	r3, [pc, #168]	; (800204c <MX_RTC_Init+0xd8>)
 8001fa4:	227f      	movs	r2, #127	; 0x7f
 8001fa6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001fa8:	4b28      	ldr	r3, [pc, #160]	; (800204c <MX_RTC_Init+0xd8>)
 8001faa:	22ff      	movs	r2, #255	; 0xff
 8001fac:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001fae:	4b27      	ldr	r3, [pc, #156]	; (800204c <MX_RTC_Init+0xd8>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001fb4:	4b25      	ldr	r3, [pc, #148]	; (800204c <MX_RTC_Init+0xd8>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001fba:	4b24      	ldr	r3, [pc, #144]	; (800204c <MX_RTC_Init+0xd8>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001fc0:	4b22      	ldr	r3, [pc, #136]	; (800204c <MX_RTC_Init+0xd8>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001fc6:	4821      	ldr	r0, [pc, #132]	; (800204c <MX_RTC_Init+0xd8>)
 8001fc8:	f004 fb7e 	bl	80066c8 <HAL_RTC_Init>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001fd2:	f000 fa35 	bl	8002440 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) == '*') {
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	481c      	ldr	r0, [pc, #112]	; (800204c <MX_RTC_Init+0xd8>)
 8001fda:	f004 ff06 	bl	8006dea <HAL_RTCEx_BKUPRead>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8001fe2:	d02d      	beq.n	8002040 <MX_RTC_Init+0xcc>
	  //Time is OK
	  return;
  } else {
	    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, '*');
 8001fe4:	222a      	movs	r2, #42	; 0x2a
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4818      	ldr	r0, [pc, #96]	; (800204c <MX_RTC_Init+0xd8>)
 8001fea:	f004 fee5 	bl	8006db8 <HAL_RTCEx_BKUPWrite>
  }
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 11;
 8001fee:	230b      	movs	r3, #11
 8001ff0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 12;
 8001ff2:	230c      	movs	r3, #12
 8001ff4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002002:	1d3b      	adds	r3, r7, #4
 8002004:	2200      	movs	r2, #0
 8002006:	4619      	mov	r1, r3
 8002008:	4810      	ldr	r0, [pc, #64]	; (800204c <MX_RTC_Init+0xd8>)
 800200a:	f004 fbd8 	bl	80067be <HAL_RTC_SetTime>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8002014:	f000 fa14 	bl	8002440 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8002018:	2303      	movs	r3, #3
 800201a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 800201c:	2311      	movs	r3, #17
 800201e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 9;
 8002020:	2309      	movs	r3, #9
 8002022:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002028:	463b      	mov	r3, r7
 800202a:	2200      	movs	r2, #0
 800202c:	4619      	mov	r1, r3
 800202e:	4807      	ldr	r0, [pc, #28]	; (800204c <MX_RTC_Init+0xd8>)
 8002030:	f004 fcbe 	bl	80069b0 <HAL_RTC_SetDate>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 800203a:	f000 fa01 	bl	8002440 <Error_Handler>
 800203e:	e000      	b.n	8002042 <MX_RTC_Init+0xce>
	  return;
 8002040:	bf00      	nop
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* USER CODE END RTC_Init 2 */

}
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	200008dc 	.word	0x200008dc
 800204c:	20000670 	.word	0x20000670
 8002050:	40002800 	.word	0x40002800

08002054 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <MX_SDMMC1_SD_Init+0x38>)
 800205a:	4a0d      	ldr	r2, [pc, #52]	; (8002090 <MX_SDMMC1_SD_Init+0x3c>)
 800205c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800205e:	4b0b      	ldr	r3, [pc, #44]	; (800208c <MX_SDMMC1_SD_Init+0x38>)
 8002060:	2200      	movs	r2, #0
 8002062:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002064:	4b09      	ldr	r3, [pc, #36]	; (800208c <MX_SDMMC1_SD_Init+0x38>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800206a:	4b08      	ldr	r3, [pc, #32]	; (800208c <MX_SDMMC1_SD_Init+0x38>)
 800206c:	2200      	movs	r2, #0
 800206e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <MX_SDMMC1_SD_Init+0x38>)
 8002072:	2200      	movs	r2, #0
 8002074:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002076:	4b05      	ldr	r3, [pc, #20]	; (800208c <MX_SDMMC1_SD_Init+0x38>)
 8002078:	2200      	movs	r2, #0
 800207a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <MX_SDMMC1_SD_Init+0x38>)
 800207e:	2200      	movs	r2, #0
 8002080:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	20000694 	.word	0x20000694
 8002090:	40012800 	.word	0x40012800

08002094 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  	 */


  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <MX_SPI2_Init+0x74>)
 800209a:	4a1c      	ldr	r2, [pc, #112]	; (800210c <MX_SPI2_Init+0x78>)
 800209c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800209e:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <MX_SPI2_Init+0x74>)
 80020a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80020a6:	4b18      	ldr	r3, [pc, #96]	; (8002108 <MX_SPI2_Init+0x74>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80020ac:	4b16      	ldr	r3, [pc, #88]	; (8002108 <MX_SPI2_Init+0x74>)
 80020ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80020b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80020b4:	4b14      	ldr	r3, [pc, #80]	; (8002108 <MX_SPI2_Init+0x74>)
 80020b6:	2202      	movs	r2, #2
 80020b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80020ba:	4b13      	ldr	r3, [pc, #76]	; (8002108 <MX_SPI2_Init+0x74>)
 80020bc:	2201      	movs	r2, #1
 80020be:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <MX_SPI2_Init+0x74>)
 80020c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80020c8:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <MX_SPI2_Init+0x74>)
 80020ca:	2228      	movs	r2, #40	; 0x28
 80020cc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <MX_SPI2_Init+0x74>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <MX_SPI2_Init+0x74>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020da:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <MX_SPI2_Init+0x74>)
 80020dc:	2200      	movs	r2, #0
 80020de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80020e0:	4b09      	ldr	r3, [pc, #36]	; (8002108 <MX_SPI2_Init+0x74>)
 80020e2:	2207      	movs	r2, #7
 80020e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80020e6:	4b08      	ldr	r3, [pc, #32]	; (8002108 <MX_SPI2_Init+0x74>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <MX_SPI2_Init+0x74>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80020f2:	4805      	ldr	r0, [pc, #20]	; (8002108 <MX_SPI2_Init+0x74>)
 80020f4:	f006 f8d2 	bl	800829c <HAL_SPI_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80020fe:	f000 f99f 	bl	8002440 <Error_Handler>
  /* USER CODE BEGIN SPI2_Init 2 */
//  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
//    hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
  /* USER CODE END SPI2_Init 2 */

}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000718 	.word	0x20000718
 800210c:	40003800 	.word	0x40003800

08002110 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002114:	4b10      	ldr	r3, [pc, #64]	; (8002158 <MX_TIM16_Init+0x48>)
 8002116:	4a11      	ldr	r2, [pc, #68]	; (800215c <MX_TIM16_Init+0x4c>)
 8002118:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7999;
 800211a:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <MX_TIM16_Init+0x48>)
 800211c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002120:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002122:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <MX_TIM16_Init+0x48>)
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 8002128:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <MX_TIM16_Init+0x48>)
 800212a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800212e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002130:	4b09      	ldr	r3, [pc, #36]	; (8002158 <MX_TIM16_Init+0x48>)
 8002132:	2200      	movs	r2, #0
 8002134:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002136:	4b08      	ldr	r3, [pc, #32]	; (8002158 <MX_TIM16_Init+0x48>)
 8002138:	2200      	movs	r2, #0
 800213a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <MX_TIM16_Init+0x48>)
 800213e:	2200      	movs	r2, #0
 8002140:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002142:	4805      	ldr	r0, [pc, #20]	; (8002158 <MX_TIM16_Init+0x48>)
 8002144:	f006 f94d 	bl	80083e2 <HAL_TIM_Base_Init>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800214e:	f000 f977 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	2000077c 	.word	0x2000077c
 800215c:	40014400 	.word	0x40014400

08002160 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002164:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <MX_USART2_UART_Init+0x60>)
 8002166:	4a17      	ldr	r2, [pc, #92]	; (80021c4 <MX_USART2_UART_Init+0x64>)
 8002168:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <MX_USART2_UART_Init+0x60>)
 800216c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002170:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002172:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <MX_USART2_UART_Init+0x60>)
 8002174:	2200      	movs	r2, #0
 8002176:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002178:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <MX_USART2_UART_Init+0x60>)
 800217a:	2200      	movs	r2, #0
 800217c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800217e:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <MX_USART2_UART_Init+0x60>)
 8002180:	2200      	movs	r2, #0
 8002182:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002184:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <MX_USART2_UART_Init+0x60>)
 8002186:	220c      	movs	r2, #12
 8002188:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800218a:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <MX_USART2_UART_Init+0x60>)
 800218c:	2200      	movs	r2, #0
 800218e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <MX_USART2_UART_Init+0x60>)
 8002192:	2200      	movs	r2, #0
 8002194:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002196:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <MX_USART2_UART_Init+0x60>)
 8002198:	2200      	movs	r2, #0
 800219a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800219c:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <MX_USART2_UART_Init+0x60>)
 800219e:	2220      	movs	r2, #32
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80021a2:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <MX_USART2_UART_Init+0x60>)
 80021a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021a8:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021aa:	4805      	ldr	r0, [pc, #20]	; (80021c0 <MX_USART2_UART_Init+0x60>)
 80021ac:	f006 fb70 	bl	8008890 <HAL_UART_Init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80021b6:	f000 f943 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	200007c8 	.word	0x200007c8
 80021c4:	40004400 	.word	0x40004400

080021c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80021ce:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <MX_DMA_Init+0x80>)
 80021d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d2:	4a1d      	ldr	r2, [pc, #116]	; (8002248 <MX_DMA_Init+0x80>)
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	6493      	str	r3, [r2, #72]	; 0x48
 80021da:	4b1b      	ldr	r3, [pc, #108]	; (8002248 <MX_DMA_Init+0x80>)
 80021dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	607b      	str	r3, [r7, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021e6:	4b18      	ldr	r3, [pc, #96]	; (8002248 <MX_DMA_Init+0x80>)
 80021e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ea:	4a17      	ldr	r2, [pc, #92]	; (8002248 <MX_DMA_Init+0x80>)
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	6493      	str	r3, [r2, #72]	; 0x48
 80021f2:	4b15      	ldr	r3, [pc, #84]	; (8002248 <MX_DMA_Init+0x80>)
 80021f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80021fe:	2200      	movs	r2, #0
 8002200:	2100      	movs	r1, #0
 8002202:	2010      	movs	r0, #16
 8002204:	f000 fef5 	bl	8002ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002208:	2010      	movs	r0, #16
 800220a:	f000 ff0e 	bl	800302a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800220e:	2200      	movs	r2, #0
 8002210:	2100      	movs	r1, #0
 8002212:	2011      	movs	r0, #17
 8002214:	f000 feed 	bl	8002ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002218:	2011      	movs	r0, #17
 800221a:	f000 ff06 	bl	800302a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2100      	movs	r1, #0
 8002222:	2044      	movs	r0, #68	; 0x44
 8002224:	f000 fee5 	bl	8002ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8002228:	2044      	movs	r0, #68	; 0x44
 800222a:	f000 fefe 	bl	800302a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	2100      	movs	r1, #0
 8002232:	2045      	movs	r0, #69	; 0x45
 8002234:	f000 fedd 	bl	8002ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8002238:	2045      	movs	r0, #69	; 0x45
 800223a:	f000 fef6 	bl	800302a <HAL_NVIC_EnableIRQ>

}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000

0800224c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08a      	sub	sp, #40	; 0x28
 8002250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002252:	f107 0314 	add.w	r3, r7, #20
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	60da      	str	r2, [r3, #12]
 8002260:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002262:	4b44      	ldr	r3, [pc, #272]	; (8002374 <MX_GPIO_Init+0x128>)
 8002264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002266:	4a43      	ldr	r2, [pc, #268]	; (8002374 <MX_GPIO_Init+0x128>)
 8002268:	f043 0304 	orr.w	r3, r3, #4
 800226c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800226e:	4b41      	ldr	r3, [pc, #260]	; (8002374 <MX_GPIO_Init+0x128>)
 8002270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800227a:	4b3e      	ldr	r3, [pc, #248]	; (8002374 <MX_GPIO_Init+0x128>)
 800227c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227e:	4a3d      	ldr	r2, [pc, #244]	; (8002374 <MX_GPIO_Init+0x128>)
 8002280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002286:	4b3b      	ldr	r3, [pc, #236]	; (8002374 <MX_GPIO_Init+0x128>)
 8002288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002292:	4b38      	ldr	r3, [pc, #224]	; (8002374 <MX_GPIO_Init+0x128>)
 8002294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002296:	4a37      	ldr	r2, [pc, #220]	; (8002374 <MX_GPIO_Init+0x128>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800229e:	4b35      	ldr	r3, [pc, #212]	; (8002374 <MX_GPIO_Init+0x128>)
 80022a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022aa:	4b32      	ldr	r3, [pc, #200]	; (8002374 <MX_GPIO_Init+0x128>)
 80022ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ae:	4a31      	ldr	r2, [pc, #196]	; (8002374 <MX_GPIO_Init+0x128>)
 80022b0:	f043 0302 	orr.w	r3, r3, #2
 80022b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022b6:	4b2f      	ldr	r3, [pc, #188]	; (8002374 <MX_GPIO_Init+0x128>)
 80022b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	607b      	str	r3, [r7, #4]
 80022c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022c2:	4b2c      	ldr	r3, [pc, #176]	; (8002374 <MX_GPIO_Init+0x128>)
 80022c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c6:	4a2b      	ldr	r2, [pc, #172]	; (8002374 <MX_GPIO_Init+0x128>)
 80022c8:	f043 0308 	orr.w	r3, r3, #8
 80022cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ce:	4b29      	ldr	r3, [pc, #164]	; (8002374 <MX_GPIO_Init+0x128>)
 80022d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	603b      	str	r3, [r7, #0]
 80022d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80022da:	2200      	movs	r2, #0
 80022dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022e0:	4825      	ldr	r0, [pc, #148]	; (8002378 <MX_GPIO_Init+0x12c>)
 80022e2:	f001 fab7 	bl	8003854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2120      	movs	r1, #32
 80022ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ee:	f001 fab1 	bl	8003854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2118      	movs	r1, #24
 80022f6:	4821      	ldr	r0, [pc, #132]	; (800237c <MX_GPIO_Init+0x130>)
 80022f8:	f001 faac 	bl	8003854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80022fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002302:	2301      	movs	r3, #1
 8002304:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800230e:	f107 0314 	add.w	r3, r7, #20
 8002312:	4619      	mov	r1, r3
 8002314:	4818      	ldr	r0, [pc, #96]	; (8002378 <MX_GPIO_Init+0x12c>)
 8002316:	f001 f8db 	bl	80034d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800231a:	2320      	movs	r3, #32
 800231c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800231e:	2301      	movs	r3, #1
 8002320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	2300      	movs	r3, #0
 8002324:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002326:	2300      	movs	r3, #0
 8002328:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800232a:	f107 0314 	add.w	r3, r7, #20
 800232e:	4619      	mov	r1, r3
 8002330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002334:	f001 f8cc 	bl	80034d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002338:	2318      	movs	r3, #24
 800233a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800233c:	2301      	movs	r3, #1
 800233e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002344:	2300      	movs	r3, #0
 8002346:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	4619      	mov	r1, r3
 800234e:	480b      	ldr	r0, [pc, #44]	; (800237c <MX_GPIO_Init+0x130>)
 8002350:	f001 f8be 	bl	80034d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002354:	2360      	movs	r3, #96	; 0x60
 8002356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002358:	2300      	movs	r3, #0
 800235a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002360:	f107 0314 	add.w	r3, r7, #20
 8002364:	4619      	mov	r1, r3
 8002366:	4805      	ldr	r0, [pc, #20]	; (800237c <MX_GPIO_Init+0x130>)
 8002368:	f001 f8b2 	bl	80034d0 <HAL_GPIO_Init>

}
 800236c:	bf00      	nop
 800236e:	3728      	adds	r7, #40	; 0x28
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40021000 	.word	0x40021000
 8002378:	48000800 	.word	0x48000800
 800237c:	48000400 	.word	0x48000400

08002380 <RTC_CalendarShow>:
  * @param  showtime : pointer to buffer
  * @param  showdate : pointer to buffer
  * @retval None
  */
static void RTC_CalendarShow(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af02      	add	r7, sp, #8
  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 8002386:	463b      	mov	r3, r7
 8002388:	2200      	movs	r2, #0
 800238a:	4619      	mov	r1, r3
 800238c:	4812      	ldr	r0, [pc, #72]	; (80023d8 <RTC_CalendarShow+0x58>)
 800238e:	f004 fab3 	bl	80068f8 <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 8002392:	f107 0314 	add.w	r3, r7, #20
 8002396:	2200      	movs	r2, #0
 8002398:	4619      	mov	r1, r3
 800239a:	480f      	ldr	r0, [pc, #60]	; (80023d8 <RTC_CalendarShow+0x58>)
 800239c:	f004 fb8f 	bl	8006abe <HAL_RTC_GetDate>

  /* Display time Format : hh:mm:ss */
  sprintf((char*)aShowTime,"%.2d%.2d%.2d", stimestructureget.Hours, stimestructureget.Minutes, stimestructureget.Seconds);
 80023a0:	783b      	ldrb	r3, [r7, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	787b      	ldrb	r3, [r7, #1]
 80023a6:	4619      	mov	r1, r3
 80023a8:	78bb      	ldrb	r3, [r7, #2]
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	460b      	mov	r3, r1
 80023ae:	490b      	ldr	r1, [pc, #44]	; (80023dc <RTC_CalendarShow+0x5c>)
 80023b0:	480b      	ldr	r0, [pc, #44]	; (80023e0 <RTC_CalendarShow+0x60>)
 80023b2:	f00a ffe1 	bl	800d378 <siprintf>
  /* Display date Format : mm-dd-yy */
  sprintf((char*)aShowDate,"%.2d%.2d%.2d",  2000 + sdatestructureget.Year, sdatestructureget.Month, sdatestructureget.Date);
 80023b6:	7dfb      	ldrb	r3, [r7, #23]
 80023b8:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80023bc:	7d7b      	ldrb	r3, [r7, #21]
 80023be:	4619      	mov	r1, r3
 80023c0:	7dbb      	ldrb	r3, [r7, #22]
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	460b      	mov	r3, r1
 80023c6:	4905      	ldr	r1, [pc, #20]	; (80023dc <RTC_CalendarShow+0x5c>)
 80023c8:	4806      	ldr	r0, [pc, #24]	; (80023e4 <RTC_CalendarShow+0x64>)
 80023ca:	f00a ffd5 	bl	800d378 <siprintf>
}
 80023ce:	bf00      	nop
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	200008dc 	.word	0x200008dc
 80023dc:	0800faf8 	.word	0x0800faf8
 80023e0:	20000a00 	.word	0x20000a00
 80023e4:	20000a1c 	.word	0x20000a1c

080023e8 <HAL_TIM_PeriodElapsedCallback>:


// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a04      	ldr	r2, [pc, #16]	; (8002404 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d101      	bne.n	80023fc <HAL_TIM_PeriodElapsedCallback+0x14>
  {
//	  RTC_CalendarShow();
	  sensors_updatePeriodic();
 80023f8:	f7ff f9b8 	bl	800176c <sensors_updatePeriodic>
  }
}
 80023fc:	bf00      	nop
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	2000077c 	.word	0x2000077c

08002408 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
////			__HAL_UART_CLEAR_IDLEFLAG(huart);
//			uint8_t rxd = rxData[0];
//		}
//	}
//	HAL_UART_Receive_IT(&huart2, rxData, GPS_LOCATION_LENGTH);
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	807b      	strh	r3, [r7, #2]
	HAL_UARTEx_ReceiveToIdle_DMA(huart, rxData, 255);
 8002428:	22ff      	movs	r2, #255	; 0xff
 800242a:	4904      	ldr	r1, [pc, #16]	; (800243c <HAL_UARTEx_RxEventCallback+0x20>)
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f007 f914 	bl	800965a <HAL_UARTEx_ReceiveToIdle_DMA>
//	  __HAL_DMA_DISABLE_IT(huart, DMA_IT_HT);
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000900 	.word	0x20000900

08002440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002444:	b672      	cpsid	i
}
 8002446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  /* USER CODE END Error_Handler_Debug */
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
	...

08002454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245a:	4b0f      	ldr	r3, [pc, #60]	; (8002498 <HAL_MspInit+0x44>)
 800245c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800245e:	4a0e      	ldr	r2, [pc, #56]	; (8002498 <HAL_MspInit+0x44>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	6613      	str	r3, [r2, #96]	; 0x60
 8002466:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <HAL_MspInit+0x44>)
 8002468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	607b      	str	r3, [r7, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <HAL_MspInit+0x44>)
 8002474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002476:	4a08      	ldr	r2, [pc, #32]	; (8002498 <HAL_MspInit+0x44>)
 8002478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800247c:	6593      	str	r3, [r2, #88]	; 0x58
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_MspInit+0x44>)
 8002480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000

0800249c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b0ac      	sub	sp, #176	; 0xb0
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024b4:	f107 0314 	add.w	r3, r7, #20
 80024b8:	2288      	movs	r2, #136	; 0x88
 80024ba:	2100      	movs	r1, #0
 80024bc:	4618      	mov	r0, r3
 80024be:	f00a fa27 	bl	800c910 <memset>
  if(hi2c->Instance==I2C1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a4b      	ldr	r2, [pc, #300]	; (80025f4 <HAL_I2C_MspInit+0x158>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	f040 808e 	bne.w	80025ea <HAL_I2C_MspInit+0x14e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80024ce:	2340      	movs	r3, #64	; 0x40
 80024d0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80024d2:	2300      	movs	r3, #0
 80024d4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024d6:	f107 0314 	add.w	r3, r7, #20
 80024da:	4618      	mov	r0, r3
 80024dc:	f002 fdda 	bl	8005094 <HAL_RCCEx_PeriphCLKConfig>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80024e6:	f7ff ffab 	bl	8002440 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ea:	4b43      	ldr	r3, [pc, #268]	; (80025f8 <HAL_I2C_MspInit+0x15c>)
 80024ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ee:	4a42      	ldr	r2, [pc, #264]	; (80025f8 <HAL_I2C_MspInit+0x15c>)
 80024f0:	f043 0302 	orr.w	r3, r3, #2
 80024f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024f6:	4b40      	ldr	r3, [pc, #256]	; (80025f8 <HAL_I2C_MspInit+0x15c>)
 80024f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002502:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002506:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800250a:	2312      	movs	r3, #18
 800250c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002516:	2303      	movs	r3, #3
 8002518:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800251c:	2304      	movs	r3, #4
 800251e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002522:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002526:	4619      	mov	r1, r3
 8002528:	4834      	ldr	r0, [pc, #208]	; (80025fc <HAL_I2C_MspInit+0x160>)
 800252a:	f000 ffd1 	bl	80034d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800252e:	4b32      	ldr	r3, [pc, #200]	; (80025f8 <HAL_I2C_MspInit+0x15c>)
 8002530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002532:	4a31      	ldr	r2, [pc, #196]	; (80025f8 <HAL_I2C_MspInit+0x15c>)
 8002534:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002538:	6593      	str	r3, [r2, #88]	; 0x58
 800253a:	4b2f      	ldr	r3, [pc, #188]	; (80025f8 <HAL_I2C_MspInit+0x15c>)
 800253c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA2_Channel6;
 8002546:	4b2e      	ldr	r3, [pc, #184]	; (8002600 <HAL_I2C_MspInit+0x164>)
 8002548:	4a2e      	ldr	r2, [pc, #184]	; (8002604 <HAL_I2C_MspInit+0x168>)
 800254a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_5;
 800254c:	4b2c      	ldr	r3, [pc, #176]	; (8002600 <HAL_I2C_MspInit+0x164>)
 800254e:	2205      	movs	r2, #5
 8002550:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002552:	4b2b      	ldr	r3, [pc, #172]	; (8002600 <HAL_I2C_MspInit+0x164>)
 8002554:	2200      	movs	r2, #0
 8002556:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002558:	4b29      	ldr	r3, [pc, #164]	; (8002600 <HAL_I2C_MspInit+0x164>)
 800255a:	2200      	movs	r2, #0
 800255c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800255e:	4b28      	ldr	r3, [pc, #160]	; (8002600 <HAL_I2C_MspInit+0x164>)
 8002560:	2280      	movs	r2, #128	; 0x80
 8002562:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002564:	4b26      	ldr	r3, [pc, #152]	; (8002600 <HAL_I2C_MspInit+0x164>)
 8002566:	2200      	movs	r2, #0
 8002568:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800256a:	4b25      	ldr	r3, [pc, #148]	; (8002600 <HAL_I2C_MspInit+0x164>)
 800256c:	2200      	movs	r2, #0
 800256e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 8002570:	4b23      	ldr	r3, [pc, #140]	; (8002600 <HAL_I2C_MspInit+0x164>)
 8002572:	2220      	movs	r2, #32
 8002574:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002576:	4b22      	ldr	r3, [pc, #136]	; (8002600 <HAL_I2C_MspInit+0x164>)
 8002578:	2200      	movs	r2, #0
 800257a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800257c:	4820      	ldr	r0, [pc, #128]	; (8002600 <HAL_I2C_MspInit+0x164>)
 800257e:	f000 fd6f 	bl	8003060 <HAL_DMA_Init>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <HAL_I2C_MspInit+0xf0>
    {
      Error_Handler();
 8002588:	f7ff ff5a 	bl	8002440 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a1c      	ldr	r2, [pc, #112]	; (8002600 <HAL_I2C_MspInit+0x164>)
 8002590:	63da      	str	r2, [r3, #60]	; 0x3c
 8002592:	4a1b      	ldr	r2, [pc, #108]	; (8002600 <HAL_I2C_MspInit+0x164>)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA2_Channel7;
 8002598:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <HAL_I2C_MspInit+0x16c>)
 800259a:	4a1c      	ldr	r2, [pc, #112]	; (800260c <HAL_I2C_MspInit+0x170>)
 800259c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_5;
 800259e:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <HAL_I2C_MspInit+0x16c>)
 80025a0:	2205      	movs	r2, #5
 80025a2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025a4:	4b18      	ldr	r3, [pc, #96]	; (8002608 <HAL_I2C_MspInit+0x16c>)
 80025a6:	2210      	movs	r2, #16
 80025a8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025aa:	4b17      	ldr	r3, [pc, #92]	; (8002608 <HAL_I2C_MspInit+0x16c>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025b0:	4b15      	ldr	r3, [pc, #84]	; (8002608 <HAL_I2C_MspInit+0x16c>)
 80025b2:	2280      	movs	r2, #128	; 0x80
 80025b4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025b6:	4b14      	ldr	r3, [pc, #80]	; (8002608 <HAL_I2C_MspInit+0x16c>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025bc:	4b12      	ldr	r3, [pc, #72]	; (8002608 <HAL_I2C_MspInit+0x16c>)
 80025be:	2200      	movs	r2, #0
 80025c0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
 80025c2:	4b11      	ldr	r3, [pc, #68]	; (8002608 <HAL_I2C_MspInit+0x16c>)
 80025c4:	2220      	movs	r2, #32
 80025c6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025c8:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <HAL_I2C_MspInit+0x16c>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80025ce:	480e      	ldr	r0, [pc, #56]	; (8002608 <HAL_I2C_MspInit+0x16c>)
 80025d0:	f000 fd46 	bl	8003060 <HAL_DMA_Init>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_I2C_MspInit+0x142>
    {
      Error_Handler();
 80025da:	f7ff ff31 	bl	8002440 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a09      	ldr	r2, [pc, #36]	; (8002608 <HAL_I2C_MspInit+0x16c>)
 80025e2:	639a      	str	r2, [r3, #56]	; 0x38
 80025e4:	4a08      	ldr	r2, [pc, #32]	; (8002608 <HAL_I2C_MspInit+0x16c>)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80025ea:	bf00      	nop
 80025ec:	37b0      	adds	r7, #176	; 0xb0
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40005400 	.word	0x40005400
 80025f8:	40021000 	.word	0x40021000
 80025fc:	48000400 	.word	0x48000400
 8002600:	200005e0 	.word	0x200005e0
 8002604:	4002046c 	.word	0x4002046c
 8002608:	20000628 	.word	0x20000628
 800260c:	40020480 	.word	0x40020480

08002610 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b0a4      	sub	sp, #144	; 0x90
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002618:	f107 0308 	add.w	r3, r7, #8
 800261c:	2288      	movs	r2, #136	; 0x88
 800261e:	2100      	movs	r1, #0
 8002620:	4618      	mov	r0, r3
 8002622:	f00a f975 	bl	800c910 <memset>
  if(hrtc->Instance==RTC)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a10      	ldr	r2, [pc, #64]	; (800266c <HAL_RTC_MspInit+0x5c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d118      	bne.n	8002662 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002630:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002634:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002636:	f44f 7300 	mov.w	r3, #512	; 0x200
 800263a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800263e:	f107 0308 	add.w	r3, r7, #8
 8002642:	4618      	mov	r0, r3
 8002644:	f002 fd26 	bl	8005094 <HAL_RCCEx_PeriphCLKConfig>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800264e:	f7ff fef7 	bl	8002440 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002652:	4b07      	ldr	r3, [pc, #28]	; (8002670 <HAL_RTC_MspInit+0x60>)
 8002654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002658:	4a05      	ldr	r2, [pc, #20]	; (8002670 <HAL_RTC_MspInit+0x60>)
 800265a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800265e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002662:	bf00      	nop
 8002664:	3790      	adds	r7, #144	; 0x90
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40002800 	.word	0x40002800
 8002670:	40021000 	.word	0x40021000

08002674 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b0ac      	sub	sp, #176	; 0xb0
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	2288      	movs	r2, #136	; 0x88
 8002692:	2100      	movs	r1, #0
 8002694:	4618      	mov	r0, r3
 8002696:	f00a f93b 	bl	800c910 <memset>
  if(hsd->Instance==SDMMC1)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a3f      	ldr	r2, [pc, #252]	; (800279c <HAL_SD_MspInit+0x128>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d176      	bne.n	8002792 <HAL_SD_MspInit+0x11e>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80026a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80026a8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 80026aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80026ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80026b2:	2302      	movs	r3, #2
 80026b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80026b6:	2301      	movs	r3, #1
 80026b8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80026ba:	2308      	movs	r3, #8
 80026bc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80026be:	2307      	movs	r3, #7
 80026c0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 80026c2:	2304      	movs	r3, #4
 80026c4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80026c6:	2302      	movs	r3, #2
 80026c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80026ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026ce:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026d0:	f107 0314 	add.w	r3, r7, #20
 80026d4:	4618      	mov	r0, r3
 80026d6:	f002 fcdd 	bl	8005094 <HAL_RCCEx_PeriphCLKConfig>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <HAL_SD_MspInit+0x70>
    {
      Error_Handler();
 80026e0:	f7ff feae 	bl	8002440 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80026e4:	4b2e      	ldr	r3, [pc, #184]	; (80027a0 <HAL_SD_MspInit+0x12c>)
 80026e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e8:	4a2d      	ldr	r2, [pc, #180]	; (80027a0 <HAL_SD_MspInit+0x12c>)
 80026ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ee:	6613      	str	r3, [r2, #96]	; 0x60
 80026f0:	4b2b      	ldr	r3, [pc, #172]	; (80027a0 <HAL_SD_MspInit+0x12c>)
 80026f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fc:	4b28      	ldr	r3, [pc, #160]	; (80027a0 <HAL_SD_MspInit+0x12c>)
 80026fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002700:	4a27      	ldr	r2, [pc, #156]	; (80027a0 <HAL_SD_MspInit+0x12c>)
 8002702:	f043 0304 	orr.w	r3, r3, #4
 8002706:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002708:	4b25      	ldr	r3, [pc, #148]	; (80027a0 <HAL_SD_MspInit+0x12c>)
 800270a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002714:	4b22      	ldr	r3, [pc, #136]	; (80027a0 <HAL_SD_MspInit+0x12c>)
 8002716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002718:	4a21      	ldr	r2, [pc, #132]	; (80027a0 <HAL_SD_MspInit+0x12c>)
 800271a:	f043 0308 	orr.w	r3, r3, #8
 800271e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002720:	4b1f      	ldr	r3, [pc, #124]	; (80027a0 <HAL_SD_MspInit+0x12c>)
 8002722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002724:	f003 0308 	and.w	r3, r3, #8
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800272c:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8002730:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002734:	2302      	movs	r3, #2
 8002736:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	2300      	movs	r3, #0
 800273c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002740:	2303      	movs	r3, #3
 8002742:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002746:	230c      	movs	r3, #12
 8002748:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800274c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002750:	4619      	mov	r1, r3
 8002752:	4814      	ldr	r0, [pc, #80]	; (80027a4 <HAL_SD_MspInit+0x130>)
 8002754:	f000 febc 	bl	80034d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002758:	2304      	movs	r3, #4
 800275a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275e:	2302      	movs	r3, #2
 8002760:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800276a:	2303      	movs	r3, #3
 800276c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002770:	230c      	movs	r3, #12
 8002772:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002776:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800277a:	4619      	mov	r1, r3
 800277c:	480a      	ldr	r0, [pc, #40]	; (80027a8 <HAL_SD_MspInit+0x134>)
 800277e:	f000 fea7 	bl	80034d0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8002782:	2200      	movs	r2, #0
 8002784:	2100      	movs	r1, #0
 8002786:	2031      	movs	r0, #49	; 0x31
 8002788:	f000 fc33 	bl	8002ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800278c:	2031      	movs	r0, #49	; 0x31
 800278e:	f000 fc4c 	bl	800302a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002792:	bf00      	nop
 8002794:	37b0      	adds	r7, #176	; 0xb0
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40012800 	.word	0x40012800
 80027a0:	40021000 	.word	0x40021000
 80027a4:	48000800 	.word	0x48000800
 80027a8:	48000c00 	.word	0x48000c00

080027ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08a      	sub	sp, #40	; 0x28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b4:	f107 0314 	add.w	r3, r7, #20
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]
 80027c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a25      	ldr	r2, [pc, #148]	; (8002860 <HAL_SPI_MspInit+0xb4>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d144      	bne.n	8002858 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80027ce:	4b25      	ldr	r3, [pc, #148]	; (8002864 <HAL_SPI_MspInit+0xb8>)
 80027d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d2:	4a24      	ldr	r2, [pc, #144]	; (8002864 <HAL_SPI_MspInit+0xb8>)
 80027d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027d8:	6593      	str	r3, [r2, #88]	; 0x58
 80027da:	4b22      	ldr	r3, [pc, #136]	; (8002864 <HAL_SPI_MspInit+0xb8>)
 80027dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027e6:	4b1f      	ldr	r3, [pc, #124]	; (8002864 <HAL_SPI_MspInit+0xb8>)
 80027e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ea:	4a1e      	ldr	r2, [pc, #120]	; (8002864 <HAL_SPI_MspInit+0xb8>)
 80027ec:	f043 0304 	orr.w	r3, r3, #4
 80027f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027f2:	4b1c      	ldr	r3, [pc, #112]	; (8002864 <HAL_SPI_MspInit+0xb8>)
 80027f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027fe:	4b19      	ldr	r3, [pc, #100]	; (8002864 <HAL_SPI_MspInit+0xb8>)
 8002800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002802:	4a18      	ldr	r2, [pc, #96]	; (8002864 <HAL_SPI_MspInit+0xb8>)
 8002804:	f043 0302 	orr.w	r3, r3, #2
 8002808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800280a:	4b16      	ldr	r3, [pc, #88]	; (8002864 <HAL_SPI_MspInit+0xb8>)
 800280c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002816:	230c      	movs	r3, #12
 8002818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281a:	2302      	movs	r3, #2
 800281c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002822:	2303      	movs	r3, #3
 8002824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002826:	2305      	movs	r3, #5
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800282a:	f107 0314 	add.w	r3, r7, #20
 800282e:	4619      	mov	r1, r3
 8002830:	480d      	ldr	r0, [pc, #52]	; (8002868 <HAL_SPI_MspInit+0xbc>)
 8002832:	f000 fe4d 	bl	80034d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800283a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283c:	2302      	movs	r3, #2
 800283e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002844:	2303      	movs	r3, #3
 8002846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002848:	2305      	movs	r3, #5
 800284a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800284c:	f107 0314 	add.w	r3, r7, #20
 8002850:	4619      	mov	r1, r3
 8002852:	4806      	ldr	r0, [pc, #24]	; (800286c <HAL_SPI_MspInit+0xc0>)
 8002854:	f000 fe3c 	bl	80034d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002858:	bf00      	nop
 800285a:	3728      	adds	r7, #40	; 0x28
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40003800 	.word	0x40003800
 8002864:	40021000 	.word	0x40021000
 8002868:	48000800 	.word	0x48000800
 800286c:	48000400 	.word	0x48000400

08002870 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a0d      	ldr	r2, [pc, #52]	; (80028b4 <HAL_TIM_Base_MspInit+0x44>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d113      	bne.n	80028aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002882:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <HAL_TIM_Base_MspInit+0x48>)
 8002884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002886:	4a0c      	ldr	r2, [pc, #48]	; (80028b8 <HAL_TIM_Base_MspInit+0x48>)
 8002888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800288c:	6613      	str	r3, [r2, #96]	; 0x60
 800288e:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <HAL_TIM_Base_MspInit+0x48>)
 8002890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800289a:	2200      	movs	r2, #0
 800289c:	2100      	movs	r1, #0
 800289e:	2019      	movs	r0, #25
 80028a0:	f000 fba7 	bl	8002ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80028a4:	2019      	movs	r0, #25
 80028a6:	f000 fbc0 	bl	800302a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40014400 	.word	0x40014400
 80028b8:	40021000 	.word	0x40021000

080028bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b0ac      	sub	sp, #176	; 0xb0
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	60da      	str	r2, [r3, #12]
 80028d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028d4:	f107 0314 	add.w	r3, r7, #20
 80028d8:	2288      	movs	r2, #136	; 0x88
 80028da:	2100      	movs	r1, #0
 80028dc:	4618      	mov	r0, r3
 80028de:	f00a f817 	bl	800c910 <memset>
  if(huart->Instance==USART2)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a4b      	ldr	r2, [pc, #300]	; (8002a14 <HAL_UART_MspInit+0x158>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	f040 808e 	bne.w	8002a0a <HAL_UART_MspInit+0x14e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80028ee:	2302      	movs	r3, #2
 80028f0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80028f2:	2300      	movs	r3, #0
 80028f4:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028f6:	f107 0314 	add.w	r3, r7, #20
 80028fa:	4618      	mov	r0, r3
 80028fc:	f002 fbca 	bl	8005094 <HAL_RCCEx_PeriphCLKConfig>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002906:	f7ff fd9b 	bl	8002440 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800290a:	4b43      	ldr	r3, [pc, #268]	; (8002a18 <HAL_UART_MspInit+0x15c>)
 800290c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290e:	4a42      	ldr	r2, [pc, #264]	; (8002a18 <HAL_UART_MspInit+0x15c>)
 8002910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002914:	6593      	str	r3, [r2, #88]	; 0x58
 8002916:	4b40      	ldr	r3, [pc, #256]	; (8002a18 <HAL_UART_MspInit+0x15c>)
 8002918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291e:	613b      	str	r3, [r7, #16]
 8002920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002922:	4b3d      	ldr	r3, [pc, #244]	; (8002a18 <HAL_UART_MspInit+0x15c>)
 8002924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002926:	4a3c      	ldr	r2, [pc, #240]	; (8002a18 <HAL_UART_MspInit+0x15c>)
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800292e:	4b3a      	ldr	r3, [pc, #232]	; (8002a18 <HAL_UART_MspInit+0x15c>)
 8002930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800293a:	230c      	movs	r3, #12
 800293c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002940:	2302      	movs	r3, #2
 8002942:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	2300      	movs	r3, #0
 8002948:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294c:	2303      	movs	r3, #3
 800294e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002952:	2307      	movs	r3, #7
 8002954:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002958:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800295c:	4619      	mov	r1, r3
 800295e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002962:	f000 fdb5 	bl	80034d0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002966:	4b2d      	ldr	r3, [pc, #180]	; (8002a1c <HAL_UART_MspInit+0x160>)
 8002968:	4a2d      	ldr	r2, [pc, #180]	; (8002a20 <HAL_UART_MspInit+0x164>)
 800296a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800296c:	4b2b      	ldr	r3, [pc, #172]	; (8002a1c <HAL_UART_MspInit+0x160>)
 800296e:	2202      	movs	r2, #2
 8002970:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002972:	4b2a      	ldr	r3, [pc, #168]	; (8002a1c <HAL_UART_MspInit+0x160>)
 8002974:	2200      	movs	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002978:	4b28      	ldr	r3, [pc, #160]	; (8002a1c <HAL_UART_MspInit+0x160>)
 800297a:	2200      	movs	r2, #0
 800297c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800297e:	4b27      	ldr	r3, [pc, #156]	; (8002a1c <HAL_UART_MspInit+0x160>)
 8002980:	2280      	movs	r2, #128	; 0x80
 8002982:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002984:	4b25      	ldr	r3, [pc, #148]	; (8002a1c <HAL_UART_MspInit+0x160>)
 8002986:	2200      	movs	r2, #0
 8002988:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800298a:	4b24      	ldr	r3, [pc, #144]	; (8002a1c <HAL_UART_MspInit+0x160>)
 800298c:	2200      	movs	r2, #0
 800298e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002990:	4b22      	ldr	r3, [pc, #136]	; (8002a1c <HAL_UART_MspInit+0x160>)
 8002992:	2200      	movs	r2, #0
 8002994:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002996:	4b21      	ldr	r3, [pc, #132]	; (8002a1c <HAL_UART_MspInit+0x160>)
 8002998:	2200      	movs	r2, #0
 800299a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800299c:	481f      	ldr	r0, [pc, #124]	; (8002a1c <HAL_UART_MspInit+0x160>)
 800299e:	f000 fb5f 	bl	8003060 <HAL_DMA_Init>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 80029a8:	f7ff fd4a 	bl	8002440 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a1b      	ldr	r2, [pc, #108]	; (8002a1c <HAL_UART_MspInit+0x160>)
 80029b0:	671a      	str	r2, [r3, #112]	; 0x70
 80029b2:	4a1a      	ldr	r2, [pc, #104]	; (8002a1c <HAL_UART_MspInit+0x160>)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80029b8:	4b1a      	ldr	r3, [pc, #104]	; (8002a24 <HAL_UART_MspInit+0x168>)
 80029ba:	4a1b      	ldr	r2, [pc, #108]	; (8002a28 <HAL_UART_MspInit+0x16c>)
 80029bc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80029be:	4b19      	ldr	r3, [pc, #100]	; (8002a24 <HAL_UART_MspInit+0x168>)
 80029c0:	2202      	movs	r2, #2
 80029c2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029c4:	4b17      	ldr	r3, [pc, #92]	; (8002a24 <HAL_UART_MspInit+0x168>)
 80029c6:	2210      	movs	r2, #16
 80029c8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029ca:	4b16      	ldr	r3, [pc, #88]	; (8002a24 <HAL_UART_MspInit+0x168>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029d0:	4b14      	ldr	r3, [pc, #80]	; (8002a24 <HAL_UART_MspInit+0x168>)
 80029d2:	2280      	movs	r2, #128	; 0x80
 80029d4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029d6:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <HAL_UART_MspInit+0x168>)
 80029d8:	2200      	movs	r2, #0
 80029da:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029dc:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <HAL_UART_MspInit+0x168>)
 80029de:	2200      	movs	r2, #0
 80029e0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80029e2:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <HAL_UART_MspInit+0x168>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029e8:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <HAL_UART_MspInit+0x168>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80029ee:	480d      	ldr	r0, [pc, #52]	; (8002a24 <HAL_UART_MspInit+0x168>)
 80029f0:	f000 fb36 	bl	8003060 <HAL_DMA_Init>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 80029fa:	f7ff fd21 	bl	8002440 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a08      	ldr	r2, [pc, #32]	; (8002a24 <HAL_UART_MspInit+0x168>)
 8002a02:	66da      	str	r2, [r3, #108]	; 0x6c
 8002a04:	4a07      	ldr	r2, [pc, #28]	; (8002a24 <HAL_UART_MspInit+0x168>)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a0a:	bf00      	nop
 8002a0c:	37b0      	adds	r7, #176	; 0xb0
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40004400 	.word	0x40004400
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	2000084c 	.word	0x2000084c
 8002a20:	4002006c 	.word	0x4002006c
 8002a24:	20000894 	.word	0x20000894
 8002a28:	40020080 	.word	0x40020080

08002a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002a30:	e7fe      	b.n	8002a30 <NMI_Handler+0x4>

08002a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a32:	b480      	push	{r7}
 8002a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a36:	e7fe      	b.n	8002a36 <HardFault_Handler+0x4>

08002a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a3c:	e7fe      	b.n	8002a3c <MemManage_Handler+0x4>

08002a3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a42:	e7fe      	b.n	8002a42 <BusFault_Handler+0x4>

08002a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a48:	e7fe      	b.n	8002a48 <UsageFault_Handler+0x4>

08002a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a5c:	bf00      	nop
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a66:	b480      	push	{r7}
 8002a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a78:	f000 f99c 	bl	8002db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a7c:	bf00      	nop
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002a84:	4802      	ldr	r0, [pc, #8]	; (8002a90 <DMA1_Channel6_IRQHandler+0x10>)
 8002a86:	f000 fc44 	bl	8003312 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	2000084c 	.word	0x2000084c

08002a94 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002a98:	4802      	ldr	r0, [pc, #8]	; (8002aa4 <DMA1_Channel7_IRQHandler+0x10>)
 8002a9a:	f000 fc3a 	bl	8003312 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000894 	.word	0x20000894

08002aa8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002aac:	4802      	ldr	r0, [pc, #8]	; (8002ab8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002aae:	f005 fcef 	bl	8008490 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	2000077c 	.word	0x2000077c

08002abc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002ac0:	4802      	ldr	r0, [pc, #8]	; (8002acc <SDMMC1_IRQHandler+0x10>)
 8002ac2:	f004 fde3 	bl	800768c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000694 	.word	0x20000694

08002ad0 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002ad4:	4802      	ldr	r0, [pc, #8]	; (8002ae0 <DMA2_Channel6_IRQHandler+0x10>)
 8002ad6:	f000 fc1c 	bl	8003312 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	200005e0 	.word	0x200005e0

08002ae4 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002ae8:	4802      	ldr	r0, [pc, #8]	; (8002af4 <DMA2_Channel7_IRQHandler+0x10>)
 8002aea:	f000 fc12 	bl	8003312 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000628 	.word	0x20000628

08002af8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
	return 1;
 8002afc:	2301      	movs	r3, #1
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <_kill>:

int _kill(int pid, int sig)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b12:	f009 fec5 	bl	800c8a0 <__errno>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2216      	movs	r2, #22
 8002b1a:	601a      	str	r2, [r3, #0]
	return -1;
 8002b1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <_exit>:

void _exit (int status)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7ff ffe7 	bl	8002b08 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b3a:	e7fe      	b.n	8002b3a <_exit+0x12>

08002b3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	e00a      	b.n	8002b64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b4e:	f3af 8000 	nop.w
 8002b52:	4601      	mov	r1, r0
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	60ba      	str	r2, [r7, #8]
 8002b5a:	b2ca      	uxtb	r2, r1
 8002b5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	3301      	adds	r3, #1
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	dbf0      	blt.n	8002b4e <_read+0x12>
	}

return len;
 8002b6c:	687b      	ldr	r3, [r7, #4]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b086      	sub	sp, #24
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	60f8      	str	r0, [r7, #12]
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	e009      	b.n	8002b9c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	1c5a      	adds	r2, r3, #1
 8002b8c:	60ba      	str	r2, [r7, #8]
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	dbf1      	blt.n	8002b88 <_write+0x12>
	}
	return len;
 8002ba4:	687b      	ldr	r3, [r7, #4]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <_close>:

int _close(int file)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
	return -1;
 8002bb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bd6:	605a      	str	r2, [r3, #4]
	return 0;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <_isatty>:

int _isatty(int file)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
	return 1;
 8002bee:	2301      	movs	r3, #1
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
	return 0;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
	...

08002c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c20:	4a14      	ldr	r2, [pc, #80]	; (8002c74 <_sbrk+0x5c>)
 8002c22:	4b15      	ldr	r3, [pc, #84]	; (8002c78 <_sbrk+0x60>)
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c2c:	4b13      	ldr	r3, [pc, #76]	; (8002c7c <_sbrk+0x64>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d102      	bne.n	8002c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c34:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <_sbrk+0x64>)
 8002c36:	4a12      	ldr	r2, [pc, #72]	; (8002c80 <_sbrk+0x68>)
 8002c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c3a:	4b10      	ldr	r3, [pc, #64]	; (8002c7c <_sbrk+0x64>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4413      	add	r3, r2
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d207      	bcs.n	8002c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c48:	f009 fe2a 	bl	800c8a0 <__errno>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	220c      	movs	r2, #12
 8002c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c56:	e009      	b.n	8002c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c58:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <_sbrk+0x64>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c5e:	4b07      	ldr	r3, [pc, #28]	; (8002c7c <_sbrk+0x64>)
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4413      	add	r3, r2
 8002c66:	4a05      	ldr	r2, [pc, #20]	; (8002c7c <_sbrk+0x64>)
 8002c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	20018000 	.word	0x20018000
 8002c78:	00004000 	.word	0x00004000
 8002c7c:	20000a38 	.word	0x20000a38
 8002c80:	20000ef0 	.word	0x20000ef0

08002c84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <SystemInit+0x20>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8e:	4a05      	ldr	r2, [pc, #20]	; (8002ca4 <SystemInit+0x20>)
 8002c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002ca8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ce0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002cac:	f7ff ffea 	bl	8002c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cb0:	480c      	ldr	r0, [pc, #48]	; (8002ce4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cb2:	490d      	ldr	r1, [pc, #52]	; (8002ce8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cb4:	4a0d      	ldr	r2, [pc, #52]	; (8002cec <LoopForever+0xe>)
  movs r3, #0
 8002cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cb8:	e002      	b.n	8002cc0 <LoopCopyDataInit>

08002cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cbe:	3304      	adds	r3, #4

08002cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cc4:	d3f9      	bcc.n	8002cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cc6:	4a0a      	ldr	r2, [pc, #40]	; (8002cf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cc8:	4c0a      	ldr	r4, [pc, #40]	; (8002cf4 <LoopForever+0x16>)
  movs r3, #0
 8002cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ccc:	e001      	b.n	8002cd2 <LoopFillZerobss>

08002cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cd0:	3204      	adds	r2, #4

08002cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cd4:	d3fb      	bcc.n	8002cce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cd6:	f009 fde9 	bl	800c8ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cda:	f7ff f841 	bl	8001d60 <main>

08002cde <LoopForever>:

LoopForever:
    b LoopForever
 8002cde:	e7fe      	b.n	8002cde <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002ce0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ce8:	200002e8 	.word	0x200002e8
  ldr r2, =_sidata
 8002cec:	080101bc 	.word	0x080101bc
  ldr r2, =_sbss
 8002cf0:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 8002cf4:	20000eec 	.word	0x20000eec

08002cf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cf8:	e7fe      	b.n	8002cf8 <ADC1_2_IRQHandler>
	...

08002cfc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d06:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <HAL_Init+0x3c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a0b      	ldr	r2, [pc, #44]	; (8002d38 <HAL_Init+0x3c>)
 8002d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d10:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d12:	2003      	movs	r0, #3
 8002d14:	f000 f962 	bl	8002fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d18:	2000      	movs	r0, #0
 8002d1a:	f000 f80f 	bl	8002d3c <HAL_InitTick>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	71fb      	strb	r3, [r7, #7]
 8002d28:	e001      	b.n	8002d2e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d2a:	f7ff fb93 	bl	8002454 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40022000 	.word	0x40022000

08002d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002d48:	4b17      	ldr	r3, [pc, #92]	; (8002da8 <HAL_InitTick+0x6c>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d023      	beq.n	8002d98 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002d50:	4b16      	ldr	r3, [pc, #88]	; (8002dac <HAL_InitTick+0x70>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	4b14      	ldr	r3, [pc, #80]	; (8002da8 <HAL_InitTick+0x6c>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 f96d 	bl	8003046 <HAL_SYSTICK_Config>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10f      	bne.n	8002d92 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b0f      	cmp	r3, #15
 8002d76:	d809      	bhi.n	8002d8c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d80:	f000 f937 	bl	8002ff2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d84:	4a0a      	ldr	r2, [pc, #40]	; (8002db0 <HAL_InitTick+0x74>)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	e007      	b.n	8002d9c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	73fb      	strb	r3, [r7, #15]
 8002d90:	e004      	b.n	8002d9c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	73fb      	strb	r3, [r7, #15]
 8002d96:	e001      	b.n	8002d9c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000114 	.word	0x20000114
 8002dac:	2000010c 	.word	0x2000010c
 8002db0:	20000110 	.word	0x20000110

08002db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002db8:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <HAL_IncTick+0x20>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <HAL_IncTick+0x24>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <HAL_IncTick+0x24>)
 8002dc6:	6013      	str	r3, [r2, #0]
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	20000114 	.word	0x20000114
 8002dd8:	20000a3c 	.word	0x20000a3c

08002ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  return uwTick;
 8002de0:	4b03      	ldr	r3, [pc, #12]	; (8002df0 <HAL_GetTick+0x14>)
 8002de2:	681b      	ldr	r3, [r3, #0]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	20000a3c 	.word	0x20000a3c

08002df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dfc:	f7ff ffee 	bl	8002ddc <HAL_GetTick>
 8002e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e0c:	d005      	beq.n	8002e1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002e0e:	4b0a      	ldr	r3, [pc, #40]	; (8002e38 <HAL_Delay+0x44>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4413      	add	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e1a:	bf00      	nop
 8002e1c:	f7ff ffde 	bl	8002ddc <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d8f7      	bhi.n	8002e1c <HAL_Delay+0x28>
  {
  }
}
 8002e2c:	bf00      	nop
 8002e2e:	bf00      	nop
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000114 	.word	0x20000114

08002e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <__NVIC_SetPriorityGrouping+0x44>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e58:	4013      	ands	r3, r2
 8002e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e6e:	4a04      	ldr	r2, [pc, #16]	; (8002e80 <__NVIC_SetPriorityGrouping+0x44>)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	60d3      	str	r3, [r2, #12]
}
 8002e74:	bf00      	nop
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e88:	4b04      	ldr	r3, [pc, #16]	; (8002e9c <__NVIC_GetPriorityGrouping+0x18>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	0a1b      	lsrs	r3, r3, #8
 8002e8e:	f003 0307 	and.w	r3, r3, #7
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	e000ed00 	.word	0xe000ed00

08002ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	db0b      	blt.n	8002eca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	f003 021f 	and.w	r2, r3, #31
 8002eb8:	4907      	ldr	r1, [pc, #28]	; (8002ed8 <__NVIC_EnableIRQ+0x38>)
 8002eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ebe:	095b      	lsrs	r3, r3, #5
 8002ec0:	2001      	movs	r0, #1
 8002ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	e000e100 	.word	0xe000e100

08002edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	6039      	str	r1, [r7, #0]
 8002ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	db0a      	blt.n	8002f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	490c      	ldr	r1, [pc, #48]	; (8002f28 <__NVIC_SetPriority+0x4c>)
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	0112      	lsls	r2, r2, #4
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	440b      	add	r3, r1
 8002f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f04:	e00a      	b.n	8002f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	4908      	ldr	r1, [pc, #32]	; (8002f2c <__NVIC_SetPriority+0x50>)
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	3b04      	subs	r3, #4
 8002f14:	0112      	lsls	r2, r2, #4
 8002f16:	b2d2      	uxtb	r2, r2
 8002f18:	440b      	add	r3, r1
 8002f1a:	761a      	strb	r2, [r3, #24]
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	e000e100 	.word	0xe000e100
 8002f2c:	e000ed00 	.word	0xe000ed00

08002f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b089      	sub	sp, #36	; 0x24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f1c3 0307 	rsb	r3, r3, #7
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	bf28      	it	cs
 8002f4e:	2304      	movcs	r3, #4
 8002f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	3304      	adds	r3, #4
 8002f56:	2b06      	cmp	r3, #6
 8002f58:	d902      	bls.n	8002f60 <NVIC_EncodePriority+0x30>
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	3b03      	subs	r3, #3
 8002f5e:	e000      	b.n	8002f62 <NVIC_EncodePriority+0x32>
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	43da      	mvns	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	401a      	ands	r2, r3
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f82:	43d9      	mvns	r1, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f88:	4313      	orrs	r3, r2
         );
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3724      	adds	r7, #36	; 0x24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
	...

08002f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fa8:	d301      	bcc.n	8002fae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002faa:	2301      	movs	r3, #1
 8002fac:	e00f      	b.n	8002fce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fae:	4a0a      	ldr	r2, [pc, #40]	; (8002fd8 <SysTick_Config+0x40>)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fb6:	210f      	movs	r1, #15
 8002fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fbc:	f7ff ff8e 	bl	8002edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fc0:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <SysTick_Config+0x40>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fc6:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <SysTick_Config+0x40>)
 8002fc8:	2207      	movs	r2, #7
 8002fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	e000e010 	.word	0xe000e010

08002fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7ff ff29 	bl	8002e3c <__NVIC_SetPriorityGrouping>
}
 8002fea:	bf00      	nop
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b086      	sub	sp, #24
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	607a      	str	r2, [r7, #4]
 8002ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003000:	2300      	movs	r3, #0
 8003002:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003004:	f7ff ff3e 	bl	8002e84 <__NVIC_GetPriorityGrouping>
 8003008:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	68b9      	ldr	r1, [r7, #8]
 800300e:	6978      	ldr	r0, [r7, #20]
 8003010:	f7ff ff8e 	bl	8002f30 <NVIC_EncodePriority>
 8003014:	4602      	mov	r2, r0
 8003016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800301a:	4611      	mov	r1, r2
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff ff5d 	bl	8002edc <__NVIC_SetPriority>
}
 8003022:	bf00      	nop
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b082      	sub	sp, #8
 800302e:	af00      	add	r7, sp, #0
 8003030:	4603      	mov	r3, r0
 8003032:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff ff31 	bl	8002ea0 <__NVIC_EnableIRQ>
}
 800303e:	bf00      	nop
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b082      	sub	sp, #8
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7ff ffa2 	bl	8002f98 <SysTick_Config>
 8003054:	4603      	mov	r3, r0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e098      	b.n	80031a4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	4b4d      	ldr	r3, [pc, #308]	; (80031b0 <HAL_DMA_Init+0x150>)
 800307a:	429a      	cmp	r2, r3
 800307c:	d80f      	bhi.n	800309e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	461a      	mov	r2, r3
 8003084:	4b4b      	ldr	r3, [pc, #300]	; (80031b4 <HAL_DMA_Init+0x154>)
 8003086:	4413      	add	r3, r2
 8003088:	4a4b      	ldr	r2, [pc, #300]	; (80031b8 <HAL_DMA_Init+0x158>)
 800308a:	fba2 2303 	umull	r2, r3, r2, r3
 800308e:	091b      	lsrs	r3, r3, #4
 8003090:	009a      	lsls	r2, r3, #2
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a48      	ldr	r2, [pc, #288]	; (80031bc <HAL_DMA_Init+0x15c>)
 800309a:	641a      	str	r2, [r3, #64]	; 0x40
 800309c:	e00e      	b.n	80030bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	461a      	mov	r2, r3
 80030a4:	4b46      	ldr	r3, [pc, #280]	; (80031c0 <HAL_DMA_Init+0x160>)
 80030a6:	4413      	add	r3, r2
 80030a8:	4a43      	ldr	r2, [pc, #268]	; (80031b8 <HAL_DMA_Init+0x158>)
 80030aa:	fba2 2303 	umull	r2, r3, r2, r3
 80030ae:	091b      	lsrs	r3, r3, #4
 80030b0:	009a      	lsls	r2, r3, #2
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a42      	ldr	r2, [pc, #264]	; (80031c4 <HAL_DMA_Init+0x164>)
 80030ba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2202      	movs	r2, #2
 80030c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80030d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80030e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	4313      	orrs	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003116:	d039      	beq.n	800318c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	4a27      	ldr	r2, [pc, #156]	; (80031bc <HAL_DMA_Init+0x15c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d11a      	bne.n	8003158 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003122:	4b29      	ldr	r3, [pc, #164]	; (80031c8 <HAL_DMA_Init+0x168>)
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312a:	f003 031c 	and.w	r3, r3, #28
 800312e:	210f      	movs	r1, #15
 8003130:	fa01 f303 	lsl.w	r3, r1, r3
 8003134:	43db      	mvns	r3, r3
 8003136:	4924      	ldr	r1, [pc, #144]	; (80031c8 <HAL_DMA_Init+0x168>)
 8003138:	4013      	ands	r3, r2
 800313a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800313c:	4b22      	ldr	r3, [pc, #136]	; (80031c8 <HAL_DMA_Init+0x168>)
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6859      	ldr	r1, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003148:	f003 031c 	and.w	r3, r3, #28
 800314c:	fa01 f303 	lsl.w	r3, r1, r3
 8003150:	491d      	ldr	r1, [pc, #116]	; (80031c8 <HAL_DMA_Init+0x168>)
 8003152:	4313      	orrs	r3, r2
 8003154:	600b      	str	r3, [r1, #0]
 8003156:	e019      	b.n	800318c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003158:	4b1c      	ldr	r3, [pc, #112]	; (80031cc <HAL_DMA_Init+0x16c>)
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003160:	f003 031c 	and.w	r3, r3, #28
 8003164:	210f      	movs	r1, #15
 8003166:	fa01 f303 	lsl.w	r3, r1, r3
 800316a:	43db      	mvns	r3, r3
 800316c:	4917      	ldr	r1, [pc, #92]	; (80031cc <HAL_DMA_Init+0x16c>)
 800316e:	4013      	ands	r3, r2
 8003170:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003172:	4b16      	ldr	r3, [pc, #88]	; (80031cc <HAL_DMA_Init+0x16c>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6859      	ldr	r1, [r3, #4]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317e:	f003 031c 	and.w	r3, r3, #28
 8003182:	fa01 f303 	lsl.w	r3, r1, r3
 8003186:	4911      	ldr	r1, [pc, #68]	; (80031cc <HAL_DMA_Init+0x16c>)
 8003188:	4313      	orrs	r3, r2
 800318a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	40020407 	.word	0x40020407
 80031b4:	bffdfff8 	.word	0xbffdfff8
 80031b8:	cccccccd 	.word	0xcccccccd
 80031bc:	40020000 	.word	0x40020000
 80031c0:	bffdfbf8 	.word	0xbffdfbf8
 80031c4:	40020400 	.word	0x40020400
 80031c8:	400200a8 	.word	0x400200a8
 80031cc:	400204a8 	.word	0x400204a8

080031d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
 80031dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_DMA_Start_IT+0x20>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e04b      	b.n	8003288 <HAL_DMA_Start_IT+0xb8>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b01      	cmp	r3, #1
 8003202:	d13a      	bne.n	800327a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0201 	bic.w	r2, r2, #1
 8003220:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	68b9      	ldr	r1, [r7, #8]
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 f921 	bl	8003470 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	2b00      	cmp	r3, #0
 8003234:	d008      	beq.n	8003248 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f042 020e 	orr.w	r2, r2, #14
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	e00f      	b.n	8003268 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0204 	bic.w	r2, r2, #4
 8003256:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 020a 	orr.w	r2, r2, #10
 8003266:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0201 	orr.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	e005      	b.n	8003286 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003282:	2302      	movs	r3, #2
 8003284:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003286:	7dfb      	ldrb	r3, [r7, #23]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d005      	beq.n	80032b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2204      	movs	r2, #4
 80032ac:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	73fb      	strb	r3, [r7, #15]
 80032b2:	e029      	b.n	8003308 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 020e 	bic.w	r2, r2, #14
 80032c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0201 	bic.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d8:	f003 021c 	and.w	r2, r3, #28
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	2101      	movs	r1, #1
 80032e2:	fa01 f202 	lsl.w	r2, r1, r2
 80032e6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	4798      	blx	r3
    }
  }
  return status;
 8003308:	7bfb      	ldrb	r3, [r7, #15]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332e:	f003 031c 	and.w	r3, r3, #28
 8003332:	2204      	movs	r2, #4
 8003334:	409a      	lsls	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4013      	ands	r3, r2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d026      	beq.n	800338c <HAL_DMA_IRQHandler+0x7a>
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d021      	beq.n	800338c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	d107      	bne.n	8003366 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0204 	bic.w	r2, r2, #4
 8003364:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	f003 021c 	and.w	r2, r3, #28
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	2104      	movs	r1, #4
 8003374:	fa01 f202 	lsl.w	r2, r1, r2
 8003378:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	2b00      	cmp	r3, #0
 8003380:	d071      	beq.n	8003466 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800338a:	e06c      	b.n	8003466 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003390:	f003 031c 	and.w	r3, r3, #28
 8003394:	2202      	movs	r2, #2
 8003396:	409a      	lsls	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4013      	ands	r3, r2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d02e      	beq.n	80033fe <HAL_DMA_IRQHandler+0xec>
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d029      	beq.n	80033fe <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0320 	and.w	r3, r3, #32
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10b      	bne.n	80033d0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 020a 	bic.w	r2, r2, #10
 80033c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d4:	f003 021c 	and.w	r2, r3, #28
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	2102      	movs	r1, #2
 80033de:	fa01 f202 	lsl.w	r2, r1, r2
 80033e2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d038      	beq.n	8003466 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80033fc:	e033      	b.n	8003466 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003402:	f003 031c 	and.w	r3, r3, #28
 8003406:	2208      	movs	r2, #8
 8003408:	409a      	lsls	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4013      	ands	r3, r2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d02a      	beq.n	8003468 <HAL_DMA_IRQHandler+0x156>
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b00      	cmp	r3, #0
 800341a:	d025      	beq.n	8003468 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 020e 	bic.w	r2, r2, #14
 800342a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003430:	f003 021c 	and.w	r2, r3, #28
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	2101      	movs	r1, #1
 800343a:	fa01 f202 	lsl.w	r2, r1, r2
 800343e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345a:	2b00      	cmp	r3, #0
 800345c:	d004      	beq.n	8003468 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003466:	bf00      	nop
 8003468:	bf00      	nop
}
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
 800347c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003482:	f003 021c 	and.w	r2, r3, #28
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	2101      	movs	r1, #1
 800348c:	fa01 f202 	lsl.w	r2, r1, r2
 8003490:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2b10      	cmp	r3, #16
 80034a0:	d108      	bne.n	80034b4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034b2:	e007      	b.n	80034c4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	60da      	str	r2, [r3, #12]
}
 80034c4:	bf00      	nop
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b087      	sub	sp, #28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034da:	2300      	movs	r3, #0
 80034dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034de:	e17f      	b.n	80037e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	2101      	movs	r1, #1
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	fa01 f303 	lsl.w	r3, r1, r3
 80034ec:	4013      	ands	r3, r2
 80034ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 8171 	beq.w	80037da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 0303 	and.w	r3, r3, #3
 8003500:	2b01      	cmp	r3, #1
 8003502:	d005      	beq.n	8003510 <HAL_GPIO_Init+0x40>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 0303 	and.w	r3, r3, #3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d130      	bne.n	8003572 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	2203      	movs	r2, #3
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	43db      	mvns	r3, r3
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4013      	ands	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	68da      	ldr	r2, [r3, #12]
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	4313      	orrs	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003546:	2201      	movs	r2, #1
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43db      	mvns	r3, r3
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	4013      	ands	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	091b      	lsrs	r3, r3, #4
 800355c:	f003 0201 	and.w	r2, r3, #1
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4313      	orrs	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	2b03      	cmp	r3, #3
 800357c:	d118      	bne.n	80035b0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003582:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003584:	2201      	movs	r2, #1
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	4013      	ands	r3, r2
 8003592:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	08db      	lsrs	r3, r3, #3
 800359a:	f003 0201 	and.w	r2, r3, #1
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f003 0303 	and.w	r3, r3, #3
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d017      	beq.n	80035ec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	2203      	movs	r2, #3
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	43db      	mvns	r3, r3
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4013      	ands	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 0303 	and.w	r3, r3, #3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d123      	bne.n	8003640 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	08da      	lsrs	r2, r3, #3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3208      	adds	r2, #8
 8003600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003604:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	220f      	movs	r2, #15
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	43db      	mvns	r3, r3
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4013      	ands	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	08da      	lsrs	r2, r3, #3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3208      	adds	r2, #8
 800363a:	6939      	ldr	r1, [r7, #16]
 800363c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	2203      	movs	r2, #3
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	43db      	mvns	r3, r3
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4013      	ands	r3, r2
 8003656:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f003 0203 	and.w	r2, r3, #3
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 80ac 	beq.w	80037da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003682:	4b5f      	ldr	r3, [pc, #380]	; (8003800 <HAL_GPIO_Init+0x330>)
 8003684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003686:	4a5e      	ldr	r2, [pc, #376]	; (8003800 <HAL_GPIO_Init+0x330>)
 8003688:	f043 0301 	orr.w	r3, r3, #1
 800368c:	6613      	str	r3, [r2, #96]	; 0x60
 800368e:	4b5c      	ldr	r3, [pc, #368]	; (8003800 <HAL_GPIO_Init+0x330>)
 8003690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	60bb      	str	r3, [r7, #8]
 8003698:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800369a:	4a5a      	ldr	r2, [pc, #360]	; (8003804 <HAL_GPIO_Init+0x334>)
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	089b      	lsrs	r3, r3, #2
 80036a0:	3302      	adds	r3, #2
 80036a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	220f      	movs	r2, #15
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	43db      	mvns	r3, r3
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4013      	ands	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036c4:	d025      	beq.n	8003712 <HAL_GPIO_Init+0x242>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a4f      	ldr	r2, [pc, #316]	; (8003808 <HAL_GPIO_Init+0x338>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d01f      	beq.n	800370e <HAL_GPIO_Init+0x23e>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a4e      	ldr	r2, [pc, #312]	; (800380c <HAL_GPIO_Init+0x33c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d019      	beq.n	800370a <HAL_GPIO_Init+0x23a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a4d      	ldr	r2, [pc, #308]	; (8003810 <HAL_GPIO_Init+0x340>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d013      	beq.n	8003706 <HAL_GPIO_Init+0x236>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a4c      	ldr	r2, [pc, #304]	; (8003814 <HAL_GPIO_Init+0x344>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00d      	beq.n	8003702 <HAL_GPIO_Init+0x232>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a4b      	ldr	r2, [pc, #300]	; (8003818 <HAL_GPIO_Init+0x348>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d007      	beq.n	80036fe <HAL_GPIO_Init+0x22e>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a4a      	ldr	r2, [pc, #296]	; (800381c <HAL_GPIO_Init+0x34c>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d101      	bne.n	80036fa <HAL_GPIO_Init+0x22a>
 80036f6:	2306      	movs	r3, #6
 80036f8:	e00c      	b.n	8003714 <HAL_GPIO_Init+0x244>
 80036fa:	2307      	movs	r3, #7
 80036fc:	e00a      	b.n	8003714 <HAL_GPIO_Init+0x244>
 80036fe:	2305      	movs	r3, #5
 8003700:	e008      	b.n	8003714 <HAL_GPIO_Init+0x244>
 8003702:	2304      	movs	r3, #4
 8003704:	e006      	b.n	8003714 <HAL_GPIO_Init+0x244>
 8003706:	2303      	movs	r3, #3
 8003708:	e004      	b.n	8003714 <HAL_GPIO_Init+0x244>
 800370a:	2302      	movs	r3, #2
 800370c:	e002      	b.n	8003714 <HAL_GPIO_Init+0x244>
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <HAL_GPIO_Init+0x244>
 8003712:	2300      	movs	r3, #0
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	f002 0203 	and.w	r2, r2, #3
 800371a:	0092      	lsls	r2, r2, #2
 800371c:	4093      	lsls	r3, r2
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003724:	4937      	ldr	r1, [pc, #220]	; (8003804 <HAL_GPIO_Init+0x334>)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	089b      	lsrs	r3, r3, #2
 800372a:	3302      	adds	r3, #2
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003732:	4b3b      	ldr	r3, [pc, #236]	; (8003820 <HAL_GPIO_Init+0x350>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	43db      	mvns	r3, r3
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	4013      	ands	r3, r2
 8003740:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4313      	orrs	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003756:	4a32      	ldr	r2, [pc, #200]	; (8003820 <HAL_GPIO_Init+0x350>)
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800375c:	4b30      	ldr	r3, [pc, #192]	; (8003820 <HAL_GPIO_Init+0x350>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	43db      	mvns	r3, r3
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4013      	ands	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003780:	4a27      	ldr	r2, [pc, #156]	; (8003820 <HAL_GPIO_Init+0x350>)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003786:	4b26      	ldr	r3, [pc, #152]	; (8003820 <HAL_GPIO_Init+0x350>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	43db      	mvns	r3, r3
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4013      	ands	r3, r2
 8003794:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037aa:	4a1d      	ldr	r2, [pc, #116]	; (8003820 <HAL_GPIO_Init+0x350>)
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80037b0:	4b1b      	ldr	r3, [pc, #108]	; (8003820 <HAL_GPIO_Init+0x350>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	43db      	mvns	r3, r3
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4013      	ands	r3, r2
 80037be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037d4:	4a12      	ldr	r2, [pc, #72]	; (8003820 <HAL_GPIO_Init+0x350>)
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	3301      	adds	r3, #1
 80037de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f47f ae78 	bne.w	80034e0 <HAL_GPIO_Init+0x10>
  }
}
 80037f0:	bf00      	nop
 80037f2:	bf00      	nop
 80037f4:	371c      	adds	r7, #28
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40021000 	.word	0x40021000
 8003804:	40010000 	.word	0x40010000
 8003808:	48000400 	.word	0x48000400
 800380c:	48000800 	.word	0x48000800
 8003810:	48000c00 	.word	0x48000c00
 8003814:	48001000 	.word	0x48001000
 8003818:	48001400 	.word	0x48001400
 800381c:	48001800 	.word	0x48001800
 8003820:	40010400 	.word	0x40010400

08003824 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	460b      	mov	r3, r1
 800382e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691a      	ldr	r2, [r3, #16]
 8003834:	887b      	ldrh	r3, [r7, #2]
 8003836:	4013      	ands	r3, r2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d002      	beq.n	8003842 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800383c:	2301      	movs	r3, #1
 800383e:	73fb      	strb	r3, [r7, #15]
 8003840:	e001      	b.n	8003846 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003842:	2300      	movs	r3, #0
 8003844:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003846:	7bfb      	ldrb	r3, [r7, #15]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	460b      	mov	r3, r1
 800385e:	807b      	strh	r3, [r7, #2]
 8003860:	4613      	mov	r3, r2
 8003862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003864:	787b      	ldrb	r3, [r7, #1]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800386a:	887a      	ldrh	r2, [r7, #2]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003870:	e002      	b.n	8003878 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003872:	887a      	ldrh	r2, [r7, #2]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e081      	b.n	800399a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d106      	bne.n	80038b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7fe fdf6 	bl	800249c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2224      	movs	r2, #36	; 0x24
 80038b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0201 	bic.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d107      	bne.n	80038fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689a      	ldr	r2, [r3, #8]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038fa:	609a      	str	r2, [r3, #8]
 80038fc:	e006      	b.n	800390c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800390a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	2b02      	cmp	r3, #2
 8003912:	d104      	bne.n	800391e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800391c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6812      	ldr	r2, [r2, #0]
 8003928:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800392c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003930:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003940:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691a      	ldr	r2, [r3, #16]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	69d9      	ldr	r1, [r3, #28]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1a      	ldr	r2, [r3, #32]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0201 	orr.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	607a      	str	r2, [r7, #4]
 80039ae:	461a      	mov	r2, r3
 80039b0:	460b      	mov	r3, r1
 80039b2:	817b      	strh	r3, [r7, #10]
 80039b4:	4613      	mov	r3, r2
 80039b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b20      	cmp	r3, #32
 80039c2:	f040 80da 	bne.w	8003b7a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_I2C_Master_Transmit+0x30>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e0d3      	b.n	8003b7c <HAL_I2C_Master_Transmit+0x1d8>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039dc:	f7ff f9fe 	bl	8002ddc <HAL_GetTick>
 80039e0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	2319      	movs	r3, #25
 80039e8:	2201      	movs	r2, #1
 80039ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 fa00 	bl	8003df4 <I2C_WaitOnFlagUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e0be      	b.n	8003b7c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2221      	movs	r2, #33	; 0x21
 8003a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2210      	movs	r2, #16
 8003a0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	893a      	ldrh	r2, [r7, #8]
 8003a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	2bff      	cmp	r3, #255	; 0xff
 8003a2e:	d90e      	bls.n	8003a4e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	22ff      	movs	r2, #255	; 0xff
 8003a34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	8979      	ldrh	r1, [r7, #10]
 8003a3e:	4b51      	ldr	r3, [pc, #324]	; (8003b84 <HAL_I2C_Master_Transmit+0x1e0>)
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 fbf6 	bl	8004238 <I2C_TransferConfig>
 8003a4c:	e06c      	b.n	8003b28 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	8979      	ldrh	r1, [r7, #10]
 8003a60:	4b48      	ldr	r3, [pc, #288]	; (8003b84 <HAL_I2C_Master_Transmit+0x1e0>)
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 fbe5 	bl	8004238 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003a6e:	e05b      	b.n	8003b28 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	6a39      	ldr	r1, [r7, #32]
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 f9fd 	bl	8003e74 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e07b      	b.n	8003b7c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	781a      	ldrb	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	1c5a      	adds	r2, r3, #1
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d034      	beq.n	8003b28 <HAL_I2C_Master_Transmit+0x184>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d130      	bne.n	8003b28 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	2200      	movs	r2, #0
 8003ace:	2180      	movs	r1, #128	; 0x80
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 f98f 	bl	8003df4 <I2C_WaitOnFlagUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e04d      	b.n	8003b7c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	2bff      	cmp	r3, #255	; 0xff
 8003ae8:	d90e      	bls.n	8003b08 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	22ff      	movs	r2, #255	; 0xff
 8003aee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	8979      	ldrh	r1, [r7, #10]
 8003af8:	2300      	movs	r3, #0
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 fb99 	bl	8004238 <I2C_TransferConfig>
 8003b06:	e00f      	b.n	8003b28 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	8979      	ldrh	r1, [r7, #10]
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 fb88 	bl	8004238 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d19e      	bne.n	8003a70 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	6a39      	ldr	r1, [r7, #32]
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f000 f9dc 	bl	8003ef4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e01a      	b.n	8003b7c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6859      	ldr	r1, [r3, #4]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <HAL_I2C_Master_Transmit+0x1e4>)
 8003b5a:	400b      	ands	r3, r1
 8003b5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b76:	2300      	movs	r3, #0
 8003b78:	e000      	b.n	8003b7c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003b7a:	2302      	movs	r3, #2
  }
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	80002000 	.word	0x80002000
 8003b88:	fe00e800 	.word	0xfe00e800

08003b8c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b088      	sub	sp, #32
 8003b90:	af02      	add	r7, sp, #8
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	607a      	str	r2, [r7, #4]
 8003b96:	461a      	mov	r2, r3
 8003b98:	460b      	mov	r3, r1
 8003b9a:	817b      	strh	r3, [r7, #10]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b20      	cmp	r3, #32
 8003baa:	f040 80db 	bne.w	8003d64 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_I2C_Master_Receive+0x30>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e0d4      	b.n	8003d66 <HAL_I2C_Master_Receive+0x1da>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bc4:	f7ff f90a 	bl	8002ddc <HAL_GetTick>
 8003bc8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	2319      	movs	r3, #25
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 f90c 	bl	8003df4 <I2C_WaitOnFlagUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e0bf      	b.n	8003d66 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2222      	movs	r2, #34	; 0x22
 8003bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2210      	movs	r2, #16
 8003bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	893a      	ldrh	r2, [r7, #8]
 8003c06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2bff      	cmp	r3, #255	; 0xff
 8003c16:	d90e      	bls.n	8003c36 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	22ff      	movs	r2, #255	; 0xff
 8003c1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	8979      	ldrh	r1, [r7, #10]
 8003c26:	4b52      	ldr	r3, [pc, #328]	; (8003d70 <HAL_I2C_Master_Receive+0x1e4>)
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 fb02 	bl	8004238 <I2C_TransferConfig>
 8003c34:	e06d      	b.n	8003d12 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	8979      	ldrh	r1, [r7, #10]
 8003c48:	4b49      	ldr	r3, [pc, #292]	; (8003d70 <HAL_I2C_Master_Receive+0x1e4>)
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 faf1 	bl	8004238 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003c56:	e05c      	b.n	8003d12 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	6a39      	ldr	r1, [r7, #32]
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 f985 	bl	8003f6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e07c      	b.n	8003d66 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d034      	beq.n	8003d12 <HAL_I2C_Master_Receive+0x186>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d130      	bne.n	8003d12 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	2180      	movs	r1, #128	; 0x80
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f000 f89a 	bl	8003df4 <I2C_WaitOnFlagUntilTimeout>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e04d      	b.n	8003d66 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2bff      	cmp	r3, #255	; 0xff
 8003cd2:	d90e      	bls.n	8003cf2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	22ff      	movs	r2, #255	; 0xff
 8003cd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	8979      	ldrh	r1, [r7, #10]
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 faa4 	bl	8004238 <I2C_TransferConfig>
 8003cf0:	e00f      	b.n	8003d12 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	8979      	ldrh	r1, [r7, #10]
 8003d04:	2300      	movs	r3, #0
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 fa93 	bl	8004238 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d19d      	bne.n	8003c58 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	6a39      	ldr	r1, [r7, #32]
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f8e7 	bl	8003ef4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e01a      	b.n	8003d66 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2220      	movs	r2, #32
 8003d36:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6859      	ldr	r1, [r3, #4]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	4b0c      	ldr	r3, [pc, #48]	; (8003d74 <HAL_I2C_Master_Receive+0x1e8>)
 8003d44:	400b      	ands	r3, r1
 8003d46:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	e000      	b.n	8003d66 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003d64:	2302      	movs	r3, #2
  }
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	80002400 	.word	0x80002400
 8003d74:	fe00e800 	.word	0xfe00e800

08003d78 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d86:	b2db      	uxtb	r3, r3
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d103      	bne.n	8003dca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d007      	beq.n	8003de8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699a      	ldr	r2, [r3, #24]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0201 	orr.w	r2, r2, #1
 8003de6:	619a      	str	r2, [r3, #24]
  }
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	603b      	str	r3, [r7, #0]
 8003e00:	4613      	mov	r3, r2
 8003e02:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e04:	e022      	b.n	8003e4c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e0c:	d01e      	beq.n	8003e4c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e0e:	f7fe ffe5 	bl	8002ddc <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d302      	bcc.n	8003e24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d113      	bne.n	8003e4c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e28:	f043 0220 	orr.w	r2, r3, #32
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2220      	movs	r2, #32
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e00f      	b.n	8003e6c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	699a      	ldr	r2, [r3, #24]
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	4013      	ands	r3, r2
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	bf0c      	ite	eq
 8003e5c:	2301      	moveq	r3, #1
 8003e5e:	2300      	movne	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	461a      	mov	r2, r3
 8003e64:	79fb      	ldrb	r3, [r7, #7]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d0cd      	beq.n	8003e06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e80:	e02c      	b.n	8003edc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	68b9      	ldr	r1, [r7, #8]
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f000 f8ea 	bl	8004060 <I2C_IsErrorOccurred>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e02a      	b.n	8003eec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e9c:	d01e      	beq.n	8003edc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e9e:	f7fe ff9d 	bl	8002ddc <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d302      	bcc.n	8003eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d113      	bne.n	8003edc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb8:	f043 0220 	orr.w	r2, r3, #32
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e007      	b.n	8003eec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d1cb      	bne.n	8003e82 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f00:	e028      	b.n	8003f54 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	68b9      	ldr	r1, [r7, #8]
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 f8aa 	bl	8004060 <I2C_IsErrorOccurred>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e026      	b.n	8003f64 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f16:	f7fe ff61 	bl	8002ddc <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d302      	bcc.n	8003f2c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d113      	bne.n	8003f54 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f30:	f043 0220 	orr.w	r2, r3, #32
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e007      	b.n	8003f64 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b20      	cmp	r3, #32
 8003f60:	d1cf      	bne.n	8003f02 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f78:	e064      	b.n	8004044 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	68b9      	ldr	r1, [r7, #8]
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 f86e 	bl	8004060 <I2C_IsErrorOccurred>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e062      	b.n	8004054 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	f003 0320 	and.w	r3, r3, #32
 8003f98:	2b20      	cmp	r3, #32
 8003f9a:	d138      	bne.n	800400e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d105      	bne.n	8003fb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	e04e      	b.n	8004054 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	f003 0310 	and.w	r3, r3, #16
 8003fc0:	2b10      	cmp	r3, #16
 8003fc2:	d107      	bne.n	8003fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2210      	movs	r2, #16
 8003fca:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2204      	movs	r2, #4
 8003fd0:	645a      	str	r2, [r3, #68]	; 0x44
 8003fd2:	e002      	b.n	8003fda <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6859      	ldr	r1, [r3, #4]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	4b1b      	ldr	r3, [pc, #108]	; (800405c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003fee:	400b      	ands	r3, r1
 8003ff0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e022      	b.n	8004054 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400e:	f7fe fee5 	bl	8002ddc <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	429a      	cmp	r2, r3
 800401c:	d302      	bcc.n	8004024 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10f      	bne.n	8004044 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004028:	f043 0220 	orr.w	r2, r3, #32
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2220      	movs	r2, #32
 8004034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e007      	b.n	8004054 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	f003 0304 	and.w	r3, r3, #4
 800404e:	2b04      	cmp	r3, #4
 8004050:	d193      	bne.n	8003f7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	fe00e800 	.word	0xfe00e800

08004060 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08a      	sub	sp, #40	; 0x28
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800407a:	2300      	movs	r3, #0
 800407c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	f003 0310 	and.w	r3, r3, #16
 8004088:	2b00      	cmp	r3, #0
 800408a:	d075      	beq.n	8004178 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2210      	movs	r2, #16
 8004092:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004094:	e056      	b.n	8004144 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800409c:	d052      	beq.n	8004144 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800409e:	f7fe fe9d 	bl	8002ddc <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d302      	bcc.n	80040b4 <I2C_IsErrorOccurred+0x54>
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d147      	bne.n	8004144 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040d6:	d12e      	bne.n	8004136 <I2C_IsErrorOccurred+0xd6>
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040de:	d02a      	beq.n	8004136 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80040e0:	7cfb      	ldrb	r3, [r7, #19]
 80040e2:	2b20      	cmp	r3, #32
 80040e4:	d027      	beq.n	8004136 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80040f6:	f7fe fe71 	bl	8002ddc <HAL_GetTick>
 80040fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040fc:	e01b      	b.n	8004136 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80040fe:	f7fe fe6d 	bl	8002ddc <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b19      	cmp	r3, #25
 800410a:	d914      	bls.n	8004136 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004110:	f043 0220 	orr.w	r2, r3, #32
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	f003 0320 	and.w	r3, r3, #32
 8004140:	2b20      	cmp	r3, #32
 8004142:	d1dc      	bne.n	80040fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	2b20      	cmp	r3, #32
 8004150:	d003      	beq.n	800415a <I2C_IsErrorOccurred+0xfa>
 8004152:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004156:	2b00      	cmp	r3, #0
 8004158:	d09d      	beq.n	8004096 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800415a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800415e:	2b00      	cmp	r3, #0
 8004160:	d103      	bne.n	800416a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2220      	movs	r2, #32
 8004168:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	f043 0304 	orr.w	r3, r3, #4
 8004170:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00b      	beq.n	80041a2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	f043 0301 	orr.w	r3, r3, #1
 8004190:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f44f 7280 	mov.w	r2, #256	; 0x100
 800419a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00b      	beq.n	80041c4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	f043 0308 	orr.w	r3, r3, #8
 80041b2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00b      	beq.n	80041e6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80041ce:	6a3b      	ldr	r3, [r7, #32]
 80041d0:	f043 0302 	orr.w	r3, r3, #2
 80041d4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80041e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d01c      	beq.n	8004228 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f7ff fddc 	bl	8003dac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6859      	ldr	r1, [r3, #4]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	4b0d      	ldr	r3, [pc, #52]	; (8004234 <I2C_IsErrorOccurred+0x1d4>)
 8004200:	400b      	ands	r3, r1
 8004202:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	431a      	orrs	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2220      	movs	r2, #32
 8004214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004228:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800422c:	4618      	mov	r0, r3
 800422e:	3728      	adds	r7, #40	; 0x28
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	fe00e800 	.word	0xfe00e800

08004238 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	607b      	str	r3, [r7, #4]
 8004242:	460b      	mov	r3, r1
 8004244:	817b      	strh	r3, [r7, #10]
 8004246:	4613      	mov	r3, r2
 8004248:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800424a:	897b      	ldrh	r3, [r7, #10]
 800424c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004250:	7a7b      	ldrb	r3, [r7, #9]
 8004252:	041b      	lsls	r3, r3, #16
 8004254:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004258:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	4313      	orrs	r3, r2
 8004262:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004266:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	0d5b      	lsrs	r3, r3, #21
 8004272:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004276:	4b08      	ldr	r3, [pc, #32]	; (8004298 <I2C_TransferConfig+0x60>)
 8004278:	430b      	orrs	r3, r1
 800427a:	43db      	mvns	r3, r3
 800427c:	ea02 0103 	and.w	r1, r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	430a      	orrs	r2, r1
 8004288:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800428a:	bf00      	nop
 800428c:	371c      	adds	r7, #28
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	03ff63ff 	.word	0x03ff63ff

0800429c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b20      	cmp	r3, #32
 80042b0:	d138      	bne.n	8004324 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042bc:	2302      	movs	r3, #2
 80042be:	e032      	b.n	8004326 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2224      	movs	r2, #36	; 0x24
 80042cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0201 	bic.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6819      	ldr	r1, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0201 	orr.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004320:	2300      	movs	r3, #0
 8004322:	e000      	b.n	8004326 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004324:	2302      	movs	r3, #2
  }
}
 8004326:	4618      	mov	r0, r3
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004332:	b480      	push	{r7}
 8004334:	b085      	sub	sp, #20
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b20      	cmp	r3, #32
 8004346:	d139      	bne.n	80043bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800434e:	2b01      	cmp	r3, #1
 8004350:	d101      	bne.n	8004356 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004352:	2302      	movs	r3, #2
 8004354:	e033      	b.n	80043be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2224      	movs	r2, #36	; 0x24
 8004362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0201 	bic.w	r2, r2, #1
 8004374:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004384:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	021b      	lsls	r3, r3, #8
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4313      	orrs	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0201 	orr.w	r2, r2, #1
 80043a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2220      	movs	r2, #32
 80043ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	e000      	b.n	80043be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043bc:	2302      	movs	r3, #2
  }
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
	...

080043cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80043d0:	4b04      	ldr	r3, [pc, #16]	; (80043e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80043d8:	4618      	mov	r0, r3
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40007000 	.word	0x40007000

080043e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f6:	d130      	bne.n	800445a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80043f8:	4b23      	ldr	r3, [pc, #140]	; (8004488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004404:	d038      	beq.n	8004478 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004406:	4b20      	ldr	r3, [pc, #128]	; (8004488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800440e:	4a1e      	ldr	r2, [pc, #120]	; (8004488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004410:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004414:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004416:	4b1d      	ldr	r3, [pc, #116]	; (800448c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2232      	movs	r2, #50	; 0x32
 800441c:	fb02 f303 	mul.w	r3, r2, r3
 8004420:	4a1b      	ldr	r2, [pc, #108]	; (8004490 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004422:	fba2 2303 	umull	r2, r3, r2, r3
 8004426:	0c9b      	lsrs	r3, r3, #18
 8004428:	3301      	adds	r3, #1
 800442a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800442c:	e002      	b.n	8004434 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	3b01      	subs	r3, #1
 8004432:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004434:	4b14      	ldr	r3, [pc, #80]	; (8004488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800443c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004440:	d102      	bne.n	8004448 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1f2      	bne.n	800442e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004448:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004454:	d110      	bne.n	8004478 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e00f      	b.n	800447a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800445a:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004466:	d007      	beq.n	8004478 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004468:	4b07      	ldr	r3, [pc, #28]	; (8004488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004470:	4a05      	ldr	r2, [pc, #20]	; (8004488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004472:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004476:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	40007000 	.word	0x40007000
 800448c:	2000010c 	.word	0x2000010c
 8004490:	431bde83 	.word	0x431bde83

08004494 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b088      	sub	sp, #32
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e3ca      	b.n	8004c3c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044a6:	4b97      	ldr	r3, [pc, #604]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 030c 	and.w	r3, r3, #12
 80044ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044b0:	4b94      	ldr	r3, [pc, #592]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f003 0303 	and.w	r3, r3, #3
 80044b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0310 	and.w	r3, r3, #16
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 80e4 	beq.w	8004690 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d007      	beq.n	80044de <HAL_RCC_OscConfig+0x4a>
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	2b0c      	cmp	r3, #12
 80044d2:	f040 808b 	bne.w	80045ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	f040 8087 	bne.w	80045ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044de:	4b89      	ldr	r3, [pc, #548]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d005      	beq.n	80044f6 <HAL_RCC_OscConfig+0x62>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e3a2      	b.n	8004c3c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1a      	ldr	r2, [r3, #32]
 80044fa:	4b82      	ldr	r3, [pc, #520]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	2b00      	cmp	r3, #0
 8004504:	d004      	beq.n	8004510 <HAL_RCC_OscConfig+0x7c>
 8004506:	4b7f      	ldr	r3, [pc, #508]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800450e:	e005      	b.n	800451c <HAL_RCC_OscConfig+0x88>
 8004510:	4b7c      	ldr	r3, [pc, #496]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004512:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004516:	091b      	lsrs	r3, r3, #4
 8004518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800451c:	4293      	cmp	r3, r2
 800451e:	d223      	bcs.n	8004568 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	4618      	mov	r0, r3
 8004526:	f000 fd55 	bl	8004fd4 <RCC_SetFlashLatencyFromMSIRange>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e383      	b.n	8004c3c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004534:	4b73      	ldr	r3, [pc, #460]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a72      	ldr	r2, [pc, #456]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 800453a:	f043 0308 	orr.w	r3, r3, #8
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	4b70      	ldr	r3, [pc, #448]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	496d      	ldr	r1, [pc, #436]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 800454e:	4313      	orrs	r3, r2
 8004550:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004552:	4b6c      	ldr	r3, [pc, #432]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	021b      	lsls	r3, r3, #8
 8004560:	4968      	ldr	r1, [pc, #416]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004562:	4313      	orrs	r3, r2
 8004564:	604b      	str	r3, [r1, #4]
 8004566:	e025      	b.n	80045b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004568:	4b66      	ldr	r3, [pc, #408]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a65      	ldr	r2, [pc, #404]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 800456e:	f043 0308 	orr.w	r3, r3, #8
 8004572:	6013      	str	r3, [r2, #0]
 8004574:	4b63      	ldr	r3, [pc, #396]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	4960      	ldr	r1, [pc, #384]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004582:	4313      	orrs	r3, r2
 8004584:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004586:	4b5f      	ldr	r3, [pc, #380]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	021b      	lsls	r3, r3, #8
 8004594:	495b      	ldr	r1, [pc, #364]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004596:	4313      	orrs	r3, r2
 8004598:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d109      	bne.n	80045b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 fd15 	bl	8004fd4 <RCC_SetFlashLatencyFromMSIRange>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e343      	b.n	8004c3c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045b4:	f000 fc4a 	bl	8004e4c <HAL_RCC_GetSysClockFreq>
 80045b8:	4602      	mov	r2, r0
 80045ba:	4b52      	ldr	r3, [pc, #328]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	091b      	lsrs	r3, r3, #4
 80045c0:	f003 030f 	and.w	r3, r3, #15
 80045c4:	4950      	ldr	r1, [pc, #320]	; (8004708 <HAL_RCC_OscConfig+0x274>)
 80045c6:	5ccb      	ldrb	r3, [r1, r3]
 80045c8:	f003 031f 	and.w	r3, r3, #31
 80045cc:	fa22 f303 	lsr.w	r3, r2, r3
 80045d0:	4a4e      	ldr	r2, [pc, #312]	; (800470c <HAL_RCC_OscConfig+0x278>)
 80045d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045d4:	4b4e      	ldr	r3, [pc, #312]	; (8004710 <HAL_RCC_OscConfig+0x27c>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4618      	mov	r0, r3
 80045da:	f7fe fbaf 	bl	8002d3c <HAL_InitTick>
 80045de:	4603      	mov	r3, r0
 80045e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045e2:	7bfb      	ldrb	r3, [r7, #15]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d052      	beq.n	800468e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
 80045ea:	e327      	b.n	8004c3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d032      	beq.n	800465a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045f4:	4b43      	ldr	r3, [pc, #268]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a42      	ldr	r2, [pc, #264]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 80045fa:	f043 0301 	orr.w	r3, r3, #1
 80045fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004600:	f7fe fbec 	bl	8002ddc <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004608:	f7fe fbe8 	bl	8002ddc <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e310      	b.n	8004c3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800461a:	4b3a      	ldr	r3, [pc, #232]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0f0      	beq.n	8004608 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004626:	4b37      	ldr	r3, [pc, #220]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a36      	ldr	r2, [pc, #216]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 800462c:	f043 0308 	orr.w	r3, r3, #8
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	4b34      	ldr	r3, [pc, #208]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	4931      	ldr	r1, [pc, #196]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004640:	4313      	orrs	r3, r2
 8004642:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004644:	4b2f      	ldr	r3, [pc, #188]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	69db      	ldr	r3, [r3, #28]
 8004650:	021b      	lsls	r3, r3, #8
 8004652:	492c      	ldr	r1, [pc, #176]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004654:	4313      	orrs	r3, r2
 8004656:	604b      	str	r3, [r1, #4]
 8004658:	e01a      	b.n	8004690 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800465a:	4b2a      	ldr	r3, [pc, #168]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a29      	ldr	r2, [pc, #164]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004660:	f023 0301 	bic.w	r3, r3, #1
 8004664:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004666:	f7fe fbb9 	bl	8002ddc <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800466e:	f7fe fbb5 	bl	8002ddc <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e2dd      	b.n	8004c3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004680:	4b20      	ldr	r3, [pc, #128]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1f0      	bne.n	800466e <HAL_RCC_OscConfig+0x1da>
 800468c:	e000      	b.n	8004690 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800468e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	2b00      	cmp	r3, #0
 800469a:	d074      	beq.n	8004786 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	2b08      	cmp	r3, #8
 80046a0:	d005      	beq.n	80046ae <HAL_RCC_OscConfig+0x21a>
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	2b0c      	cmp	r3, #12
 80046a6:	d10e      	bne.n	80046c6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	2b03      	cmp	r3, #3
 80046ac:	d10b      	bne.n	80046c6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ae:	4b15      	ldr	r3, [pc, #84]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d064      	beq.n	8004784 <HAL_RCC_OscConfig+0x2f0>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d160      	bne.n	8004784 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e2ba      	b.n	8004c3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ce:	d106      	bne.n	80046de <HAL_RCC_OscConfig+0x24a>
 80046d0:	4b0c      	ldr	r3, [pc, #48]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a0b      	ldr	r2, [pc, #44]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 80046d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046da:	6013      	str	r3, [r2, #0]
 80046dc:	e026      	b.n	800472c <HAL_RCC_OscConfig+0x298>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046e6:	d115      	bne.n	8004714 <HAL_RCC_OscConfig+0x280>
 80046e8:	4b06      	ldr	r3, [pc, #24]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a05      	ldr	r2, [pc, #20]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 80046ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	4b03      	ldr	r3, [pc, #12]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a02      	ldr	r2, [pc, #8]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 80046fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046fe:	6013      	str	r3, [r2, #0]
 8004700:	e014      	b.n	800472c <HAL_RCC_OscConfig+0x298>
 8004702:	bf00      	nop
 8004704:	40021000 	.word	0x40021000
 8004708:	0800fcf4 	.word	0x0800fcf4
 800470c:	2000010c 	.word	0x2000010c
 8004710:	20000110 	.word	0x20000110
 8004714:	4ba0      	ldr	r3, [pc, #640]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a9f      	ldr	r2, [pc, #636]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 800471a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800471e:	6013      	str	r3, [r2, #0]
 8004720:	4b9d      	ldr	r3, [pc, #628]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a9c      	ldr	r2, [pc, #624]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 8004726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800472a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d013      	beq.n	800475c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004734:	f7fe fb52 	bl	8002ddc <HAL_GetTick>
 8004738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800473c:	f7fe fb4e 	bl	8002ddc <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b64      	cmp	r3, #100	; 0x64
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e276      	b.n	8004c3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800474e:	4b92      	ldr	r3, [pc, #584]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0f0      	beq.n	800473c <HAL_RCC_OscConfig+0x2a8>
 800475a:	e014      	b.n	8004786 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475c:	f7fe fb3e 	bl	8002ddc <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004764:	f7fe fb3a 	bl	8002ddc <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b64      	cmp	r3, #100	; 0x64
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e262      	b.n	8004c3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004776:	4b88      	ldr	r3, [pc, #544]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1f0      	bne.n	8004764 <HAL_RCC_OscConfig+0x2d0>
 8004782:	e000      	b.n	8004786 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d060      	beq.n	8004854 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	2b04      	cmp	r3, #4
 8004796:	d005      	beq.n	80047a4 <HAL_RCC_OscConfig+0x310>
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	2b0c      	cmp	r3, #12
 800479c:	d119      	bne.n	80047d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d116      	bne.n	80047d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047a4:	4b7c      	ldr	r3, [pc, #496]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d005      	beq.n	80047bc <HAL_RCC_OscConfig+0x328>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d101      	bne.n	80047bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e23f      	b.n	8004c3c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047bc:	4b76      	ldr	r3, [pc, #472]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	061b      	lsls	r3, r3, #24
 80047ca:	4973      	ldr	r1, [pc, #460]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047d0:	e040      	b.n	8004854 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d023      	beq.n	8004822 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047da:	4b6f      	ldr	r3, [pc, #444]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a6e      	ldr	r2, [pc, #440]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 80047e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e6:	f7fe faf9 	bl	8002ddc <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047ec:	e008      	b.n	8004800 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047ee:	f7fe faf5 	bl	8002ddc <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e21d      	b.n	8004c3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004800:	4b65      	ldr	r3, [pc, #404]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0f0      	beq.n	80047ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800480c:	4b62      	ldr	r3, [pc, #392]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	061b      	lsls	r3, r3, #24
 800481a:	495f      	ldr	r1, [pc, #380]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 800481c:	4313      	orrs	r3, r2
 800481e:	604b      	str	r3, [r1, #4]
 8004820:	e018      	b.n	8004854 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004822:	4b5d      	ldr	r3, [pc, #372]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a5c      	ldr	r2, [pc, #368]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 8004828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800482c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482e:	f7fe fad5 	bl	8002ddc <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004834:	e008      	b.n	8004848 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004836:	f7fe fad1 	bl	8002ddc <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e1f9      	b.n	8004c3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004848:	4b53      	ldr	r3, [pc, #332]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1f0      	bne.n	8004836 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0308 	and.w	r3, r3, #8
 800485c:	2b00      	cmp	r3, #0
 800485e:	d03c      	beq.n	80048da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d01c      	beq.n	80048a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004868:	4b4b      	ldr	r3, [pc, #300]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 800486a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800486e:	4a4a      	ldr	r2, [pc, #296]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 8004870:	f043 0301 	orr.w	r3, r3, #1
 8004874:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004878:	f7fe fab0 	bl	8002ddc <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004880:	f7fe faac 	bl	8002ddc <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e1d4      	b.n	8004c3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004892:	4b41      	ldr	r3, [pc, #260]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 8004894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0ef      	beq.n	8004880 <HAL_RCC_OscConfig+0x3ec>
 80048a0:	e01b      	b.n	80048da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048a2:	4b3d      	ldr	r3, [pc, #244]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 80048a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048a8:	4a3b      	ldr	r2, [pc, #236]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 80048aa:	f023 0301 	bic.w	r3, r3, #1
 80048ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b2:	f7fe fa93 	bl	8002ddc <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048b8:	e008      	b.n	80048cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ba:	f7fe fa8f 	bl	8002ddc <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e1b7      	b.n	8004c3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048cc:	4b32      	ldr	r3, [pc, #200]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 80048ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1ef      	bne.n	80048ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0304 	and.w	r3, r3, #4
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 80a6 	beq.w	8004a34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048e8:	2300      	movs	r3, #0
 80048ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80048ec:	4b2a      	ldr	r3, [pc, #168]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 80048ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10d      	bne.n	8004914 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048f8:	4b27      	ldr	r3, [pc, #156]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 80048fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fc:	4a26      	ldr	r2, [pc, #152]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 80048fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004902:	6593      	str	r3, [r2, #88]	; 0x58
 8004904:	4b24      	ldr	r3, [pc, #144]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 8004906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800490c:	60bb      	str	r3, [r7, #8]
 800490e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004910:	2301      	movs	r3, #1
 8004912:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004914:	4b21      	ldr	r3, [pc, #132]	; (800499c <HAL_RCC_OscConfig+0x508>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491c:	2b00      	cmp	r3, #0
 800491e:	d118      	bne.n	8004952 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004920:	4b1e      	ldr	r3, [pc, #120]	; (800499c <HAL_RCC_OscConfig+0x508>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a1d      	ldr	r2, [pc, #116]	; (800499c <HAL_RCC_OscConfig+0x508>)
 8004926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800492a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800492c:	f7fe fa56 	bl	8002ddc <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004934:	f7fe fa52 	bl	8002ddc <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e17a      	b.n	8004c3c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004946:	4b15      	ldr	r3, [pc, #84]	; (800499c <HAL_RCC_OscConfig+0x508>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0f0      	beq.n	8004934 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d108      	bne.n	800496c <HAL_RCC_OscConfig+0x4d8>
 800495a:	4b0f      	ldr	r3, [pc, #60]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 800495c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004960:	4a0d      	ldr	r2, [pc, #52]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 8004962:	f043 0301 	orr.w	r3, r3, #1
 8004966:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800496a:	e029      	b.n	80049c0 <HAL_RCC_OscConfig+0x52c>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	2b05      	cmp	r3, #5
 8004972:	d115      	bne.n	80049a0 <HAL_RCC_OscConfig+0x50c>
 8004974:	4b08      	ldr	r3, [pc, #32]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 8004976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497a:	4a07      	ldr	r2, [pc, #28]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 800497c:	f043 0304 	orr.w	r3, r3, #4
 8004980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004984:	4b04      	ldr	r3, [pc, #16]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 8004986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800498a:	4a03      	ldr	r2, [pc, #12]	; (8004998 <HAL_RCC_OscConfig+0x504>)
 800498c:	f043 0301 	orr.w	r3, r3, #1
 8004990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004994:	e014      	b.n	80049c0 <HAL_RCC_OscConfig+0x52c>
 8004996:	bf00      	nop
 8004998:	40021000 	.word	0x40021000
 800499c:	40007000 	.word	0x40007000
 80049a0:	4b9c      	ldr	r3, [pc, #624]	; (8004c14 <HAL_RCC_OscConfig+0x780>)
 80049a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a6:	4a9b      	ldr	r2, [pc, #620]	; (8004c14 <HAL_RCC_OscConfig+0x780>)
 80049a8:	f023 0301 	bic.w	r3, r3, #1
 80049ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049b0:	4b98      	ldr	r3, [pc, #608]	; (8004c14 <HAL_RCC_OscConfig+0x780>)
 80049b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b6:	4a97      	ldr	r2, [pc, #604]	; (8004c14 <HAL_RCC_OscConfig+0x780>)
 80049b8:	f023 0304 	bic.w	r3, r3, #4
 80049bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d016      	beq.n	80049f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c8:	f7fe fa08 	bl	8002ddc <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ce:	e00a      	b.n	80049e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049d0:	f7fe fa04 	bl	8002ddc <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	f241 3288 	movw	r2, #5000	; 0x1388
 80049de:	4293      	cmp	r3, r2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e12a      	b.n	8004c3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049e6:	4b8b      	ldr	r3, [pc, #556]	; (8004c14 <HAL_RCC_OscConfig+0x780>)
 80049e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0ed      	beq.n	80049d0 <HAL_RCC_OscConfig+0x53c>
 80049f4:	e015      	b.n	8004a22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f6:	f7fe f9f1 	bl	8002ddc <HAL_GetTick>
 80049fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049fc:	e00a      	b.n	8004a14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049fe:	f7fe f9ed 	bl	8002ddc <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e113      	b.n	8004c3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a14:	4b7f      	ldr	r3, [pc, #508]	; (8004c14 <HAL_RCC_OscConfig+0x780>)
 8004a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1ed      	bne.n	80049fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a22:	7ffb      	ldrb	r3, [r7, #31]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d105      	bne.n	8004a34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a28:	4b7a      	ldr	r3, [pc, #488]	; (8004c14 <HAL_RCC_OscConfig+0x780>)
 8004a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2c:	4a79      	ldr	r2, [pc, #484]	; (8004c14 <HAL_RCC_OscConfig+0x780>)
 8004a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a32:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 80fe 	beq.w	8004c3a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	f040 80d0 	bne.w	8004be8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a48:	4b72      	ldr	r3, [pc, #456]	; (8004c14 <HAL_RCC_OscConfig+0x780>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f003 0203 	and.w	r2, r3, #3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d130      	bne.n	8004abe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a66:	3b01      	subs	r3, #1
 8004a68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d127      	bne.n	8004abe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a78:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d11f      	bne.n	8004abe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a88:	2a07      	cmp	r2, #7
 8004a8a:	bf14      	ite	ne
 8004a8c:	2201      	movne	r2, #1
 8004a8e:	2200      	moveq	r2, #0
 8004a90:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d113      	bne.n	8004abe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa0:	085b      	lsrs	r3, r3, #1
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d109      	bne.n	8004abe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab4:	085b      	lsrs	r3, r3, #1
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d06e      	beq.n	8004b9c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	2b0c      	cmp	r3, #12
 8004ac2:	d069      	beq.n	8004b98 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ac4:	4b53      	ldr	r3, [pc, #332]	; (8004c14 <HAL_RCC_OscConfig+0x780>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d105      	bne.n	8004adc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004ad0:	4b50      	ldr	r3, [pc, #320]	; (8004c14 <HAL_RCC_OscConfig+0x780>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e0ad      	b.n	8004c3c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004ae0:	4b4c      	ldr	r3, [pc, #304]	; (8004c14 <HAL_RCC_OscConfig+0x780>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a4b      	ldr	r2, [pc, #300]	; (8004c14 <HAL_RCC_OscConfig+0x780>)
 8004ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004aec:	f7fe f976 	bl	8002ddc <HAL_GetTick>
 8004af0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004af2:	e008      	b.n	8004b06 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004af4:	f7fe f972 	bl	8002ddc <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e09a      	b.n	8004c3c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b06:	4b43      	ldr	r3, [pc, #268]	; (8004c14 <HAL_RCC_OscConfig+0x780>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1f0      	bne.n	8004af4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b12:	4b40      	ldr	r3, [pc, #256]	; (8004c14 <HAL_RCC_OscConfig+0x780>)
 8004b14:	68da      	ldr	r2, [r3, #12]
 8004b16:	4b40      	ldr	r3, [pc, #256]	; (8004c18 <HAL_RCC_OscConfig+0x784>)
 8004b18:	4013      	ands	r3, r2
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b22:	3a01      	subs	r2, #1
 8004b24:	0112      	lsls	r2, r2, #4
 8004b26:	4311      	orrs	r1, r2
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b2c:	0212      	lsls	r2, r2, #8
 8004b2e:	4311      	orrs	r1, r2
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b34:	0852      	lsrs	r2, r2, #1
 8004b36:	3a01      	subs	r2, #1
 8004b38:	0552      	lsls	r2, r2, #21
 8004b3a:	4311      	orrs	r1, r2
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b40:	0852      	lsrs	r2, r2, #1
 8004b42:	3a01      	subs	r2, #1
 8004b44:	0652      	lsls	r2, r2, #25
 8004b46:	4311      	orrs	r1, r2
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b4c:	0912      	lsrs	r2, r2, #4
 8004b4e:	0452      	lsls	r2, r2, #17
 8004b50:	430a      	orrs	r2, r1
 8004b52:	4930      	ldr	r1, [pc, #192]	; (8004c14 <HAL_RCC_OscConfig+0x780>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b58:	4b2e      	ldr	r3, [pc, #184]	; (8004c14 <HAL_RCC_OscConfig+0x780>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a2d      	ldr	r2, [pc, #180]	; (8004c14 <HAL_RCC_OscConfig+0x780>)
 8004b5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b62:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b64:	4b2b      	ldr	r3, [pc, #172]	; (8004c14 <HAL_RCC_OscConfig+0x780>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	4a2a      	ldr	r2, [pc, #168]	; (8004c14 <HAL_RCC_OscConfig+0x780>)
 8004b6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b70:	f7fe f934 	bl	8002ddc <HAL_GetTick>
 8004b74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b78:	f7fe f930 	bl	8002ddc <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e058      	b.n	8004c3c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b8a:	4b22      	ldr	r3, [pc, #136]	; (8004c14 <HAL_RCC_OscConfig+0x780>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d0f0      	beq.n	8004b78 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b96:	e050      	b.n	8004c3a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e04f      	b.n	8004c3c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b9c:	4b1d      	ldr	r3, [pc, #116]	; (8004c14 <HAL_RCC_OscConfig+0x780>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d148      	bne.n	8004c3a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004ba8:	4b1a      	ldr	r3, [pc, #104]	; (8004c14 <HAL_RCC_OscConfig+0x780>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a19      	ldr	r2, [pc, #100]	; (8004c14 <HAL_RCC_OscConfig+0x780>)
 8004bae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bb2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bb4:	4b17      	ldr	r3, [pc, #92]	; (8004c14 <HAL_RCC_OscConfig+0x780>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	4a16      	ldr	r2, [pc, #88]	; (8004c14 <HAL_RCC_OscConfig+0x780>)
 8004bba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bbe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bc0:	f7fe f90c 	bl	8002ddc <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc8:	f7fe f908 	bl	8002ddc <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e030      	b.n	8004c3c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bda:	4b0e      	ldr	r3, [pc, #56]	; (8004c14 <HAL_RCC_OscConfig+0x780>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d0f0      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x734>
 8004be6:	e028      	b.n	8004c3a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	2b0c      	cmp	r3, #12
 8004bec:	d023      	beq.n	8004c36 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bee:	4b09      	ldr	r3, [pc, #36]	; (8004c14 <HAL_RCC_OscConfig+0x780>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a08      	ldr	r2, [pc, #32]	; (8004c14 <HAL_RCC_OscConfig+0x780>)
 8004bf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfa:	f7fe f8ef 	bl	8002ddc <HAL_GetTick>
 8004bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c00:	e00c      	b.n	8004c1c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c02:	f7fe f8eb 	bl	8002ddc <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d905      	bls.n	8004c1c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e013      	b.n	8004c3c <HAL_RCC_OscConfig+0x7a8>
 8004c14:	40021000 	.word	0x40021000
 8004c18:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c1c:	4b09      	ldr	r3, [pc, #36]	; (8004c44 <HAL_RCC_OscConfig+0x7b0>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1ec      	bne.n	8004c02 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c28:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <HAL_RCC_OscConfig+0x7b0>)
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	4905      	ldr	r1, [pc, #20]	; (8004c44 <HAL_RCC_OscConfig+0x7b0>)
 8004c2e:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <HAL_RCC_OscConfig+0x7b4>)
 8004c30:	4013      	ands	r3, r2
 8004c32:	60cb      	str	r3, [r1, #12]
 8004c34:	e001      	b.n	8004c3a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e000      	b.n	8004c3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3720      	adds	r7, #32
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	40021000 	.word	0x40021000
 8004c48:	feeefffc 	.word	0xfeeefffc

08004c4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e0e7      	b.n	8004e30 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c60:	4b75      	ldr	r3, [pc, #468]	; (8004e38 <HAL_RCC_ClockConfig+0x1ec>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0307 	and.w	r3, r3, #7
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d910      	bls.n	8004c90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c6e:	4b72      	ldr	r3, [pc, #456]	; (8004e38 <HAL_RCC_ClockConfig+0x1ec>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f023 0207 	bic.w	r2, r3, #7
 8004c76:	4970      	ldr	r1, [pc, #448]	; (8004e38 <HAL_RCC_ClockConfig+0x1ec>)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c7e:	4b6e      	ldr	r3, [pc, #440]	; (8004e38 <HAL_RCC_ClockConfig+0x1ec>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0307 	and.w	r3, r3, #7
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d001      	beq.n	8004c90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e0cf      	b.n	8004e30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d010      	beq.n	8004cbe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689a      	ldr	r2, [r3, #8]
 8004ca0:	4b66      	ldr	r3, [pc, #408]	; (8004e3c <HAL_RCC_ClockConfig+0x1f0>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d908      	bls.n	8004cbe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cac:	4b63      	ldr	r3, [pc, #396]	; (8004e3c <HAL_RCC_ClockConfig+0x1f0>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	4960      	ldr	r1, [pc, #384]	; (8004e3c <HAL_RCC_ClockConfig+0x1f0>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d04c      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	d107      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cd2:	4b5a      	ldr	r3, [pc, #360]	; (8004e3c <HAL_RCC_ClockConfig+0x1f0>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d121      	bne.n	8004d22 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e0a6      	b.n	8004e30 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d107      	bne.n	8004cfa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cea:	4b54      	ldr	r3, [pc, #336]	; (8004e3c <HAL_RCC_ClockConfig+0x1f0>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d115      	bne.n	8004d22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e09a      	b.n	8004e30 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d107      	bne.n	8004d12 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d02:	4b4e      	ldr	r3, [pc, #312]	; (8004e3c <HAL_RCC_ClockConfig+0x1f0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d109      	bne.n	8004d22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e08e      	b.n	8004e30 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d12:	4b4a      	ldr	r3, [pc, #296]	; (8004e3c <HAL_RCC_ClockConfig+0x1f0>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e086      	b.n	8004e30 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d22:	4b46      	ldr	r3, [pc, #280]	; (8004e3c <HAL_RCC_ClockConfig+0x1f0>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f023 0203 	bic.w	r2, r3, #3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	4943      	ldr	r1, [pc, #268]	; (8004e3c <HAL_RCC_ClockConfig+0x1f0>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d34:	f7fe f852 	bl	8002ddc <HAL_GetTick>
 8004d38:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d3a:	e00a      	b.n	8004d52 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d3c:	f7fe f84e 	bl	8002ddc <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e06e      	b.n	8004e30 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d52:	4b3a      	ldr	r3, [pc, #232]	; (8004e3c <HAL_RCC_ClockConfig+0x1f0>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 020c 	and.w	r2, r3, #12
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d1eb      	bne.n	8004d3c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d010      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	4b31      	ldr	r3, [pc, #196]	; (8004e3c <HAL_RCC_ClockConfig+0x1f0>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d208      	bcs.n	8004d92 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d80:	4b2e      	ldr	r3, [pc, #184]	; (8004e3c <HAL_RCC_ClockConfig+0x1f0>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	492b      	ldr	r1, [pc, #172]	; (8004e3c <HAL_RCC_ClockConfig+0x1f0>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d92:	4b29      	ldr	r3, [pc, #164]	; (8004e38 <HAL_RCC_ClockConfig+0x1ec>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d210      	bcs.n	8004dc2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004da0:	4b25      	ldr	r3, [pc, #148]	; (8004e38 <HAL_RCC_ClockConfig+0x1ec>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f023 0207 	bic.w	r2, r3, #7
 8004da8:	4923      	ldr	r1, [pc, #140]	; (8004e38 <HAL_RCC_ClockConfig+0x1ec>)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004db0:	4b21      	ldr	r3, [pc, #132]	; (8004e38 <HAL_RCC_ClockConfig+0x1ec>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d001      	beq.n	8004dc2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e036      	b.n	8004e30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0304 	and.w	r3, r3, #4
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d008      	beq.n	8004de0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dce:	4b1b      	ldr	r3, [pc, #108]	; (8004e3c <HAL_RCC_ClockConfig+0x1f0>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	4918      	ldr	r1, [pc, #96]	; (8004e3c <HAL_RCC_ClockConfig+0x1f0>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0308 	and.w	r3, r3, #8
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d009      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dec:	4b13      	ldr	r3, [pc, #76]	; (8004e3c <HAL_RCC_ClockConfig+0x1f0>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	00db      	lsls	r3, r3, #3
 8004dfa:	4910      	ldr	r1, [pc, #64]	; (8004e3c <HAL_RCC_ClockConfig+0x1f0>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e00:	f000 f824 	bl	8004e4c <HAL_RCC_GetSysClockFreq>
 8004e04:	4602      	mov	r2, r0
 8004e06:	4b0d      	ldr	r3, [pc, #52]	; (8004e3c <HAL_RCC_ClockConfig+0x1f0>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	091b      	lsrs	r3, r3, #4
 8004e0c:	f003 030f 	and.w	r3, r3, #15
 8004e10:	490b      	ldr	r1, [pc, #44]	; (8004e40 <HAL_RCC_ClockConfig+0x1f4>)
 8004e12:	5ccb      	ldrb	r3, [r1, r3]
 8004e14:	f003 031f 	and.w	r3, r3, #31
 8004e18:	fa22 f303 	lsr.w	r3, r2, r3
 8004e1c:	4a09      	ldr	r2, [pc, #36]	; (8004e44 <HAL_RCC_ClockConfig+0x1f8>)
 8004e1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e20:	4b09      	ldr	r3, [pc, #36]	; (8004e48 <HAL_RCC_ClockConfig+0x1fc>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7fd ff89 	bl	8002d3c <HAL_InitTick>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e2e:	7afb      	ldrb	r3, [r7, #11]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	40022000 	.word	0x40022000
 8004e3c:	40021000 	.word	0x40021000
 8004e40:	0800fcf4 	.word	0x0800fcf4
 8004e44:	2000010c 	.word	0x2000010c
 8004e48:	20000110 	.word	0x20000110

08004e4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b089      	sub	sp, #36	; 0x24
 8004e50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	61fb      	str	r3, [r7, #28]
 8004e56:	2300      	movs	r3, #0
 8004e58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e5a:	4b3e      	ldr	r3, [pc, #248]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 030c 	and.w	r3, r3, #12
 8004e62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e64:	4b3b      	ldr	r3, [pc, #236]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f003 0303 	and.w	r3, r3, #3
 8004e6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d005      	beq.n	8004e80 <HAL_RCC_GetSysClockFreq+0x34>
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	2b0c      	cmp	r3, #12
 8004e78:	d121      	bne.n	8004ebe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d11e      	bne.n	8004ebe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e80:	4b34      	ldr	r3, [pc, #208]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0308 	and.w	r3, r3, #8
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d107      	bne.n	8004e9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e8c:	4b31      	ldr	r3, [pc, #196]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e92:	0a1b      	lsrs	r3, r3, #8
 8004e94:	f003 030f 	and.w	r3, r3, #15
 8004e98:	61fb      	str	r3, [r7, #28]
 8004e9a:	e005      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e9c:	4b2d      	ldr	r3, [pc, #180]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	091b      	lsrs	r3, r3, #4
 8004ea2:	f003 030f 	and.w	r3, r3, #15
 8004ea6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ea8:	4a2b      	ldr	r2, [pc, #172]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eb0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10d      	bne.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ebc:	e00a      	b.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	2b04      	cmp	r3, #4
 8004ec2:	d102      	bne.n	8004eca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ec4:	4b25      	ldr	r3, [pc, #148]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x110>)
 8004ec6:	61bb      	str	r3, [r7, #24]
 8004ec8:	e004      	b.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d101      	bne.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ed0:	4b23      	ldr	r3, [pc, #140]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ed2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	2b0c      	cmp	r3, #12
 8004ed8:	d134      	bne.n	8004f44 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004eda:	4b1e      	ldr	r3, [pc, #120]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	f003 0303 	and.w	r3, r3, #3
 8004ee2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d003      	beq.n	8004ef2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	2b03      	cmp	r3, #3
 8004eee:	d003      	beq.n	8004ef8 <HAL_RCC_GetSysClockFreq+0xac>
 8004ef0:	e005      	b.n	8004efe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004ef2:	4b1a      	ldr	r3, [pc, #104]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x110>)
 8004ef4:	617b      	str	r3, [r7, #20]
      break;
 8004ef6:	e005      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ef8:	4b19      	ldr	r3, [pc, #100]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x114>)
 8004efa:	617b      	str	r3, [r7, #20]
      break;
 8004efc:	e002      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	617b      	str	r3, [r7, #20]
      break;
 8004f02:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f04:	4b13      	ldr	r3, [pc, #76]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	091b      	lsrs	r3, r3, #4
 8004f0a:	f003 0307 	and.w	r3, r3, #7
 8004f0e:	3301      	adds	r3, #1
 8004f10:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f12:	4b10      	ldr	r3, [pc, #64]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	0a1b      	lsrs	r3, r3, #8
 8004f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	fb03 f202 	mul.w	r2, r3, r2
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f28:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f2a:	4b0a      	ldr	r3, [pc, #40]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	0e5b      	lsrs	r3, r3, #25
 8004f30:	f003 0303 	and.w	r3, r3, #3
 8004f34:	3301      	adds	r3, #1
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f44:	69bb      	ldr	r3, [r7, #24]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3724      	adds	r7, #36	; 0x24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	40021000 	.word	0x40021000
 8004f58:	0800fd0c 	.word	0x0800fd0c
 8004f5c:	00f42400 	.word	0x00f42400
 8004f60:	007a1200 	.word	0x007a1200

08004f64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f64:	b480      	push	{r7}
 8004f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f68:	4b03      	ldr	r3, [pc, #12]	; (8004f78 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	2000010c 	.word	0x2000010c

08004f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f80:	f7ff fff0 	bl	8004f64 <HAL_RCC_GetHCLKFreq>
 8004f84:	4602      	mov	r2, r0
 8004f86:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	0a1b      	lsrs	r3, r3, #8
 8004f8c:	f003 0307 	and.w	r3, r3, #7
 8004f90:	4904      	ldr	r1, [pc, #16]	; (8004fa4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f92:	5ccb      	ldrb	r3, [r1, r3]
 8004f94:	f003 031f 	and.w	r3, r3, #31
 8004f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	0800fd04 	.word	0x0800fd04

08004fa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004fac:	f7ff ffda 	bl	8004f64 <HAL_RCC_GetHCLKFreq>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	4b06      	ldr	r3, [pc, #24]	; (8004fcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	0adb      	lsrs	r3, r3, #11
 8004fb8:	f003 0307 	and.w	r3, r3, #7
 8004fbc:	4904      	ldr	r1, [pc, #16]	; (8004fd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fbe:	5ccb      	ldrb	r3, [r1, r3]
 8004fc0:	f003 031f 	and.w	r3, r3, #31
 8004fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	0800fd04 	.word	0x0800fd04

08004fd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004fdc:	2300      	movs	r3, #0
 8004fde:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004fe0:	4b2a      	ldr	r3, [pc, #168]	; (800508c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d003      	beq.n	8004ff4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004fec:	f7ff f9ee 	bl	80043cc <HAL_PWREx_GetVoltageRange>
 8004ff0:	6178      	str	r0, [r7, #20]
 8004ff2:	e014      	b.n	800501e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ff4:	4b25      	ldr	r3, [pc, #148]	; (800508c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff8:	4a24      	ldr	r2, [pc, #144]	; (800508c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ffe:	6593      	str	r3, [r2, #88]	; 0x58
 8005000:	4b22      	ldr	r3, [pc, #136]	; (800508c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800500c:	f7ff f9de 	bl	80043cc <HAL_PWREx_GetVoltageRange>
 8005010:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005012:	4b1e      	ldr	r3, [pc, #120]	; (800508c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005016:	4a1d      	ldr	r2, [pc, #116]	; (800508c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800501c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005024:	d10b      	bne.n	800503e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b80      	cmp	r3, #128	; 0x80
 800502a:	d919      	bls.n	8005060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2ba0      	cmp	r3, #160	; 0xa0
 8005030:	d902      	bls.n	8005038 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005032:	2302      	movs	r3, #2
 8005034:	613b      	str	r3, [r7, #16]
 8005036:	e013      	b.n	8005060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005038:	2301      	movs	r3, #1
 800503a:	613b      	str	r3, [r7, #16]
 800503c:	e010      	b.n	8005060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b80      	cmp	r3, #128	; 0x80
 8005042:	d902      	bls.n	800504a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005044:	2303      	movs	r3, #3
 8005046:	613b      	str	r3, [r7, #16]
 8005048:	e00a      	b.n	8005060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b80      	cmp	r3, #128	; 0x80
 800504e:	d102      	bne.n	8005056 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005050:	2302      	movs	r3, #2
 8005052:	613b      	str	r3, [r7, #16]
 8005054:	e004      	b.n	8005060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b70      	cmp	r3, #112	; 0x70
 800505a:	d101      	bne.n	8005060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800505c:	2301      	movs	r3, #1
 800505e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005060:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f023 0207 	bic.w	r2, r3, #7
 8005068:	4909      	ldr	r1, [pc, #36]	; (8005090 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	4313      	orrs	r3, r2
 800506e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005070:	4b07      	ldr	r3, [pc, #28]	; (8005090 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	429a      	cmp	r2, r3
 800507c:	d001      	beq.n	8005082 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e000      	b.n	8005084 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3718      	adds	r7, #24
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	40021000 	.word	0x40021000
 8005090:	40022000 	.word	0x40022000

08005094 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800509c:	2300      	movs	r3, #0
 800509e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050a0:	2300      	movs	r3, #0
 80050a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d041      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050b8:	d02a      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80050ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050be:	d824      	bhi.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80050c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050c4:	d008      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80050c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050ca:	d81e      	bhi.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00a      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80050d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050d4:	d010      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80050d6:	e018      	b.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050d8:	4b86      	ldr	r3, [pc, #536]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	4a85      	ldr	r2, [pc, #532]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050e4:	e015      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	3304      	adds	r3, #4
 80050ea:	2100      	movs	r1, #0
 80050ec:	4618      	mov	r0, r3
 80050ee:	f001 f829 	bl	8006144 <RCCEx_PLLSAI1_Config>
 80050f2:	4603      	mov	r3, r0
 80050f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050f6:	e00c      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3320      	adds	r3, #32
 80050fc:	2100      	movs	r1, #0
 80050fe:	4618      	mov	r0, r3
 8005100:	f001 f914 	bl	800632c <RCCEx_PLLSAI2_Config>
 8005104:	4603      	mov	r3, r0
 8005106:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005108:	e003      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	74fb      	strb	r3, [r7, #19]
      break;
 800510e:	e000      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005110:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005112:	7cfb      	ldrb	r3, [r7, #19]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10b      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005118:	4b76      	ldr	r3, [pc, #472]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800511a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005126:	4973      	ldr	r1, [pc, #460]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005128:	4313      	orrs	r3, r2
 800512a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800512e:	e001      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005130:	7cfb      	ldrb	r3, [r7, #19]
 8005132:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d041      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005144:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005148:	d02a      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800514a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800514e:	d824      	bhi.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005150:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005154:	d008      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005156:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800515a:	d81e      	bhi.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00a      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005160:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005164:	d010      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005166:	e018      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005168:	4b62      	ldr	r3, [pc, #392]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	4a61      	ldr	r2, [pc, #388]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800516e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005172:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005174:	e015      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	3304      	adds	r3, #4
 800517a:	2100      	movs	r1, #0
 800517c:	4618      	mov	r0, r3
 800517e:	f000 ffe1 	bl	8006144 <RCCEx_PLLSAI1_Config>
 8005182:	4603      	mov	r3, r0
 8005184:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005186:	e00c      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	3320      	adds	r3, #32
 800518c:	2100      	movs	r1, #0
 800518e:	4618      	mov	r0, r3
 8005190:	f001 f8cc 	bl	800632c <RCCEx_PLLSAI2_Config>
 8005194:	4603      	mov	r3, r0
 8005196:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005198:	e003      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	74fb      	strb	r3, [r7, #19]
      break;
 800519e:	e000      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80051a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051a2:	7cfb      	ldrb	r3, [r7, #19]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10b      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80051a8:	4b52      	ldr	r3, [pc, #328]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051b6:	494f      	ldr	r1, [pc, #316]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80051be:	e001      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c0:	7cfb      	ldrb	r3, [r7, #19]
 80051c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 80a0 	beq.w	8005312 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051d2:	2300      	movs	r3, #0
 80051d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051d6:	4b47      	ldr	r3, [pc, #284]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80051e2:	2301      	movs	r3, #1
 80051e4:	e000      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80051e6:	2300      	movs	r3, #0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00d      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ec:	4b41      	ldr	r3, [pc, #260]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f0:	4a40      	ldr	r2, [pc, #256]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f6:	6593      	str	r3, [r2, #88]	; 0x58
 80051f8:	4b3e      	ldr	r3, [pc, #248]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005200:	60bb      	str	r3, [r7, #8]
 8005202:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005204:	2301      	movs	r3, #1
 8005206:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005208:	4b3b      	ldr	r3, [pc, #236]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a3a      	ldr	r2, [pc, #232]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800520e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005212:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005214:	f7fd fde2 	bl	8002ddc <HAL_GetTick>
 8005218:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800521a:	e009      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800521c:	f7fd fdde 	bl	8002ddc <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d902      	bls.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	74fb      	strb	r3, [r7, #19]
        break;
 800522e:	e005      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005230:	4b31      	ldr	r3, [pc, #196]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005238:	2b00      	cmp	r3, #0
 800523a:	d0ef      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800523c:	7cfb      	ldrb	r3, [r7, #19]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d15c      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005242:	4b2c      	ldr	r3, [pc, #176]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005248:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800524c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d01f      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	429a      	cmp	r2, r3
 800525e:	d019      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005260:	4b24      	ldr	r3, [pc, #144]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800526a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800526c:	4b21      	ldr	r3, [pc, #132]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800526e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005272:	4a20      	ldr	r2, [pc, #128]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800527c:	4b1d      	ldr	r3, [pc, #116]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800527e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005282:	4a1c      	ldr	r2, [pc, #112]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005284:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800528c:	4a19      	ldr	r2, [pc, #100]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b00      	cmp	r3, #0
 800529c:	d016      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800529e:	f7fd fd9d 	bl	8002ddc <HAL_GetTick>
 80052a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052a4:	e00b      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052a6:	f7fd fd99 	bl	8002ddc <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d902      	bls.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	74fb      	strb	r3, [r7, #19]
            break;
 80052bc:	e006      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052be:	4b0d      	ldr	r3, [pc, #52]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d0ec      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80052cc:	7cfb      	ldrb	r3, [r7, #19]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10c      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052d2:	4b08      	ldr	r3, [pc, #32]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052e2:	4904      	ldr	r1, [pc, #16]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80052ea:	e009      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052ec:	7cfb      	ldrb	r3, [r7, #19]
 80052ee:	74bb      	strb	r3, [r7, #18]
 80052f0:	e006      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80052f2:	bf00      	nop
 80052f4:	40021000 	.word	0x40021000
 80052f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052fc:	7cfb      	ldrb	r3, [r7, #19]
 80052fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005300:	7c7b      	ldrb	r3, [r7, #17]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d105      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005306:	4b9e      	ldr	r3, [pc, #632]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800530a:	4a9d      	ldr	r2, [pc, #628]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800530c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005310:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800531e:	4b98      	ldr	r3, [pc, #608]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005324:	f023 0203 	bic.w	r2, r3, #3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532c:	4994      	ldr	r1, [pc, #592]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800532e:	4313      	orrs	r3, r2
 8005330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00a      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005340:	4b8f      	ldr	r3, [pc, #572]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005346:	f023 020c 	bic.w	r2, r3, #12
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534e:	498c      	ldr	r1, [pc, #560]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005350:	4313      	orrs	r3, r2
 8005352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0304 	and.w	r3, r3, #4
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00a      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005362:	4b87      	ldr	r3, [pc, #540]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005368:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005370:	4983      	ldr	r1, [pc, #524]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005372:	4313      	orrs	r3, r2
 8005374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0308 	and.w	r3, r3, #8
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00a      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005384:	4b7e      	ldr	r3, [pc, #504]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800538a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005392:	497b      	ldr	r1, [pc, #492]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005394:	4313      	orrs	r3, r2
 8005396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0310 	and.w	r3, r3, #16
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00a      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053a6:	4b76      	ldr	r3, [pc, #472]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b4:	4972      	ldr	r1, [pc, #456]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0320 	and.w	r3, r3, #32
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00a      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053c8:	4b6d      	ldr	r3, [pc, #436]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d6:	496a      	ldr	r1, [pc, #424]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00a      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053ea:	4b65      	ldr	r3, [pc, #404]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f8:	4961      	ldr	r1, [pc, #388]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00a      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800540c:	4b5c      	ldr	r3, [pc, #368]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800540e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005412:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800541a:	4959      	ldr	r1, [pc, #356]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800541c:	4313      	orrs	r3, r2
 800541e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00a      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800542e:	4b54      	ldr	r3, [pc, #336]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005434:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800543c:	4950      	ldr	r1, [pc, #320]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800543e:	4313      	orrs	r3, r2
 8005440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00a      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005450:	4b4b      	ldr	r3, [pc, #300]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005456:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545e:	4948      	ldr	r1, [pc, #288]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005460:	4313      	orrs	r3, r2
 8005462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00a      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005472:	4b43      	ldr	r3, [pc, #268]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005478:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005480:	493f      	ldr	r1, [pc, #252]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005482:	4313      	orrs	r3, r2
 8005484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d028      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005494:	4b3a      	ldr	r3, [pc, #232]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054a2:	4937      	ldr	r1, [pc, #220]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054b2:	d106      	bne.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054b4:	4b32      	ldr	r3, [pc, #200]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	4a31      	ldr	r2, [pc, #196]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054be:	60d3      	str	r3, [r2, #12]
 80054c0:	e011      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054ca:	d10c      	bne.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	3304      	adds	r3, #4
 80054d0:	2101      	movs	r1, #1
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 fe36 	bl	8006144 <RCCEx_PLLSAI1_Config>
 80054d8:	4603      	mov	r3, r0
 80054da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80054dc:	7cfb      	ldrb	r3, [r7, #19]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80054e2:	7cfb      	ldrb	r3, [r7, #19]
 80054e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d028      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80054f2:	4b23      	ldr	r3, [pc, #140]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005500:	491f      	ldr	r1, [pc, #124]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005502:	4313      	orrs	r3, r2
 8005504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005510:	d106      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005512:	4b1b      	ldr	r3, [pc, #108]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	4a1a      	ldr	r2, [pc, #104]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800551c:	60d3      	str	r3, [r2, #12]
 800551e:	e011      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005524:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005528:	d10c      	bne.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	3304      	adds	r3, #4
 800552e:	2101      	movs	r1, #1
 8005530:	4618      	mov	r0, r3
 8005532:	f000 fe07 	bl	8006144 <RCCEx_PLLSAI1_Config>
 8005536:	4603      	mov	r3, r0
 8005538:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800553a:	7cfb      	ldrb	r3, [r7, #19]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005540:	7cfb      	ldrb	r3, [r7, #19]
 8005542:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d02b      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005550:	4b0b      	ldr	r3, [pc, #44]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005556:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800555e:	4908      	ldr	r1, [pc, #32]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005560:	4313      	orrs	r3, r2
 8005562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800556a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800556e:	d109      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005570:	4b03      	ldr	r3, [pc, #12]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	4a02      	ldr	r2, [pc, #8]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005576:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800557a:	60d3      	str	r3, [r2, #12]
 800557c:	e014      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800557e:	bf00      	nop
 8005580:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005588:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800558c:	d10c      	bne.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	3304      	adds	r3, #4
 8005592:	2101      	movs	r1, #1
 8005594:	4618      	mov	r0, r3
 8005596:	f000 fdd5 	bl	8006144 <RCCEx_PLLSAI1_Config>
 800559a:	4603      	mov	r3, r0
 800559c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800559e:	7cfb      	ldrb	r3, [r7, #19]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80055a4:	7cfb      	ldrb	r3, [r7, #19]
 80055a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d02f      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055b4:	4b2b      	ldr	r3, [pc, #172]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055c2:	4928      	ldr	r1, [pc, #160]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055d2:	d10d      	bne.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	3304      	adds	r3, #4
 80055d8:	2102      	movs	r1, #2
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 fdb2 	bl	8006144 <RCCEx_PLLSAI1_Config>
 80055e0:	4603      	mov	r3, r0
 80055e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055e4:	7cfb      	ldrb	r3, [r7, #19]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d014      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80055ea:	7cfb      	ldrb	r3, [r7, #19]
 80055ec:	74bb      	strb	r3, [r7, #18]
 80055ee:	e011      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055f8:	d10c      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	3320      	adds	r3, #32
 80055fe:	2102      	movs	r1, #2
 8005600:	4618      	mov	r0, r3
 8005602:	f000 fe93 	bl	800632c <RCCEx_PLLSAI2_Config>
 8005606:	4603      	mov	r3, r0
 8005608:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800560a:	7cfb      	ldrb	r3, [r7, #19]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005610:	7cfb      	ldrb	r3, [r7, #19]
 8005612:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00a      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005620:	4b10      	ldr	r3, [pc, #64]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005626:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800562e:	490d      	ldr	r1, [pc, #52]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005630:	4313      	orrs	r3, r2
 8005632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00b      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005642:	4b08      	ldr	r3, [pc, #32]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005648:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005652:	4904      	ldr	r1, [pc, #16]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005654:	4313      	orrs	r3, r2
 8005656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800565a:	7cbb      	ldrb	r3, [r7, #18]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3718      	adds	r7, #24
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	40021000 	.word	0x40021000

08005668 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005670:	2300      	movs	r3, #0
 8005672:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800567a:	d13e      	bne.n	80056fa <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800567c:	4bb2      	ldr	r3, [pc, #712]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800567e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005686:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800568e:	d028      	beq.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005696:	f200 8542 	bhi.w	800611e <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056a0:	d005      	beq.n	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056a8:	d00e      	beq.n	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80056aa:	f000 bd38 	b.w	800611e <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80056ae:	4ba6      	ldr	r3, [pc, #664]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80056b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	f040 8532 	bne.w	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 80056be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056c2:	61fb      	str	r3, [r7, #28]
      break;
 80056c4:	f000 bd2d 	b.w	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80056c8:	4b9f      	ldr	r3, [pc, #636]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80056ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	f040 8527 	bne.w	8006126 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 80056d8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80056dc:	61fb      	str	r3, [r7, #28]
      break;
 80056de:	f000 bd22 	b.w	8006126 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80056e2:	4b99      	ldr	r3, [pc, #612]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056ee:	f040 851c 	bne.w	800612a <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 80056f2:	4b96      	ldr	r3, [pc, #600]	; (800594c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80056f4:	61fb      	str	r3, [r7, #28]
      break;
 80056f6:	f000 bd18 	b.w	800612a <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056fa:	4b93      	ldr	r3, [pc, #588]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f003 0303 	and.w	r3, r3, #3
 8005702:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	2b03      	cmp	r3, #3
 8005708:	d036      	beq.n	8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	2b03      	cmp	r3, #3
 800570e:	d840      	bhi.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d003      	beq.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	2b02      	cmp	r3, #2
 800571a:	d020      	beq.n	800575e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800571c:	e039      	b.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800571e:	4b8a      	ldr	r3, [pc, #552]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b02      	cmp	r3, #2
 8005728:	d116      	bne.n	8005758 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800572a:	4b87      	ldr	r3, [pc, #540]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0308 	and.w	r3, r3, #8
 8005732:	2b00      	cmp	r3, #0
 8005734:	d005      	beq.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005736:	4b84      	ldr	r3, [pc, #528]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	091b      	lsrs	r3, r3, #4
 800573c:	f003 030f 	and.w	r3, r3, #15
 8005740:	e005      	b.n	800574e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005742:	4b81      	ldr	r3, [pc, #516]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005744:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005748:	0a1b      	lsrs	r3, r3, #8
 800574a:	f003 030f 	and.w	r3, r3, #15
 800574e:	4a80      	ldr	r2, [pc, #512]	; (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8005750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005754:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005756:	e01f      	b.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005758:	2300      	movs	r3, #0
 800575a:	61bb      	str	r3, [r7, #24]
      break;
 800575c:	e01c      	b.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800575e:	4b7a      	ldr	r3, [pc, #488]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800576a:	d102      	bne.n	8005772 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800576c:	4b79      	ldr	r3, [pc, #484]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800576e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005770:	e012      	b.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005772:	2300      	movs	r3, #0
 8005774:	61bb      	str	r3, [r7, #24]
      break;
 8005776:	e00f      	b.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005778:	4b73      	ldr	r3, [pc, #460]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005780:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005784:	d102      	bne.n	800578c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005786:	4b74      	ldr	r3, [pc, #464]	; (8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005788:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800578a:	e005      	b.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800578c:	2300      	movs	r3, #0
 800578e:	61bb      	str	r3, [r7, #24]
      break;
 8005790:	e002      	b.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	61bb      	str	r3, [r7, #24]
      break;
 8005796:	bf00      	nop
    }

    switch(PeriphClk)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800579e:	f000 80dd 	beq.w	800595c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80057a8:	f200 84c1 	bhi.w	800612e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057b2:	f000 80d3 	beq.w	800595c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057bc:	f200 84b7 	bhi.w	800612e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c6:	f000 835f 	beq.w	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057d0:	f200 84ad 	bhi.w	800612e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057da:	f000 847e 	beq.w	80060da <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057e4:	f200 84a3 	bhi.w	800612e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057ee:	f000 82cd 	beq.w	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057f8:	f200 8499 	bhi.w	800612e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005802:	f000 80ab 	beq.w	800595c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800580c:	f200 848f 	bhi.w	800612e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005816:	f000 8090 	beq.w	800593a <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005820:	f200 8485 	bhi.w	800612e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800582a:	d07f      	beq.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005832:	f200 847c 	bhi.w	800612e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800583c:	f000 8403 	beq.w	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005846:	f200 8472 	bhi.w	800612e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005850:	f000 83af 	beq.w	8005fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800585a:	f200 8468 	bhi.w	800612e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005864:	f000 8379 	beq.w	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800586e:	f200 845e 	bhi.w	800612e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b80      	cmp	r3, #128	; 0x80
 8005876:	f000 8344 	beq.w	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b80      	cmp	r3, #128	; 0x80
 800587e:	f200 8456 	bhi.w	800612e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b20      	cmp	r3, #32
 8005886:	d84b      	bhi.n	8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 844f 	beq.w	800612e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	3b01      	subs	r3, #1
 8005894:	2b1f      	cmp	r3, #31
 8005896:	f200 844a 	bhi.w	800612e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800589a:	a201      	add	r2, pc, #4	; (adr r2, 80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 800589c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a0:	08005a89 	.word	0x08005a89
 80058a4:	08005af7 	.word	0x08005af7
 80058a8:	0800612f 	.word	0x0800612f
 80058ac:	08005b8b 	.word	0x08005b8b
 80058b0:	0800612f 	.word	0x0800612f
 80058b4:	0800612f 	.word	0x0800612f
 80058b8:	0800612f 	.word	0x0800612f
 80058bc:	08005c11 	.word	0x08005c11
 80058c0:	0800612f 	.word	0x0800612f
 80058c4:	0800612f 	.word	0x0800612f
 80058c8:	0800612f 	.word	0x0800612f
 80058cc:	0800612f 	.word	0x0800612f
 80058d0:	0800612f 	.word	0x0800612f
 80058d4:	0800612f 	.word	0x0800612f
 80058d8:	0800612f 	.word	0x0800612f
 80058dc:	08005c89 	.word	0x08005c89
 80058e0:	0800612f 	.word	0x0800612f
 80058e4:	0800612f 	.word	0x0800612f
 80058e8:	0800612f 	.word	0x0800612f
 80058ec:	0800612f 	.word	0x0800612f
 80058f0:	0800612f 	.word	0x0800612f
 80058f4:	0800612f 	.word	0x0800612f
 80058f8:	0800612f 	.word	0x0800612f
 80058fc:	0800612f 	.word	0x0800612f
 8005900:	0800612f 	.word	0x0800612f
 8005904:	0800612f 	.word	0x0800612f
 8005908:	0800612f 	.word	0x0800612f
 800590c:	0800612f 	.word	0x0800612f
 8005910:	0800612f 	.word	0x0800612f
 8005914:	0800612f 	.word	0x0800612f
 8005918:	0800612f 	.word	0x0800612f
 800591c:	08005d0b 	.word	0x08005d0b
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b40      	cmp	r3, #64	; 0x40
 8005924:	f000 82c1 	beq.w	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005928:	f000 bc01 	b.w	800612e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800592c:	69b9      	ldr	r1, [r7, #24]
 800592e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005932:	f000 fdd9 	bl	80064e8 <RCCEx_GetSAIxPeriphCLKFreq>
 8005936:	61f8      	str	r0, [r7, #28]
      break;
 8005938:	e3fa      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800593a:	69b9      	ldr	r1, [r7, #24]
 800593c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005940:	f000 fdd2 	bl	80064e8 <RCCEx_GetSAIxPeriphCLKFreq>
 8005944:	61f8      	str	r0, [r7, #28]
      break;
 8005946:	e3f3      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8005948:	40021000 	.word	0x40021000
 800594c:	0003d090 	.word	0x0003d090
 8005950:	0800fd0c 	.word	0x0800fd0c
 8005954:	00f42400 	.word	0x00f42400
 8005958:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800595c:	4ba9      	ldr	r3, [pc, #676]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800595e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005962:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005966:	613b      	str	r3, [r7, #16]
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800596e:	d00c      	beq.n	800598a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005976:	d87f      	bhi.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800597e:	d04e      	beq.n	8005a1e <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005986:	d01d      	beq.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8005988:	e076      	b.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800598a:	4b9e      	ldr	r3, [pc, #632]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b02      	cmp	r3, #2
 8005994:	d172      	bne.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005996:	4b9b      	ldr	r3, [pc, #620]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0308 	and.w	r3, r3, #8
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d005      	beq.n	80059ae <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 80059a2:	4b98      	ldr	r3, [pc, #608]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	091b      	lsrs	r3, r3, #4
 80059a8:	f003 030f 	and.w	r3, r3, #15
 80059ac:	e005      	b.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 80059ae:	4b95      	ldr	r3, [pc, #596]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80059b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059b4:	0a1b      	lsrs	r3, r3, #8
 80059b6:	f003 030f 	and.w	r3, r3, #15
 80059ba:	4a93      	ldr	r2, [pc, #588]	; (8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80059bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059c0:	61fb      	str	r3, [r7, #28]
          break;
 80059c2:	e05b      	b.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80059c4:	4b8f      	ldr	r3, [pc, #572]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059d0:	d156      	bne.n	8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80059d2:	4b8c      	ldr	r3, [pc, #560]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059de:	d14f      	bne.n	8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80059e0:	4b88      	ldr	r3, [pc, #544]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	0a1b      	lsrs	r3, r3, #8
 80059e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ea:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	fb03 f202 	mul.w	r2, r3, r2
 80059f4:	4b83      	ldr	r3, [pc, #524]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	091b      	lsrs	r3, r3, #4
 80059fa:	f003 0307 	and.w	r3, r3, #7
 80059fe:	3301      	adds	r3, #1
 8005a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a04:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005a06:	4b7f      	ldr	r3, [pc, #508]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	0d5b      	lsrs	r3, r3, #21
 8005a0c:	f003 0303 	and.w	r3, r3, #3
 8005a10:	3301      	adds	r3, #1
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1a:	61fb      	str	r3, [r7, #28]
          break;
 8005a1c:	e030      	b.n	8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005a1e:	4b79      	ldr	r3, [pc, #484]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a2a:	d12b      	bne.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005a2c:	4b75      	ldr	r3, [pc, #468]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a38:	d124      	bne.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005a3a:	4b72      	ldr	r3, [pc, #456]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	0a1b      	lsrs	r3, r3, #8
 8005a40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a44:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	fb03 f202 	mul.w	r2, r3, r2
 8005a4e:	4b6d      	ldr	r3, [pc, #436]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	091b      	lsrs	r3, r3, #4
 8005a54:	f003 0307 	and.w	r3, r3, #7
 8005a58:	3301      	adds	r3, #1
 8005a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005a60:	4b68      	ldr	r3, [pc, #416]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	0d5b      	lsrs	r3, r3, #21
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a74:	61fb      	str	r3, [r7, #28]
          break;
 8005a76:	e005      	b.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8005a78:	bf00      	nop
 8005a7a:	e359      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005a7c:	bf00      	nop
 8005a7e:	e357      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005a80:	bf00      	nop
 8005a82:	e355      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005a84:	bf00      	nop
        break;
 8005a86:	e353      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005a88:	4b5e      	ldr	r3, [pc, #376]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a8e:	f003 0303 	and.w	r3, r3, #3
 8005a92:	613b      	str	r3, [r7, #16]
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	2b03      	cmp	r3, #3
 8005a98:	d827      	bhi.n	8005aea <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8005a9a:	a201      	add	r2, pc, #4	; (adr r2, 8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8005a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa0:	08005ab1 	.word	0x08005ab1
 8005aa4:	08005ab9 	.word	0x08005ab9
 8005aa8:	08005ac1 	.word	0x08005ac1
 8005aac:	08005ad5 	.word	0x08005ad5
          frequency = HAL_RCC_GetPCLK2Freq();
 8005ab0:	f7ff fa7a 	bl	8004fa8 <HAL_RCC_GetPCLK2Freq>
 8005ab4:	61f8      	str	r0, [r7, #28]
          break;
 8005ab6:	e01d      	b.n	8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005ab8:	f7ff f9c8 	bl	8004e4c <HAL_RCC_GetSysClockFreq>
 8005abc:	61f8      	str	r0, [r7, #28]
          break;
 8005abe:	e019      	b.n	8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ac0:	4b50      	ldr	r3, [pc, #320]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005acc:	d10f      	bne.n	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8005ace:	4b4f      	ldr	r3, [pc, #316]	; (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005ad0:	61fb      	str	r3, [r7, #28]
          break;
 8005ad2:	e00c      	b.n	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005ad4:	4b4b      	ldr	r3, [pc, #300]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d107      	bne.n	8005af2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8005ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ae6:	61fb      	str	r3, [r7, #28]
          break;
 8005ae8:	e003      	b.n	8005af2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8005aea:	bf00      	nop
 8005aec:	e320      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005aee:	bf00      	nop
 8005af0:	e31e      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005af2:	bf00      	nop
        break;
 8005af4:	e31c      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005af6:	4b43      	ldr	r3, [pc, #268]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005afc:	f003 030c 	and.w	r3, r3, #12
 8005b00:	613b      	str	r3, [r7, #16]
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	2b0c      	cmp	r3, #12
 8005b06:	d83a      	bhi.n	8005b7e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8005b08:	a201      	add	r2, pc, #4	; (adr r2, 8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8005b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0e:	bf00      	nop
 8005b10:	08005b45 	.word	0x08005b45
 8005b14:	08005b7f 	.word	0x08005b7f
 8005b18:	08005b7f 	.word	0x08005b7f
 8005b1c:	08005b7f 	.word	0x08005b7f
 8005b20:	08005b4d 	.word	0x08005b4d
 8005b24:	08005b7f 	.word	0x08005b7f
 8005b28:	08005b7f 	.word	0x08005b7f
 8005b2c:	08005b7f 	.word	0x08005b7f
 8005b30:	08005b55 	.word	0x08005b55
 8005b34:	08005b7f 	.word	0x08005b7f
 8005b38:	08005b7f 	.word	0x08005b7f
 8005b3c:	08005b7f 	.word	0x08005b7f
 8005b40:	08005b69 	.word	0x08005b69
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b44:	f7ff fa1a 	bl	8004f7c <HAL_RCC_GetPCLK1Freq>
 8005b48:	61f8      	str	r0, [r7, #28]
          break;
 8005b4a:	e01d      	b.n	8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b4c:	f7ff f97e 	bl	8004e4c <HAL_RCC_GetSysClockFreq>
 8005b50:	61f8      	str	r0, [r7, #28]
          break;
 8005b52:	e019      	b.n	8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b54:	4b2b      	ldr	r3, [pc, #172]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b60:	d10f      	bne.n	8005b82 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8005b62:	4b2a      	ldr	r3, [pc, #168]	; (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005b64:	61fb      	str	r3, [r7, #28]
          break;
 8005b66:	e00c      	b.n	8005b82 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005b68:	4b26      	ldr	r3, [pc, #152]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d107      	bne.n	8005b86 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8005b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b7a:	61fb      	str	r3, [r7, #28]
          break;
 8005b7c:	e003      	b.n	8005b86 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8005b7e:	bf00      	nop
 8005b80:	e2d6      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005b82:	bf00      	nop
 8005b84:	e2d4      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005b86:	bf00      	nop
        break;
 8005b88:	e2d2      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005b8a:	4b1e      	ldr	r3, [pc, #120]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b90:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b94:	613b      	str	r3, [r7, #16]
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	2b30      	cmp	r3, #48	; 0x30
 8005b9a:	d021      	beq.n	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	2b30      	cmp	r3, #48	; 0x30
 8005ba0:	d829      	bhi.n	8005bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	2b20      	cmp	r3, #32
 8005ba6:	d011      	beq.n	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	2b20      	cmp	r3, #32
 8005bac:	d823      	bhi.n	8005bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d003      	beq.n	8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	2b10      	cmp	r3, #16
 8005bb8:	d004      	beq.n	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8005bba:	e01c      	b.n	8005bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005bbc:	f7ff f9de 	bl	8004f7c <HAL_RCC_GetPCLK1Freq>
 8005bc0:	61f8      	str	r0, [r7, #28]
          break;
 8005bc2:	e01d      	b.n	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8005bc4:	f7ff f942 	bl	8004e4c <HAL_RCC_GetSysClockFreq>
 8005bc8:	61f8      	str	r0, [r7, #28]
          break;
 8005bca:	e019      	b.n	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bcc:	4b0d      	ldr	r3, [pc, #52]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bd8:	d10f      	bne.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8005bda:	4b0c      	ldr	r3, [pc, #48]	; (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005bdc:	61fb      	str	r3, [r7, #28]
          break;
 8005bde:	e00c      	b.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005be0:	4b08      	ldr	r3, [pc, #32]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d107      	bne.n	8005bfe <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8005bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bf2:	61fb      	str	r3, [r7, #28]
          break;
 8005bf4:	e003      	b.n	8005bfe <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8005bf6:	bf00      	nop
 8005bf8:	e29a      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005bfa:	bf00      	nop
 8005bfc:	e298      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005bfe:	bf00      	nop
        break;
 8005c00:	e296      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8005c02:	bf00      	nop
 8005c04:	40021000 	.word	0x40021000
 8005c08:	0800fd0c 	.word	0x0800fd0c
 8005c0c:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005c10:	4b9b      	ldr	r3, [pc, #620]	; (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c1a:	613b      	str	r3, [r7, #16]
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	2bc0      	cmp	r3, #192	; 0xc0
 8005c20:	d021      	beq.n	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	2bc0      	cmp	r3, #192	; 0xc0
 8005c26:	d829      	bhi.n	8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	2b80      	cmp	r3, #128	; 0x80
 8005c2c:	d011      	beq.n	8005c52 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	2b80      	cmp	r3, #128	; 0x80
 8005c32:	d823      	bhi.n	8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d003      	beq.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	2b40      	cmp	r3, #64	; 0x40
 8005c3e:	d004      	beq.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8005c40:	e01c      	b.n	8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c42:	f7ff f99b 	bl	8004f7c <HAL_RCC_GetPCLK1Freq>
 8005c46:	61f8      	str	r0, [r7, #28]
          break;
 8005c48:	e01d      	b.n	8005c86 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c4a:	f7ff f8ff 	bl	8004e4c <HAL_RCC_GetSysClockFreq>
 8005c4e:	61f8      	str	r0, [r7, #28]
          break;
 8005c50:	e019      	b.n	8005c86 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c52:	4b8b      	ldr	r3, [pc, #556]	; (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c5e:	d10f      	bne.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8005c60:	4b88      	ldr	r3, [pc, #544]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8005c62:	61fb      	str	r3, [r7, #28]
          break;
 8005c64:	e00c      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005c66:	4b86      	ldr	r3, [pc, #536]	; (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d107      	bne.n	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8005c74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c78:	61fb      	str	r3, [r7, #28]
          break;
 8005c7a:	e003      	b.n	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8005c7c:	bf00      	nop
 8005c7e:	e257      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005c80:	bf00      	nop
 8005c82:	e255      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005c84:	bf00      	nop
        break;
 8005c86:	e253      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005c88:	4b7d      	ldr	r3, [pc, #500]	; (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c92:	613b      	str	r3, [r7, #16]
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c9a:	d025      	beq.n	8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ca2:	d82c      	bhi.n	8005cfe <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005caa:	d013      	beq.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cb2:	d824      	bhi.n	8005cfe <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d004      	beq.n	8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cc0:	d004      	beq.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8005cc2:	e01c      	b.n	8005cfe <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005cc4:	f7ff f95a 	bl	8004f7c <HAL_RCC_GetPCLK1Freq>
 8005cc8:	61f8      	str	r0, [r7, #28]
          break;
 8005cca:	e01d      	b.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005ccc:	f7ff f8be 	bl	8004e4c <HAL_RCC_GetSysClockFreq>
 8005cd0:	61f8      	str	r0, [r7, #28]
          break;
 8005cd2:	e019      	b.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cd4:	4b6a      	ldr	r3, [pc, #424]	; (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ce0:	d10f      	bne.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8005ce2:	4b68      	ldr	r3, [pc, #416]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8005ce4:	61fb      	str	r3, [r7, #28]
          break;
 8005ce6:	e00c      	b.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005ce8:	4b65      	ldr	r3, [pc, #404]	; (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d107      	bne.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8005cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cfa:	61fb      	str	r3, [r7, #28]
          break;
 8005cfc:	e003      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8005cfe:	bf00      	nop
 8005d00:	e216      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005d02:	bf00      	nop
 8005d04:	e214      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005d06:	bf00      	nop
        break;
 8005d08:	e212      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005d0a:	4b5d      	ldr	r3, [pc, #372]	; (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d14:	613b      	str	r3, [r7, #16]
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d1c:	d025      	beq.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d24:	d82c      	bhi.n	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d2c:	d013      	beq.n	8005d56 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d34:	d824      	bhi.n	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d004      	beq.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d42:	d004      	beq.n	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8005d44:	e01c      	b.n	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d46:	f7ff f919 	bl	8004f7c <HAL_RCC_GetPCLK1Freq>
 8005d4a:	61f8      	str	r0, [r7, #28]
          break;
 8005d4c:	e01d      	b.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d4e:	f7ff f87d 	bl	8004e4c <HAL_RCC_GetSysClockFreq>
 8005d52:	61f8      	str	r0, [r7, #28]
          break;
 8005d54:	e019      	b.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d56:	4b4a      	ldr	r3, [pc, #296]	; (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d62:	d10f      	bne.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8005d64:	4b47      	ldr	r3, [pc, #284]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8005d66:	61fb      	str	r3, [r7, #28]
          break;
 8005d68:	e00c      	b.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d6a:	4b45      	ldr	r3, [pc, #276]	; (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d70:	f003 0302 	and.w	r3, r3, #2
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d107      	bne.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8005d78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d7c:	61fb      	str	r3, [r7, #28]
          break;
 8005d7e:	e003      	b.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8005d80:	bf00      	nop
 8005d82:	e1d5      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005d84:	bf00      	nop
 8005d86:	e1d3      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005d88:	bf00      	nop
        break;
 8005d8a:	e1d1      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005d8c:	4b3c      	ldr	r3, [pc, #240]	; (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d96:	613b      	str	r3, [r7, #16]
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d9e:	d00c      	beq.n	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005da6:	d864      	bhi.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dae:	d008      	beq.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005db6:	d030      	beq.n	8005e1a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8005db8:	e05b      	b.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005dba:	f7ff f847 	bl	8004e4c <HAL_RCC_GetSysClockFreq>
 8005dbe:	61f8      	str	r0, [r7, #28]
          break;
 8005dc0:	e05c      	b.n	8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8005dc2:	4b2f      	ldr	r3, [pc, #188]	; (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dce:	d152      	bne.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8005dd0:	4b2b      	ldr	r3, [pc, #172]	; (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d04c      	beq.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005ddc:	4b28      	ldr	r3, [pc, #160]	; (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	0a1b      	lsrs	r3, r3, #8
 8005de2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005de6:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	fb03 f202 	mul.w	r2, r3, r2
 8005df0:	4b23      	ldr	r3, [pc, #140]	; (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	091b      	lsrs	r3, r3, #4
 8005df6:	f003 0307 	and.w	r3, r3, #7
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e00:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005e02:	4b1f      	ldr	r3, [pc, #124]	; (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	0e5b      	lsrs	r3, r3, #25
 8005e08:	f003 0303 	and.w	r3, r3, #3
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	005b      	lsls	r3, r3, #1
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e16:	61fb      	str	r3, [r7, #28]
          break;
 8005e18:	e02d      	b.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8005e1a:	4b19      	ldr	r3, [pc, #100]	; (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e26:	d128      	bne.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8005e28:	4b15      	ldr	r3, [pc, #84]	; (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d022      	beq.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005e34:	4b12      	ldr	r3, [pc, #72]	; (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	0a1b      	lsrs	r3, r3, #8
 8005e3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e3e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	fb03 f202 	mul.w	r2, r3, r2
 8005e48:	4b0d      	ldr	r3, [pc, #52]	; (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	091b      	lsrs	r3, r3, #4
 8005e4e:	f003 0307 	and.w	r3, r3, #7
 8005e52:	3301      	adds	r3, #1
 8005e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e58:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8005e5a:	4b09      	ldr	r3, [pc, #36]	; (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	0e5b      	lsrs	r3, r3, #25
 8005e60:	f003 0303 	and.w	r3, r3, #3
 8005e64:	3301      	adds	r3, #1
 8005e66:	005b      	lsls	r3, r3, #1
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6e:	61fb      	str	r3, [r7, #28]
          break;
 8005e70:	e003      	b.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8005e72:	bf00      	nop
 8005e74:	e15c      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005e76:	bf00      	nop
 8005e78:	e15a      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005e7a:	bf00      	nop
        break;
 8005e7c:	e158      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8005e7e:	bf00      	nop
 8005e80:	40021000 	.word	0x40021000
 8005e84:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005e88:	4b9d      	ldr	r3, [pc, #628]	; (8006100 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e92:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d103      	bne.n	8005ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005e9a:	f7ff f885 	bl	8004fa8 <HAL_RCC_GetPCLK2Freq>
 8005e9e:	61f8      	str	r0, [r7, #28]
        break;
 8005ea0:	e146      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8005ea2:	f7fe ffd3 	bl	8004e4c <HAL_RCC_GetSysClockFreq>
 8005ea6:	61f8      	str	r0, [r7, #28]
        break;
 8005ea8:	e142      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005eaa:	4b95      	ldr	r3, [pc, #596]	; (8006100 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005eb4:	613b      	str	r3, [r7, #16]
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ebc:	d013      	beq.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ec4:	d819      	bhi.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d004      	beq.n	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed2:	d004      	beq.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8005ed4:	e011      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005ed6:	f7ff f851 	bl	8004f7c <HAL_RCC_GetPCLK1Freq>
 8005eda:	61f8      	str	r0, [r7, #28]
          break;
 8005edc:	e010      	b.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8005ede:	f7fe ffb5 	bl	8004e4c <HAL_RCC_GetSysClockFreq>
 8005ee2:	61f8      	str	r0, [r7, #28]
          break;
 8005ee4:	e00c      	b.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ee6:	4b86      	ldr	r3, [pc, #536]	; (8006100 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ef2:	d104      	bne.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8005ef4:	4b83      	ldr	r3, [pc, #524]	; (8006104 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005ef6:	61fb      	str	r3, [r7, #28]
          break;
 8005ef8:	e001      	b.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8005efa:	bf00      	nop
 8005efc:	e118      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005efe:	bf00      	nop
        break;
 8005f00:	e116      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005f02:	4b7f      	ldr	r3, [pc, #508]	; (8006100 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005f0c:	613b      	str	r3, [r7, #16]
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f14:	d013      	beq.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f1c:	d819      	bhi.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d004      	beq.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f2a:	d004      	beq.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8005f2c:	e011      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f2e:	f7ff f825 	bl	8004f7c <HAL_RCC_GetPCLK1Freq>
 8005f32:	61f8      	str	r0, [r7, #28]
          break;
 8005f34:	e010      	b.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f36:	f7fe ff89 	bl	8004e4c <HAL_RCC_GetSysClockFreq>
 8005f3a:	61f8      	str	r0, [r7, #28]
          break;
 8005f3c:	e00c      	b.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f3e:	4b70      	ldr	r3, [pc, #448]	; (8006100 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f4a:	d104      	bne.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8005f4c:	4b6d      	ldr	r3, [pc, #436]	; (8006104 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005f4e:	61fb      	str	r3, [r7, #28]
          break;
 8005f50:	e001      	b.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8005f52:	bf00      	nop
 8005f54:	e0ec      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005f56:	bf00      	nop
        break;
 8005f58:	e0ea      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005f5a:	4b69      	ldr	r3, [pc, #420]	; (8006100 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f64:	613b      	str	r3, [r7, #16]
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f6c:	d013      	beq.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f74:	d819      	bhi.n	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d004      	beq.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f82:	d004      	beq.n	8005f8e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8005f84:	e011      	b.n	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f86:	f7fe fff9 	bl	8004f7c <HAL_RCC_GetPCLK1Freq>
 8005f8a:	61f8      	str	r0, [r7, #28]
          break;
 8005f8c:	e010      	b.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f8e:	f7fe ff5d 	bl	8004e4c <HAL_RCC_GetSysClockFreq>
 8005f92:	61f8      	str	r0, [r7, #28]
          break;
 8005f94:	e00c      	b.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f96:	4b5a      	ldr	r3, [pc, #360]	; (8006100 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fa2:	d104      	bne.n	8005fae <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8005fa4:	4b57      	ldr	r3, [pc, #348]	; (8006104 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005fa6:	61fb      	str	r3, [r7, #28]
          break;
 8005fa8:	e001      	b.n	8005fae <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8005faa:	bf00      	nop
 8005fac:	e0c0      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005fae:	bf00      	nop
        break;
 8005fb0:	e0be      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005fb2:	4b53      	ldr	r3, [pc, #332]	; (8006100 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005fbc:	613b      	str	r3, [r7, #16]
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005fc4:	d02c      	beq.n	8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005fcc:	d833      	bhi.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005fd4:	d01a      	beq.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005fdc:	d82b      	bhi.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d004      	beq.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fea:	d004      	beq.n	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8005fec:	e023      	b.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005fee:	f7fe ffc5 	bl	8004f7c <HAL_RCC_GetPCLK1Freq>
 8005ff2:	61f8      	str	r0, [r7, #28]
          break;
 8005ff4:	e026      	b.n	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005ff6:	4b42      	ldr	r3, [pc, #264]	; (8006100 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b02      	cmp	r3, #2
 8006002:	d11a      	bne.n	800603a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8006004:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006008:	61fb      	str	r3, [r7, #28]
          break;
 800600a:	e016      	b.n	800603a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800600c:	4b3c      	ldr	r3, [pc, #240]	; (8006100 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006018:	d111      	bne.n	800603e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 800601a:	4b3a      	ldr	r3, [pc, #232]	; (8006104 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800601c:	61fb      	str	r3, [r7, #28]
          break;
 800601e:	e00e      	b.n	800603e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006020:	4b37      	ldr	r3, [pc, #220]	; (8006100 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006026:	f003 0302 	and.w	r3, r3, #2
 800602a:	2b02      	cmp	r3, #2
 800602c:	d109      	bne.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 800602e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006032:	61fb      	str	r3, [r7, #28]
          break;
 8006034:	e005      	b.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8006036:	bf00      	nop
 8006038:	e07a      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800603a:	bf00      	nop
 800603c:	e078      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800603e:	bf00      	nop
 8006040:	e076      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006042:	bf00      	nop
        break;
 8006044:	e074      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006046:	4b2e      	ldr	r3, [pc, #184]	; (8006100 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800604c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006050:	613b      	str	r3, [r7, #16]
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006058:	d02c      	beq.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006060:	d833      	bhi.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006068:	d01a      	beq.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006070:	d82b      	bhi.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d004      	beq.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800607e:	d004      	beq.n	800608a <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8006080:	e023      	b.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006082:	f7fe ff7b 	bl	8004f7c <HAL_RCC_GetPCLK1Freq>
 8006086:	61f8      	str	r0, [r7, #28]
          break;
 8006088:	e026      	b.n	80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800608a:	4b1d      	ldr	r3, [pc, #116]	; (8006100 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800608c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006090:	f003 0302 	and.w	r3, r3, #2
 8006094:	2b02      	cmp	r3, #2
 8006096:	d11a      	bne.n	80060ce <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8006098:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800609c:	61fb      	str	r3, [r7, #28]
          break;
 800609e:	e016      	b.n	80060ce <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060a0:	4b17      	ldr	r3, [pc, #92]	; (8006100 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ac:	d111      	bne.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 80060ae:	4b15      	ldr	r3, [pc, #84]	; (8006104 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80060b0:	61fb      	str	r3, [r7, #28]
          break;
 80060b2:	e00e      	b.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80060b4:	4b12      	ldr	r3, [pc, #72]	; (8006100 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80060b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d109      	bne.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 80060c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060c6:	61fb      	str	r3, [r7, #28]
          break;
 80060c8:	e005      	b.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 80060ca:	bf00      	nop
 80060cc:	e030      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80060ce:	bf00      	nop
 80060d0:	e02e      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80060d2:	bf00      	nop
 80060d4:	e02c      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80060d6:	bf00      	nop
        break;
 80060d8:	e02a      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 80060da:	4b09      	ldr	r3, [pc, #36]	; (8006100 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80060dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80060e4:	613b      	str	r3, [r7, #16]
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d004      	beq.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060f2:	d009      	beq.n	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 80060f4:	e012      	b.n	800611c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 80060f6:	f7fe ff41 	bl	8004f7c <HAL_RCC_GetPCLK1Freq>
 80060fa:	61f8      	str	r0, [r7, #28]
          break;
 80060fc:	e00e      	b.n	800611c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 80060fe:	bf00      	nop
 8006100:	40021000 	.word	0x40021000
 8006104:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006108:	4b0c      	ldr	r3, [pc, #48]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006114:	d101      	bne.n	800611a <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8006116:	4b0a      	ldr	r3, [pc, #40]	; (8006140 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006118:	61fb      	str	r3, [r7, #28]
          break;
 800611a:	bf00      	nop
        break;
 800611c:	e008      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800611e:	bf00      	nop
 8006120:	e006      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8006122:	bf00      	nop
 8006124:	e004      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8006126:	bf00      	nop
 8006128:	e002      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800612a:	bf00      	nop
 800612c:	e000      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800612e:	bf00      	nop
    }
  }

  return(frequency);
 8006130:	69fb      	ldr	r3, [r7, #28]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3720      	adds	r7, #32
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	40021000 	.word	0x40021000
 8006140:	00f42400 	.word	0x00f42400

08006144 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006152:	4b75      	ldr	r3, [pc, #468]	; (8006328 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	f003 0303 	and.w	r3, r3, #3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d018      	beq.n	8006190 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800615e:	4b72      	ldr	r3, [pc, #456]	; (8006328 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	f003 0203 	and.w	r2, r3, #3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	429a      	cmp	r2, r3
 800616c:	d10d      	bne.n	800618a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
       ||
 8006172:	2b00      	cmp	r3, #0
 8006174:	d009      	beq.n	800618a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006176:	4b6c      	ldr	r3, [pc, #432]	; (8006328 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	091b      	lsrs	r3, r3, #4
 800617c:	f003 0307 	and.w	r3, r3, #7
 8006180:	1c5a      	adds	r2, r3, #1
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
       ||
 8006186:	429a      	cmp	r2, r3
 8006188:	d047      	beq.n	800621a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	73fb      	strb	r3, [r7, #15]
 800618e:	e044      	b.n	800621a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b03      	cmp	r3, #3
 8006196:	d018      	beq.n	80061ca <RCCEx_PLLSAI1_Config+0x86>
 8006198:	2b03      	cmp	r3, #3
 800619a:	d825      	bhi.n	80061e8 <RCCEx_PLLSAI1_Config+0xa4>
 800619c:	2b01      	cmp	r3, #1
 800619e:	d002      	beq.n	80061a6 <RCCEx_PLLSAI1_Config+0x62>
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d009      	beq.n	80061b8 <RCCEx_PLLSAI1_Config+0x74>
 80061a4:	e020      	b.n	80061e8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80061a6:	4b60      	ldr	r3, [pc, #384]	; (8006328 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d11d      	bne.n	80061ee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061b6:	e01a      	b.n	80061ee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80061b8:	4b5b      	ldr	r3, [pc, #364]	; (8006328 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d116      	bne.n	80061f2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061c8:	e013      	b.n	80061f2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80061ca:	4b57      	ldr	r3, [pc, #348]	; (8006328 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10f      	bne.n	80061f6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80061d6:	4b54      	ldr	r3, [pc, #336]	; (8006328 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d109      	bne.n	80061f6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80061e6:	e006      	b.n	80061f6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	73fb      	strb	r3, [r7, #15]
      break;
 80061ec:	e004      	b.n	80061f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80061ee:	bf00      	nop
 80061f0:	e002      	b.n	80061f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80061f2:	bf00      	nop
 80061f4:	e000      	b.n	80061f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80061f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10d      	bne.n	800621a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80061fe:	4b4a      	ldr	r3, [pc, #296]	; (8006328 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6819      	ldr	r1, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	3b01      	subs	r3, #1
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	430b      	orrs	r3, r1
 8006214:	4944      	ldr	r1, [pc, #272]	; (8006328 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006216:	4313      	orrs	r3, r2
 8006218:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800621a:	7bfb      	ldrb	r3, [r7, #15]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d17d      	bne.n	800631c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006220:	4b41      	ldr	r3, [pc, #260]	; (8006328 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a40      	ldr	r2, [pc, #256]	; (8006328 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006226:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800622a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800622c:	f7fc fdd6 	bl	8002ddc <HAL_GetTick>
 8006230:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006232:	e009      	b.n	8006248 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006234:	f7fc fdd2 	bl	8002ddc <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	2b02      	cmp	r3, #2
 8006240:	d902      	bls.n	8006248 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	73fb      	strb	r3, [r7, #15]
        break;
 8006246:	e005      	b.n	8006254 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006248:	4b37      	ldr	r3, [pc, #220]	; (8006328 <RCCEx_PLLSAI1_Config+0x1e4>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1ef      	bne.n	8006234 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006254:	7bfb      	ldrb	r3, [r7, #15]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d160      	bne.n	800631c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d111      	bne.n	8006284 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006260:	4b31      	ldr	r3, [pc, #196]	; (8006328 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	6892      	ldr	r2, [r2, #8]
 8006270:	0211      	lsls	r1, r2, #8
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	68d2      	ldr	r2, [r2, #12]
 8006276:	0912      	lsrs	r2, r2, #4
 8006278:	0452      	lsls	r2, r2, #17
 800627a:	430a      	orrs	r2, r1
 800627c:	492a      	ldr	r1, [pc, #168]	; (8006328 <RCCEx_PLLSAI1_Config+0x1e4>)
 800627e:	4313      	orrs	r3, r2
 8006280:	610b      	str	r3, [r1, #16]
 8006282:	e027      	b.n	80062d4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d112      	bne.n	80062b0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800628a:	4b27      	ldr	r3, [pc, #156]	; (8006328 <RCCEx_PLLSAI1_Config+0x1e4>)
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006292:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	6892      	ldr	r2, [r2, #8]
 800629a:	0211      	lsls	r1, r2, #8
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	6912      	ldr	r2, [r2, #16]
 80062a0:	0852      	lsrs	r2, r2, #1
 80062a2:	3a01      	subs	r2, #1
 80062a4:	0552      	lsls	r2, r2, #21
 80062a6:	430a      	orrs	r2, r1
 80062a8:	491f      	ldr	r1, [pc, #124]	; (8006328 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	610b      	str	r3, [r1, #16]
 80062ae:	e011      	b.n	80062d4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80062b0:	4b1d      	ldr	r3, [pc, #116]	; (8006328 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80062b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	6892      	ldr	r2, [r2, #8]
 80062c0:	0211      	lsls	r1, r2, #8
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	6952      	ldr	r2, [r2, #20]
 80062c6:	0852      	lsrs	r2, r2, #1
 80062c8:	3a01      	subs	r2, #1
 80062ca:	0652      	lsls	r2, r2, #25
 80062cc:	430a      	orrs	r2, r1
 80062ce:	4916      	ldr	r1, [pc, #88]	; (8006328 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062d0:	4313      	orrs	r3, r2
 80062d2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80062d4:	4b14      	ldr	r3, [pc, #80]	; (8006328 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a13      	ldr	r2, [pc, #76]	; (8006328 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80062de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062e0:	f7fc fd7c 	bl	8002ddc <HAL_GetTick>
 80062e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80062e6:	e009      	b.n	80062fc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80062e8:	f7fc fd78 	bl	8002ddc <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d902      	bls.n	80062fc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	73fb      	strb	r3, [r7, #15]
          break;
 80062fa:	e005      	b.n	8006308 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80062fc:	4b0a      	ldr	r3, [pc, #40]	; (8006328 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d0ef      	beq.n	80062e8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006308:	7bfb      	ldrb	r3, [r7, #15]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d106      	bne.n	800631c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800630e:	4b06      	ldr	r3, [pc, #24]	; (8006328 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006310:	691a      	ldr	r2, [r3, #16]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	4904      	ldr	r1, [pc, #16]	; (8006328 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006318:	4313      	orrs	r3, r2
 800631a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800631c:	7bfb      	ldrb	r3, [r7, #15]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	40021000 	.word	0x40021000

0800632c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006336:	2300      	movs	r3, #0
 8006338:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800633a:	4b6a      	ldr	r3, [pc, #424]	; (80064e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	f003 0303 	and.w	r3, r3, #3
 8006342:	2b00      	cmp	r3, #0
 8006344:	d018      	beq.n	8006378 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006346:	4b67      	ldr	r3, [pc, #412]	; (80064e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	f003 0203 	and.w	r2, r3, #3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	429a      	cmp	r2, r3
 8006354:	d10d      	bne.n	8006372 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
       ||
 800635a:	2b00      	cmp	r3, #0
 800635c:	d009      	beq.n	8006372 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800635e:	4b61      	ldr	r3, [pc, #388]	; (80064e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	091b      	lsrs	r3, r3, #4
 8006364:	f003 0307 	and.w	r3, r3, #7
 8006368:	1c5a      	adds	r2, r3, #1
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
       ||
 800636e:	429a      	cmp	r2, r3
 8006370:	d047      	beq.n	8006402 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	73fb      	strb	r3, [r7, #15]
 8006376:	e044      	b.n	8006402 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b03      	cmp	r3, #3
 800637e:	d018      	beq.n	80063b2 <RCCEx_PLLSAI2_Config+0x86>
 8006380:	2b03      	cmp	r3, #3
 8006382:	d825      	bhi.n	80063d0 <RCCEx_PLLSAI2_Config+0xa4>
 8006384:	2b01      	cmp	r3, #1
 8006386:	d002      	beq.n	800638e <RCCEx_PLLSAI2_Config+0x62>
 8006388:	2b02      	cmp	r3, #2
 800638a:	d009      	beq.n	80063a0 <RCCEx_PLLSAI2_Config+0x74>
 800638c:	e020      	b.n	80063d0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800638e:	4b55      	ldr	r3, [pc, #340]	; (80064e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	2b00      	cmp	r3, #0
 8006398:	d11d      	bne.n	80063d6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800639e:	e01a      	b.n	80063d6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80063a0:	4b50      	ldr	r3, [pc, #320]	; (80064e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d116      	bne.n	80063da <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063b0:	e013      	b.n	80063da <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80063b2:	4b4c      	ldr	r3, [pc, #304]	; (80064e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10f      	bne.n	80063de <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80063be:	4b49      	ldr	r3, [pc, #292]	; (80064e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d109      	bne.n	80063de <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80063ce:	e006      	b.n	80063de <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	73fb      	strb	r3, [r7, #15]
      break;
 80063d4:	e004      	b.n	80063e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80063d6:	bf00      	nop
 80063d8:	e002      	b.n	80063e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80063da:	bf00      	nop
 80063dc:	e000      	b.n	80063e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80063de:	bf00      	nop
    }

    if(status == HAL_OK)
 80063e0:	7bfb      	ldrb	r3, [r7, #15]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d10d      	bne.n	8006402 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80063e6:	4b3f      	ldr	r3, [pc, #252]	; (80064e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6819      	ldr	r1, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	3b01      	subs	r3, #1
 80063f8:	011b      	lsls	r3, r3, #4
 80063fa:	430b      	orrs	r3, r1
 80063fc:	4939      	ldr	r1, [pc, #228]	; (80064e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006402:	7bfb      	ldrb	r3, [r7, #15]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d167      	bne.n	80064d8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006408:	4b36      	ldr	r3, [pc, #216]	; (80064e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a35      	ldr	r2, [pc, #212]	; (80064e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800640e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006412:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006414:	f7fc fce2 	bl	8002ddc <HAL_GetTick>
 8006418:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800641a:	e009      	b.n	8006430 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800641c:	f7fc fcde 	bl	8002ddc <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b02      	cmp	r3, #2
 8006428:	d902      	bls.n	8006430 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	73fb      	strb	r3, [r7, #15]
        break;
 800642e:	e005      	b.n	800643c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006430:	4b2c      	ldr	r3, [pc, #176]	; (80064e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1ef      	bne.n	800641c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800643c:	7bfb      	ldrb	r3, [r7, #15]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d14a      	bne.n	80064d8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d111      	bne.n	800646c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006448:	4b26      	ldr	r3, [pc, #152]	; (80064e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800644a:	695b      	ldr	r3, [r3, #20]
 800644c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	6892      	ldr	r2, [r2, #8]
 8006458:	0211      	lsls	r1, r2, #8
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	68d2      	ldr	r2, [r2, #12]
 800645e:	0912      	lsrs	r2, r2, #4
 8006460:	0452      	lsls	r2, r2, #17
 8006462:	430a      	orrs	r2, r1
 8006464:	491f      	ldr	r1, [pc, #124]	; (80064e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006466:	4313      	orrs	r3, r2
 8006468:	614b      	str	r3, [r1, #20]
 800646a:	e011      	b.n	8006490 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800646c:	4b1d      	ldr	r3, [pc, #116]	; (80064e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800646e:	695b      	ldr	r3, [r3, #20]
 8006470:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006474:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	6892      	ldr	r2, [r2, #8]
 800647c:	0211      	lsls	r1, r2, #8
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	6912      	ldr	r2, [r2, #16]
 8006482:	0852      	lsrs	r2, r2, #1
 8006484:	3a01      	subs	r2, #1
 8006486:	0652      	lsls	r2, r2, #25
 8006488:	430a      	orrs	r2, r1
 800648a:	4916      	ldr	r1, [pc, #88]	; (80064e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800648c:	4313      	orrs	r3, r2
 800648e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006490:	4b14      	ldr	r3, [pc, #80]	; (80064e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a13      	ldr	r2, [pc, #76]	; (80064e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800649a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800649c:	f7fc fc9e 	bl	8002ddc <HAL_GetTick>
 80064a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80064a2:	e009      	b.n	80064b8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80064a4:	f7fc fc9a 	bl	8002ddc <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d902      	bls.n	80064b8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	73fb      	strb	r3, [r7, #15]
          break;
 80064b6:	e005      	b.n	80064c4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80064b8:	4b0a      	ldr	r3, [pc, #40]	; (80064e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d0ef      	beq.n	80064a4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d106      	bne.n	80064d8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80064ca:	4b06      	ldr	r3, [pc, #24]	; (80064e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064cc:	695a      	ldr	r2, [r3, #20]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	4904      	ldr	r1, [pc, #16]	; (80064e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80064d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	40021000 	.word	0x40021000

080064e8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b089      	sub	sp, #36	; 0x24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80064f2:	2300      	movs	r3, #0
 80064f4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80064f6:	2300      	movs	r3, #0
 80064f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006504:	d10c      	bne.n	8006520 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006506:	4b6e      	ldr	r3, [pc, #440]	; (80066c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800650c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006510:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006518:	d112      	bne.n	8006540 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800651a:	4b6a      	ldr	r3, [pc, #424]	; (80066c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800651c:	61fb      	str	r3, [r7, #28]
 800651e:	e00f      	b.n	8006540 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006526:	d10b      	bne.n	8006540 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006528:	4b65      	ldr	r3, [pc, #404]	; (80066c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800652a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800652e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006532:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800653a:	d101      	bne.n	8006540 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800653c:	4b61      	ldr	r3, [pc, #388]	; (80066c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800653e:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	2b00      	cmp	r3, #0
 8006544:	f040 80b4 	bne.w	80066b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006552:	d003      	beq.n	800655c <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800655a:	d135      	bne.n	80065c8 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800655c:	4b58      	ldr	r3, [pc, #352]	; (80066c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006564:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006568:	f040 80a1 	bne.w	80066ae <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 800656c:	4b54      	ldr	r3, [pc, #336]	; (80066c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006574:	2b00      	cmp	r3, #0
 8006576:	f000 809a 	beq.w	80066ae <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800657a:	4b51      	ldr	r3, [pc, #324]	; (80066c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	091b      	lsrs	r3, r3, #4
 8006580:	f003 0307 	and.w	r3, r3, #7
 8006584:	3301      	adds	r3, #1
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	fbb2 f3f3 	udiv	r3, r2, r3
 800658c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800658e:	4b4c      	ldr	r3, [pc, #304]	; (80066c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	0a1b      	lsrs	r3, r3, #8
 8006594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006598:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10a      	bne.n	80065b6 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80065a0:	4b47      	ldr	r3, [pc, #284]	; (80066c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d002      	beq.n	80065b2 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 80065ac:	2311      	movs	r3, #17
 80065ae:	617b      	str	r3, [r7, #20]
 80065b0:	e001      	b.n	80065b6 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 80065b2:	2307      	movs	r3, #7
 80065b4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	fb03 f202 	mul.w	r2, r3, r2
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c4:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80065c6:	e072      	b.n	80066ae <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d133      	bne.n	8006636 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80065ce:	4b3c      	ldr	r3, [pc, #240]	; (80066c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065da:	d169      	bne.n	80066b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80065dc:	4b38      	ldr	r3, [pc, #224]	; (80066c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d063      	beq.n	80066b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80065e8:	4b35      	ldr	r3, [pc, #212]	; (80066c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	091b      	lsrs	r3, r3, #4
 80065ee:	f003 0307 	and.w	r3, r3, #7
 80065f2:	3301      	adds	r3, #1
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065fa:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80065fc:	4b30      	ldr	r3, [pc, #192]	; (80066c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	0a1b      	lsrs	r3, r3, #8
 8006602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006606:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10a      	bne.n	8006624 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800660e:	4b2c      	ldr	r3, [pc, #176]	; (80066c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d002      	beq.n	8006620 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 800661a:	2311      	movs	r3, #17
 800661c:	617b      	str	r3, [r7, #20]
 800661e:	e001      	b.n	8006624 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8006620:	2307      	movs	r3, #7
 8006622:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	fb03 f202 	mul.w	r2, r3, r2
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006632:	61fb      	str	r3, [r7, #28]
 8006634:	e03c      	b.n	80066b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800663c:	d003      	beq.n	8006646 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006644:	d134      	bne.n	80066b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8006646:	4b1e      	ldr	r3, [pc, #120]	; (80066c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800664e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006652:	d12d      	bne.n	80066b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8006654:	4b1a      	ldr	r3, [pc, #104]	; (80066c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d027      	beq.n	80066b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006660:	4b17      	ldr	r3, [pc, #92]	; (80066c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	091b      	lsrs	r3, r3, #4
 8006666:	f003 0307 	and.w	r3, r3, #7
 800666a:	3301      	adds	r3, #1
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006672:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006674:	4b12      	ldr	r3, [pc, #72]	; (80066c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	0a1b      	lsrs	r3, r3, #8
 800667a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800667e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d10a      	bne.n	800669c <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006686:	4b0e      	ldr	r3, [pc, #56]	; (80066c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d002      	beq.n	8006698 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8006692:	2311      	movs	r3, #17
 8006694:	617b      	str	r3, [r7, #20]
 8006696:	e001      	b.n	800669c <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8006698:	2307      	movs	r3, #7
 800669a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	fb03 f202 	mul.w	r2, r3, r2
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066aa:	61fb      	str	r3, [r7, #28]
 80066ac:	e000      	b.n	80066b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80066ae:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80066b0:	69fb      	ldr	r3, [r7, #28]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3724      	adds	r7, #36	; 0x24
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	40021000 	.word	0x40021000
 80066c4:	001fff68 	.word	0x001fff68

080066c8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d06c      	beq.n	80067b4 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d106      	bne.n	80066f4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7fb ff8e 	bl	8002610 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2202      	movs	r2, #2
 80066f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	22ca      	movs	r2, #202	; 0xca
 8006702:	625a      	str	r2, [r3, #36]	; 0x24
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2253      	movs	r2, #83	; 0x53
 800670a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fa49 	bl	8006ba4 <RTC_EnterInitMode>
 8006712:	4603      	mov	r3, r0
 8006714:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006716:	7bfb      	ldrb	r3, [r7, #15]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d14b      	bne.n	80067b4 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	6812      	ldr	r2, [r2, #0]
 8006726:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800672a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800672e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6899      	ldr	r1, [r3, #8]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	431a      	orrs	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	431a      	orrs	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	430a      	orrs	r2, r1
 800674c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	68d2      	ldr	r2, [r2, #12]
 8006756:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6919      	ldr	r1, [r3, #16]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	041a      	lsls	r2, r3, #16
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	430a      	orrs	r2, r1
 800676a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 fa4d 	bl	8006c0c <RTC_ExitInitMode>
 8006772:	4603      	mov	r3, r0
 8006774:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006776:	7bfb      	ldrb	r3, [r7, #15]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d11b      	bne.n	80067b4 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f022 0203 	bic.w	r2, r2, #3
 800678a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	69da      	ldr	r2, [r3, #28]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	431a      	orrs	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	22ff      	movs	r2, #255	; 0xff
 80067aa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80067be:	b590      	push	{r4, r7, lr}
 80067c0:	b087      	sub	sp, #28
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	60f8      	str	r0, [r7, #12]
 80067c6:	60b9      	str	r1, [r7, #8]
 80067c8:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d101      	bne.n	80067d8 <HAL_RTC_SetTime+0x1a>
 80067d4:	2302      	movs	r3, #2
 80067d6:	e08b      	b.n	80068f0 <HAL_RTC_SetTime+0x132>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2202      	movs	r2, #2
 80067e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	22ca      	movs	r2, #202	; 0xca
 80067ee:	625a      	str	r2, [r3, #36]	; 0x24
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2253      	movs	r2, #83	; 0x53
 80067f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f000 f9d3 	bl	8006ba4 <RTC_EnterInitMode>
 80067fe:	4603      	mov	r3, r0
 8006800:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006802:	7cfb      	ldrb	r3, [r7, #19]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d163      	bne.n	80068d0 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d126      	bne.n	800685c <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006818:	2b00      	cmp	r3, #0
 800681a:	d102      	bne.n	8006822 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	2200      	movs	r2, #0
 8006820:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	4618      	mov	r0, r3
 8006828:	f000 fa2e 	bl	8006c88 <RTC_ByteToBcd2>
 800682c:	4603      	mov	r3, r0
 800682e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	785b      	ldrb	r3, [r3, #1]
 8006834:	4618      	mov	r0, r3
 8006836:	f000 fa27 	bl	8006c88 <RTC_ByteToBcd2>
 800683a:	4603      	mov	r3, r0
 800683c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800683e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	789b      	ldrb	r3, [r3, #2]
 8006844:	4618      	mov	r0, r3
 8006846:	f000 fa1f 	bl	8006c88 <RTC_ByteToBcd2>
 800684a:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800684c:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	78db      	ldrb	r3, [r3, #3]
 8006854:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006856:	4313      	orrs	r3, r2
 8006858:	617b      	str	r3, [r7, #20]
 800685a:	e018      	b.n	800688e <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006866:	2b00      	cmp	r3, #0
 8006868:	d102      	bne.n	8006870 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2200      	movs	r2, #0
 800686e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	785b      	ldrb	r3, [r3, #1]
 800687a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800687c:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006882:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	78db      	ldrb	r3, [r3, #3]
 8006888:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800688a:	4313      	orrs	r3, r2
 800688c:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006898:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800689c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689a      	ldr	r2, [r3, #8]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80068ac:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	6899      	ldr	r1, [r3, #8]
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	68da      	ldr	r2, [r3, #12]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	431a      	orrs	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	430a      	orrs	r2, r1
 80068c4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f000 f9a0 	bl	8006c0c <RTC_ExitInitMode>
 80068cc:	4603      	mov	r3, r0
 80068ce:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	22ff      	movs	r2, #255	; 0xff
 80068d6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80068d8:	7cfb      	ldrb	r3, [r7, #19]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d103      	bne.n	80068e6 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80068ee:	7cfb      	ldrb	r3, [r7, #19]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	371c      	adds	r7, #28
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd90      	pop	{r4, r7, pc}

080068f8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006926:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800692a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	0c1b      	lsrs	r3, r3, #16
 8006930:	b2db      	uxtb	r3, r3
 8006932:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006936:	b2da      	uxtb	r2, r3
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	0a1b      	lsrs	r3, r3, #8
 8006940:	b2db      	uxtb	r3, r3
 8006942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006946:	b2da      	uxtb	r2, r3
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	b2db      	uxtb	r3, r3
 8006950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006954:	b2da      	uxtb	r2, r3
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	0d9b      	lsrs	r3, r3, #22
 800695e:	b2db      	uxtb	r3, r3
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	b2da      	uxtb	r2, r3
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d11a      	bne.n	80069a6 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	4618      	mov	r0, r3
 8006976:	f000 f9a7 	bl	8006cc8 <RTC_Bcd2ToByte>
 800697a:	4603      	mov	r3, r0
 800697c:	461a      	mov	r2, r3
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	785b      	ldrb	r3, [r3, #1]
 8006986:	4618      	mov	r0, r3
 8006988:	f000 f99e 	bl	8006cc8 <RTC_Bcd2ToByte>
 800698c:	4603      	mov	r3, r0
 800698e:	461a      	mov	r2, r3
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	789b      	ldrb	r3, [r3, #2]
 8006998:	4618      	mov	r0, r3
 800699a:	f000 f995 	bl	8006cc8 <RTC_Bcd2ToByte>
 800699e:	4603      	mov	r3, r0
 80069a0:	461a      	mov	r2, r3
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3718      	adds	r7, #24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80069b0:	b590      	push	{r4, r7, lr}
 80069b2:	b087      	sub	sp, #28
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d101      	bne.n	80069ca <HAL_RTC_SetDate+0x1a>
 80069c6:	2302      	movs	r3, #2
 80069c8:	e075      	b.n	8006ab6 <HAL_RTC_SetDate+0x106>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2202      	movs	r2, #2
 80069d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d10e      	bne.n	80069fe <HAL_RTC_SetDate+0x4e>
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	785b      	ldrb	r3, [r3, #1]
 80069e4:	f003 0310 	and.w	r3, r3, #16
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d008      	beq.n	80069fe <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	785b      	ldrb	r3, [r3, #1]
 80069f0:	f023 0310 	bic.w	r3, r3, #16
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	330a      	adds	r3, #10
 80069f8:	b2da      	uxtb	r2, r3
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d11c      	bne.n	8006a3e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	78db      	ldrb	r3, [r3, #3]
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f000 f93d 	bl	8006c88 <RTC_ByteToBcd2>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	785b      	ldrb	r3, [r3, #1]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 f936 	bl	8006c88 <RTC_ByteToBcd2>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006a20:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	789b      	ldrb	r3, [r3, #2]
 8006a26:	4618      	mov	r0, r3
 8006a28:	f000 f92e 	bl	8006c88 <RTC_ByteToBcd2>
 8006a2c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006a2e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	617b      	str	r3, [r7, #20]
 8006a3c:	e00e      	b.n	8006a5c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	78db      	ldrb	r3, [r3, #3]
 8006a42:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	785b      	ldrb	r3, [r3, #1]
 8006a48:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006a4a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006a50:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	22ca      	movs	r2, #202	; 0xca
 8006a62:	625a      	str	r2, [r3, #36]	; 0x24
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2253      	movs	r2, #83	; 0x53
 8006a6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 f899 	bl	8006ba4 <RTC_EnterInitMode>
 8006a72:	4603      	mov	r3, r0
 8006a74:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006a76:	7cfb      	ldrb	r3, [r7, #19]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10c      	bne.n	8006a96 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006a86:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006a8a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 f8bd 	bl	8006c0c <RTC_ExitInitMode>
 8006a92:	4603      	mov	r3, r0
 8006a94:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	22ff      	movs	r2, #255	; 0xff
 8006a9c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006a9e:	7cfb      	ldrb	r3, [r7, #19]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d103      	bne.n	8006aac <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006ab4:	7cfb      	ldrb	r3, [r7, #19]
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	371c      	adds	r7, #28
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd90      	pop	{r4, r7, pc}

08006abe <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b086      	sub	sp, #24
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	60f8      	str	r0, [r7, #12]
 8006ac6:	60b9      	str	r1, [r7, #8]
 8006ac8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006ad4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006ad8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	0c1b      	lsrs	r3, r3, #16
 8006ade:	b2da      	uxtb	r2, r3
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	0a1b      	lsrs	r3, r3, #8
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	f003 031f 	and.w	r3, r3, #31
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	0b5b      	lsrs	r3, r3, #13
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	f003 0307 	and.w	r3, r3, #7
 8006b0c:	b2da      	uxtb	r2, r3
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d11a      	bne.n	8006b4e <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	78db      	ldrb	r3, [r3, #3]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f000 f8d3 	bl	8006cc8 <RTC_Bcd2ToByte>
 8006b22:	4603      	mov	r3, r0
 8006b24:	461a      	mov	r2, r3
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	785b      	ldrb	r3, [r3, #1]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f000 f8ca 	bl	8006cc8 <RTC_Bcd2ToByte>
 8006b34:	4603      	mov	r3, r0
 8006b36:	461a      	mov	r2, r3
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	789b      	ldrb	r3, [r3, #2]
 8006b40:	4618      	mov	r0, r3
 8006b42:	f000 f8c1 	bl	8006cc8 <RTC_Bcd2ToByte>
 8006b46:	4603      	mov	r3, r0
 8006b48:	461a      	mov	r2, r3
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3718      	adds	r7, #24
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68da      	ldr	r2, [r3, #12]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b6e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8006b70:	f7fc f934 	bl	8002ddc <HAL_GetTick>
 8006b74:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006b76:	e009      	b.n	8006b8c <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006b78:	f7fc f930 	bl	8002ddc <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b86:	d901      	bls.n	8006b8c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e007      	b.n	8006b9c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	f003 0320 	and.w	r3, r3, #32
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d0ee      	beq.n	8006b78 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bac:	2300      	movs	r3, #0
 8006bae:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d120      	bne.n	8006c00 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bc6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006bc8:	f7fc f908 	bl	8002ddc <HAL_GetTick>
 8006bcc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006bce:	e00d      	b.n	8006bec <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006bd0:	f7fc f904 	bl	8002ddc <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bde:	d905      	bls.n	8006bec <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2203      	movs	r2, #3
 8006be8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d102      	bne.n	8006c00 <RTC_EnterInitMode+0x5c>
 8006bfa:	7bfb      	ldrb	r3, [r7, #15]
 8006bfc:	2b03      	cmp	r3, #3
 8006bfe:	d1e7      	bne.n	8006bd0 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8006c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
	...

08006c0c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c14:	2300      	movs	r3, #0
 8006c16:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006c18:	4b1a      	ldr	r3, [pc, #104]	; (8006c84 <RTC_ExitInitMode+0x78>)
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	4a19      	ldr	r2, [pc, #100]	; (8006c84 <RTC_ExitInitMode+0x78>)
 8006c1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c22:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006c24:	4b17      	ldr	r3, [pc, #92]	; (8006c84 <RTC_ExitInitMode+0x78>)
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f003 0320 	and.w	r3, r3, #32
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10c      	bne.n	8006c4a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f7ff ff91 	bl	8006b58 <HAL_RTC_WaitForSynchro>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d01e      	beq.n	8006c7a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2203      	movs	r2, #3
 8006c40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	73fb      	strb	r3, [r7, #15]
 8006c48:	e017      	b.n	8006c7a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006c4a:	4b0e      	ldr	r3, [pc, #56]	; (8006c84 <RTC_ExitInitMode+0x78>)
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	4a0d      	ldr	r2, [pc, #52]	; (8006c84 <RTC_ExitInitMode+0x78>)
 8006c50:	f023 0320 	bic.w	r3, r3, #32
 8006c54:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f7ff ff7e 	bl	8006b58 <HAL_RTC_WaitForSynchro>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d005      	beq.n	8006c6e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2203      	movs	r2, #3
 8006c66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006c6e:	4b05      	ldr	r3, [pc, #20]	; (8006c84 <RTC_ExitInitMode+0x78>)
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	4a04      	ldr	r2, [pc, #16]	; (8006c84 <RTC_ExitInitMode+0x78>)
 8006c74:	f043 0320 	orr.w	r3, r3, #32
 8006c78:	6093      	str	r3, [r2, #8]
  }

  return status;
 8006c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	40002800 	.word	0x40002800

08006c88 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	4603      	mov	r3, r0
 8006c90:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006c92:	2300      	movs	r3, #0
 8006c94:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8006c96:	79fb      	ldrb	r3, [r7, #7]
 8006c98:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8006c9a:	e005      	b.n	8006ca8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8006ca2:	7afb      	ldrb	r3, [r7, #11]
 8006ca4:	3b0a      	subs	r3, #10
 8006ca6:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8006ca8:	7afb      	ldrb	r3, [r7, #11]
 8006caa:	2b09      	cmp	r3, #9
 8006cac:	d8f6      	bhi.n	8006c9c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	011b      	lsls	r3, r3, #4
 8006cb4:	b2da      	uxtb	r2, r3
 8006cb6:	7afb      	ldrb	r3, [r7, #11]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	b2db      	uxtb	r3, r3
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3714      	adds	r7, #20
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	4603      	mov	r3, r0
 8006cd0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8006cd2:	79fb      	ldrb	r3, [r7, #7]
 8006cd4:	091b      	lsrs	r3, r3, #4
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	461a      	mov	r2, r3
 8006cda:	0092      	lsls	r2, r2, #2
 8006cdc:	4413      	add	r3, r2
 8006cde:	005b      	lsls	r3, r3, #1
 8006ce0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8006ce2:	79fb      	ldrb	r3, [r7, #7]
 8006ce4:	f003 030f 	and.w	r3, r3, #15
 8006ce8:	b2da      	uxtb	r2, r3
 8006cea:	7bfb      	ldrb	r3, [r7, #15]
 8006cec:	4413      	add	r3, r2
 8006cee:	b2db      	uxtb	r3, r3
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3714      	adds	r7, #20
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <HAL_RTCEx_SetTimeStamp_IT>:
  *               The RTC TimeStamp Pin is per default PC13, but for reasons of
  *               compatibility, this parameter is required.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp_IT(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b087      	sub	sp, #28
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RTC_TimeStampPin);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d101      	bne.n	8006d16 <HAL_RTCEx_SetTimeStamp_IT+0x1a>
 8006d12:	2302      	movs	r3, #2
 8006d14:	e048      	b.n	8006da8 <HAL_RTCEx_SetTimeStamp_IT+0xac>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2202      	movs	r2, #2
 8006d22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d30:	f023 0308 	bic.w	r3, r3, #8
 8006d34:	617b      	str	r3, [r7, #20]

  tmpreg |= TimeStampEdge;
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	22ca      	movs	r2, #202	; 0xca
 8006d44:	625a      	str	r2, [r3, #36]	; 0x24
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2253      	movs	r2, #83	; 0x53
 8006d4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689a      	ldr	r2, [r3, #8]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d64:	609a      	str	r2, [r3, #8]

  /* Enable IT timestamp */
  __HAL_RTC_TIMESTAMP_ENABLE_IT(hrtc, RTC_IT_TS);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	689a      	ldr	r2, [r3, #8]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d74:	609a      	str	r2, [r3, #8]

  /* RTC timestamp Interrupt Configuration: EXTI configuration */
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_IT();
 8006d76:	4b0f      	ldr	r3, [pc, #60]	; (8006db4 <HAL_RTCEx_SetTimeStamp_IT+0xb8>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a0e      	ldr	r2, [pc, #56]	; (8006db4 <HAL_RTCEx_SetTimeStamp_IT+0xb8>)
 8006d7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d80:	6013      	str	r3, [r2, #0]
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_RISING_EDGE();
 8006d82:	4b0c      	ldr	r3, [pc, #48]	; (8006db4 <HAL_RTCEx_SetTimeStamp_IT+0xb8>)
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	4a0b      	ldr	r2, [pc, #44]	; (8006db4 <HAL_RTCEx_SetTimeStamp_IT+0xb8>)
 8006d88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d8c:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	22ff      	movs	r2, #255	; 0xff
 8006d94:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	371c      	adds	r7, #28
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	40010400 	.word	0x40010400

08006db8 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b087      	sub	sp, #28
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	3350      	adds	r3, #80	; 0x50
 8006dca:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	009a      	lsls	r2, r3, #2
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	461a      	mov	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6013      	str	r3, [r2, #0]
}
 8006dde:	bf00      	nop
 8006de0:	371c      	adds	r7, #28
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr

08006dea <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006dea:	b480      	push	{r7}
 8006dec:	b085      	sub	sp, #20
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
 8006df2:	6039      	str	r1, [r7, #0]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	3350      	adds	r3, #80	; 0x50
 8006dfa:	60fb      	str	r3, [r7, #12]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	4413      	add	r3, r2
 8006e04:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b082      	sub	sp, #8
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e022      	b.n	8006e6e <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d105      	bne.n	8006e40 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7fb fc1a 	bl	8002674 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2203      	movs	r2, #3
 8006e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f815 	bl	8006e78 <HAL_SD_InitCard>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d001      	beq.n	8006e58 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e00a      	b.n	8006e6e <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3708      	adds	r7, #8
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
	...

08006e78 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006e78:	b5b0      	push	{r4, r5, r7, lr}
 8006e7a:	b08e      	sub	sp, #56	; 0x38
 8006e7c:	af04      	add	r7, sp, #16
 8006e7e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006e80:	2300      	movs	r3, #0
 8006e82:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006e84:	2300      	movs	r3, #0
 8006e86:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006e90:	2300      	movs	r3, #0
 8006e92:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8006e94:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006e98:	f7fe fbe6 	bl	8005668 <HAL_RCCEx_GetPeriphCLKFreq>
 8006e9c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d109      	bne.n	8006eb8 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006eb2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e07b      	b.n	8006fb0 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eba:	09db      	lsrs	r3, r3, #7
 8006ebc:	4a3e      	ldr	r2, [pc, #248]	; (8006fb8 <HAL_SD_InitCard+0x140>)
 8006ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec2:	091b      	lsrs	r3, r3, #4
 8006ec4:	3b02      	subs	r3, #2
 8006ec6:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681d      	ldr	r5, [r3, #0]
 8006ecc:	466c      	mov	r4, sp
 8006ece:	f107 0314 	add.w	r3, r7, #20
 8006ed2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006ed6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006eda:	f107 0308 	add.w	r3, r7, #8
 8006ede:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	f002 fc15 	bl	8009710 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	685a      	ldr	r2, [r3, #4]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ef4:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4618      	mov	r0, r3
 8006efc:	f002 fc53 	bl	80097a6 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	685a      	ldr	r2, [r3, #4]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f0e:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	3302      	adds	r3, #2
 8006f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f1a:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8006f1c:	4a27      	ldr	r2, [pc, #156]	; (8006fbc <HAL_SD_InitCard+0x144>)
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f24:	3301      	adds	r3, #1
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7fb ff64 	bl	8002df4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f001 f859 	bl	8007fe4 <SD_PowerON>
 8006f32:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f34:	6a3b      	ldr	r3, [r7, #32]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00b      	beq.n	8006f52 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f46:	6a3b      	ldr	r3, [r7, #32]
 8006f48:	431a      	orrs	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e02e      	b.n	8006fb0 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 ff78 	bl	8007e48 <SD_InitCard>
 8006f58:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f5a:	6a3b      	ldr	r3, [r7, #32]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00b      	beq.n	8006f78 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f6c:	6a3b      	ldr	r3, [r7, #32]
 8006f6e:	431a      	orrs	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e01b      	b.n	8006fb0 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f80:	4618      	mov	r0, r3
 8006f82:	f002 fca3 	bl	80098cc <SDMMC_CmdBlockLength>
 8006f86:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f88:	6a3b      	ldr	r3, [r7, #32]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00f      	beq.n	8006fae <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a0b      	ldr	r2, [pc, #44]	; (8006fc0 <HAL_SD_InitCard+0x148>)
 8006f94:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	431a      	orrs	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e000      	b.n	8006fb0 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3728      	adds	r7, #40	; 0x28
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bdb0      	pop	{r4, r5, r7, pc}
 8006fb8:	014f8b59 	.word	0x014f8b59
 8006fbc:	00012110 	.word	0x00012110
 8006fc0:	004005ff 	.word	0x004005ff

08006fc4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b092      	sub	sp, #72	; 0x48
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
 8006fd0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006fd2:	f7fb ff03 	bl	8002ddc <HAL_GetTick>
 8006fd6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d107      	bne.n	8006ff6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e1bd      	b.n	8007372 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	f040 81b0 	bne.w	8007364 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800700a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	441a      	add	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007014:	429a      	cmp	r2, r3
 8007016:	d907      	bls.n	8007028 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e1a4      	b.n	8007372 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2203      	movs	r2, #3
 800702c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2200      	movs	r2, #0
 8007036:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800703c:	2b01      	cmp	r3, #1
 800703e:	d002      	beq.n	8007046 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007042:	025b      	lsls	r3, r3, #9
 8007044:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007046:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800704a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	025b      	lsls	r3, r3, #9
 8007050:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007052:	2390      	movs	r3, #144	; 0x90
 8007054:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007056:	2302      	movs	r3, #2
 8007058:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800705a:	2300      	movs	r3, #0
 800705c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800705e:	2301      	movs	r3, #1
 8007060:	62bb      	str	r3, [r7, #40]	; 0x28
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f107 0214 	add.w	r2, r7, #20
 800706a:	4611      	mov	r1, r2
 800706c:	4618      	mov	r0, r3
 800706e:	f002 fc01 	bl	8009874 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	2b01      	cmp	r3, #1
 8007076:	d90a      	bls.n	800708e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2202      	movs	r2, #2
 800707c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007084:	4618      	mov	r0, r3
 8007086:	f002 fc65 	bl	8009954 <SDMMC_CmdReadMultiBlock>
 800708a:	6478      	str	r0, [r7, #68]	; 0x44
 800708c:	e009      	b.n	80070a2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2201      	movs	r2, #1
 8007092:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800709a:	4618      	mov	r0, r3
 800709c:	f002 fc38 	bl	8009910 <SDMMC_CmdReadSingleBlock>
 80070a0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80070a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d012      	beq.n	80070ce <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a7a      	ldr	r2, [pc, #488]	; (8007298 <HAL_SD_ReadBlocks+0x2d4>)
 80070ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070b6:	431a      	orrs	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e151      	b.n	8007372 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80070d2:	e061      	b.n	8007198 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d03c      	beq.n	800715c <HAL_SD_ReadBlocks+0x198>
 80070e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d039      	beq.n	800715c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80070e8:	2300      	movs	r3, #0
 80070ea:	643b      	str	r3, [r7, #64]	; 0x40
 80070ec:	e033      	b.n	8007156 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f002 fb39 	bl	800976a <SDMMC_ReadFIFO>
 80070f8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80070fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007100:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007104:	3301      	adds	r3, #1
 8007106:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800710a:	3b01      	subs	r3, #1
 800710c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800710e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007110:	0a1b      	lsrs	r3, r3, #8
 8007112:	b2da      	uxtb	r2, r3
 8007114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007116:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800711a:	3301      	adds	r3, #1
 800711c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800711e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007120:	3b01      	subs	r3, #1
 8007122:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007126:	0c1b      	lsrs	r3, r3, #16
 8007128:	b2da      	uxtb	r2, r3
 800712a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800712c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800712e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007130:	3301      	adds	r3, #1
 8007132:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007136:	3b01      	subs	r3, #1
 8007138:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800713a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800713c:	0e1b      	lsrs	r3, r3, #24
 800713e:	b2da      	uxtb	r2, r3
 8007140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007142:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007146:	3301      	adds	r3, #1
 8007148:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800714a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800714c:	3b01      	subs	r3, #1
 800714e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8007150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007152:	3301      	adds	r3, #1
 8007154:	643b      	str	r3, [r7, #64]	; 0x40
 8007156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007158:	2b07      	cmp	r3, #7
 800715a:	d9c8      	bls.n	80070ee <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800715c:	f7fb fe3e 	bl	8002ddc <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007168:	429a      	cmp	r2, r3
 800716a:	d902      	bls.n	8007172 <HAL_SD_ReadBlocks+0x1ae>
 800716c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800716e:	2b00      	cmp	r3, #0
 8007170:	d112      	bne.n	8007198 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a48      	ldr	r2, [pc, #288]	; (8007298 <HAL_SD_ReadBlocks+0x2d4>)
 8007178:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007194:	2303      	movs	r3, #3
 8007196:	e0ec      	b.n	8007372 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800719e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d096      	beq.n	80070d4 <HAL_SD_ReadBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d022      	beq.n	80071fa <HAL_SD_ReadBlocks+0x236>
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d91f      	bls.n	80071fa <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071be:	2b03      	cmp	r3, #3
 80071c0:	d01b      	beq.n	80071fa <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4618      	mov	r0, r3
 80071c8:	f002 fc2a 	bl	8009a20 <SDMMC_CmdStopTransfer>
 80071cc:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80071ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d012      	beq.n	80071fa <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a2f      	ldr	r2, [pc, #188]	; (8007298 <HAL_SD_ReadBlocks+0x2d4>)
 80071da:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071e2:	431a      	orrs	r2, r3
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e0bb      	b.n	8007372 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007200:	f003 0308 	and.w	r3, r3, #8
 8007204:	2b00      	cmp	r3, #0
 8007206:	d012      	beq.n	800722e <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a22      	ldr	r2, [pc, #136]	; (8007298 <HAL_SD_ReadBlocks+0x2d4>)
 800720e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007214:	f043 0208 	orr.w	r2, r3, #8
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e0a1      	b.n	8007372 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007234:	f003 0302 	and.w	r3, r3, #2
 8007238:	2b00      	cmp	r3, #0
 800723a:	d012      	beq.n	8007262 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a15      	ldr	r2, [pc, #84]	; (8007298 <HAL_SD_ReadBlocks+0x2d4>)
 8007242:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007248:	f043 0202 	orr.w	r2, r3, #2
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e087      	b.n	8007372 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007268:	f003 0320 	and.w	r3, r3, #32
 800726c:	2b00      	cmp	r3, #0
 800726e:	d064      	beq.n	800733a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a08      	ldr	r2, [pc, #32]	; (8007298 <HAL_SD_ReadBlocks+0x2d4>)
 8007276:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727c:	f043 0220 	orr.w	r2, r3, #32
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e06d      	b.n	8007372 <HAL_SD_ReadBlocks+0x3ae>
 8007296:	bf00      	nop
 8007298:	004005ff 	.word	0x004005ff

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4618      	mov	r0, r3
 80072a2:	f002 fa62 	bl	800976a <SDMMC_ReadFIFO>
 80072a6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80072a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072aa:	b2da      	uxtb	r2, r3
 80072ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ae:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80072b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b2:	3301      	adds	r3, #1
 80072b4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80072b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072b8:	3b01      	subs	r3, #1
 80072ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80072bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072be:	0a1b      	lsrs	r3, r3, #8
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072c4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80072c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072c8:	3301      	adds	r3, #1
 80072ca:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80072cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ce:	3b01      	subs	r3, #1
 80072d0:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80072d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d4:	0c1b      	lsrs	r3, r3, #16
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072da:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80072dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072de:	3301      	adds	r3, #1
 80072e0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80072e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072e4:	3b01      	subs	r3, #1
 80072e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80072e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ea:	0e1b      	lsrs	r3, r3, #24
 80072ec:	b2da      	uxtb	r2, r3
 80072ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80072f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f4:	3301      	adds	r3, #1
 80072f6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80072f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072fa:	3b01      	subs	r3, #1
 80072fc:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80072fe:	f7fb fd6d 	bl	8002ddc <HAL_GetTick>
 8007302:	4602      	mov	r2, r0
 8007304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800730a:	429a      	cmp	r2, r3
 800730c:	d902      	bls.n	8007314 <HAL_SD_ReadBlocks+0x350>
 800730e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007310:	2b00      	cmp	r3, #0
 8007312:	d112      	bne.n	800733a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a18      	ldr	r2, [pc, #96]	; (800737c <HAL_SD_ReadBlocks+0x3b8>)
 800731a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007320:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e01b      	b.n	8007372 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007340:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d002      	beq.n	800734e <HAL_SD_ReadBlocks+0x38a>
 8007348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1a6      	bne.n	800729c <HAL_SD_ReadBlocks+0x2d8>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f240 523a 	movw	r2, #1338	; 0x53a
 8007356:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007360:	2300      	movs	r3, #0
 8007362:	e006      	b.n	8007372 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007368:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
  }
}
 8007372:	4618      	mov	r0, r3
 8007374:	3748      	adds	r7, #72	; 0x48
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	004005ff 	.word	0x004005ff

08007380 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b092      	sub	sp, #72	; 0x48
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
 800738c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800738e:	f7fb fd25 	bl	8002ddc <HAL_GetTick>
 8007392:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d107      	bne.n	80073b2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e165      	b.n	800767e <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	f040 8158 	bne.w	8007670 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80073c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	441a      	add	r2, r3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d907      	bls.n	80073e4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e14c      	b.n	800767e <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2203      	movs	r2, #3
 80073e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2200      	movs	r2, #0
 80073f2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d002      	beq.n	8007402 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80073fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fe:	025b      	lsls	r3, r3, #9
 8007400:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007402:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007406:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	025b      	lsls	r3, r3, #9
 800740c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800740e:	2390      	movs	r3, #144	; 0x90
 8007410:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007412:	2300      	movs	r3, #0
 8007414:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007416:	2300      	movs	r3, #0
 8007418:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800741a:	2301      	movs	r3, #1
 800741c:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f107 0218 	add.w	r2, r7, #24
 8007426:	4611      	mov	r1, r2
 8007428:	4618      	mov	r0, r3
 800742a:	f002 fa23 	bl	8009874 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d90a      	bls.n	800744a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2220      	movs	r2, #32
 8007438:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007440:	4618      	mov	r0, r3
 8007442:	f002 facb 	bl	80099dc <SDMMC_CmdWriteMultiBlock>
 8007446:	6478      	str	r0, [r7, #68]	; 0x44
 8007448:	e009      	b.n	800745e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2210      	movs	r2, #16
 800744e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007456:	4618      	mov	r0, r3
 8007458:	f002 fa9e 	bl	8009998 <SDMMC_CmdWriteSingleBlock>
 800745c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800745e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007460:	2b00      	cmp	r3, #0
 8007462:	d012      	beq.n	800748a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a87      	ldr	r2, [pc, #540]	; (8007688 <HAL_SD_WriteBlocks+0x308>)
 800746a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007472:	431a      	orrs	r2, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e0f9      	b.n	800767e <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800748e:	e065      	b.n	800755c <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d040      	beq.n	8007520 <HAL_SD_WriteBlocks+0x1a0>
 800749e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d03d      	beq.n	8007520 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80074a4:	2300      	movs	r3, #0
 80074a6:	643b      	str	r3, [r7, #64]	; 0x40
 80074a8:	e037      	b.n	800751a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80074aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80074b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b2:	3301      	adds	r3, #1
 80074b4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80074b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074b8:	3b01      	subs	r3, #1
 80074ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80074bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	021a      	lsls	r2, r3, #8
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80074c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ca:	3301      	adds	r3, #1
 80074cc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80074ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d0:	3b01      	subs	r3, #1
 80074d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80074d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	041a      	lsls	r2, r3, #16
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	4313      	orrs	r3, r2
 80074de:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80074e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e2:	3301      	adds	r3, #1
 80074e4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80074e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074e8:	3b01      	subs	r3, #1
 80074ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80074ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	061a      	lsls	r2, r3, #24
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80074f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074fa:	3301      	adds	r3, #1
 80074fc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80074fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007500:	3b01      	subs	r3, #1
 8007502:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f107 0214 	add.w	r2, r7, #20
 800750c:	4611      	mov	r1, r2
 800750e:	4618      	mov	r0, r3
 8007510:	f002 f938 	bl	8009784 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007516:	3301      	adds	r3, #1
 8007518:	643b      	str	r3, [r7, #64]	; 0x40
 800751a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800751c:	2b07      	cmp	r3, #7
 800751e:	d9c4      	bls.n	80074aa <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007520:	f7fb fc5c 	bl	8002ddc <HAL_GetTick>
 8007524:	4602      	mov	r2, r0
 8007526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800752c:	429a      	cmp	r2, r3
 800752e:	d902      	bls.n	8007536 <HAL_SD_WriteBlocks+0x1b6>
 8007530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007532:	2b00      	cmp	r3, #0
 8007534:	d112      	bne.n	800755c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a53      	ldr	r2, [pc, #332]	; (8007688 <HAL_SD_WriteBlocks+0x308>)
 800753c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007544:	431a      	orrs	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2200      	movs	r2, #0
 8007556:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	e090      	b.n	800767e <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007562:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8007566:	2b00      	cmp	r3, #0
 8007568:	d092      	beq.n	8007490 <HAL_SD_WriteBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007574:	2b00      	cmp	r3, #0
 8007576:	d022      	beq.n	80075be <HAL_SD_WriteBlocks+0x23e>
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d91f      	bls.n	80075be <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007582:	2b03      	cmp	r3, #3
 8007584:	d01b      	beq.n	80075be <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4618      	mov	r0, r3
 800758c:	f002 fa48 	bl	8009a20 <SDMMC_CmdStopTransfer>
 8007590:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007594:	2b00      	cmp	r3, #0
 8007596:	d012      	beq.n	80075be <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a3a      	ldr	r2, [pc, #232]	; (8007688 <HAL_SD_WriteBlocks+0x308>)
 800759e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075a6:	431a      	orrs	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e05f      	b.n	800767e <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c4:	f003 0308 	and.w	r3, r3, #8
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d012      	beq.n	80075f2 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a2d      	ldr	r2, [pc, #180]	; (8007688 <HAL_SD_WriteBlocks+0x308>)
 80075d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d8:	f043 0208 	orr.w	r2, r3, #8
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e045      	b.n	800767e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f8:	f003 0302 	and.w	r3, r3, #2
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d012      	beq.n	8007626 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a20      	ldr	r2, [pc, #128]	; (8007688 <HAL_SD_WriteBlocks+0x308>)
 8007606:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760c:	f043 0202 	orr.w	r2, r3, #2
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e02b      	b.n	800767e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800762c:	f003 0310 	and.w	r3, r3, #16
 8007630:	2b00      	cmp	r3, #0
 8007632:	d012      	beq.n	800765a <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a13      	ldr	r2, [pc, #76]	; (8007688 <HAL_SD_WriteBlocks+0x308>)
 800763a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007640:	f043 0210 	orr.w	r2, r3, #16
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e011      	b.n	800767e <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f240 523a 	movw	r2, #1338	; 0x53a
 8007662:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800766c:	2300      	movs	r3, #0
 800766e:	e006      	b.n	800767e <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007674:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
  }
}
 800767e:	4618      	mov	r0, r3
 8007680:	3748      	adds	r7, #72	; 0x48
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	004005ff 	.word	0x004005ff

0800768c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007698:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d008      	beq.n	80076ba <HAL_SD_IRQHandler+0x2e>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f003 0308 	and.w	r3, r3, #8
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d003      	beq.n	80076ba <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fd4c 	bl	8008150 <SD_Read_IT>
 80076b8:	e155      	b.n	8007966 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f000 808f 	beq.w	80077e8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076d2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	6812      	ldr	r2, [r2, #0]
 80076de:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 80076e2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80076e6:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f022 0201 	bic.w	r2, r2, #1
 80076f6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f003 0308 	and.w	r3, r3, #8
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d039      	beq.n	8007776 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f003 0302 	and.w	r3, r3, #2
 8007708:	2b00      	cmp	r3, #0
 800770a:	d104      	bne.n	8007716 <HAL_SD_IRQHandler+0x8a>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f003 0320 	and.w	r3, r3, #32
 8007712:	2b00      	cmp	r3, #0
 8007714:	d011      	beq.n	800773a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4618      	mov	r0, r3
 800771c:	f002 f980 	bl	8009a20 <SDMMC_CmdStopTransfer>
 8007720:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d008      	beq.n	800773a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	431a      	orrs	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 f91f 	bl	8007978 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f240 523a 	movw	r2, #1338	; 0x53a
 8007742:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f003 0301 	and.w	r3, r3, #1
 8007758:	2b00      	cmp	r3, #0
 800775a:	d104      	bne.n	8007766 <HAL_SD_IRQHandler+0xda>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f003 0302 	and.w	r3, r3, #2
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f002 fda6 	bl	800a2b8 <HAL_SD_RxCpltCallback>
 800776c:	e0fb      	b.n	8007966 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f002 fd98 	bl	800a2a4 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8007774:	e0f7      	b.n	8007966 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800777c:	2b00      	cmp	r3, #0
 800777e:	f000 80f2 	beq.w	8007966 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f003 0320 	and.w	r3, r3, #32
 8007788:	2b00      	cmp	r3, #0
 800778a:	d011      	beq.n	80077b0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4618      	mov	r0, r3
 8007792:	f002 f945 	bl	8009a20 <SDMMC_CmdStopTransfer>
 8007796:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d008      	beq.n	80077b0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	431a      	orrs	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f8e4 	bl	8007978 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f003 0301 	and.w	r3, r3, #1
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f040 80d5 	bne.w	8007966 <HAL_SD_IRQHandler+0x2da>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f003 0302 	and.w	r3, r3, #2
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f040 80cf 	bne.w	8007966 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f022 0208 	bic.w	r2, r2, #8
 80077d6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f002 fd5f 	bl	800a2a4 <HAL_SD_TxCpltCallback>
}
 80077e6:	e0be      	b.n	8007966 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d008      	beq.n	8007808 <HAL_SD_IRQHandler+0x17c>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f003 0308 	and.w	r3, r3, #8
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d003      	beq.n	8007808 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 fcf6 	bl	80081f2 <SD_Write_IT>
 8007806:	e0ae      	b.n	8007966 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800780e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8007812:	2b00      	cmp	r3, #0
 8007814:	f000 80a7 	beq.w	8007966 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800781e:	f003 0302 	and.w	r3, r3, #2
 8007822:	2b00      	cmp	r3, #0
 8007824:	d005      	beq.n	8007832 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782a:	f043 0202 	orr.w	r2, r3, #2
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007838:	f003 0308 	and.w	r3, r3, #8
 800783c:	2b00      	cmp	r3, #0
 800783e:	d005      	beq.n	800784c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007844:	f043 0208 	orr.w	r2, r3, #8
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007852:	f003 0320 	and.w	r3, r3, #32
 8007856:	2b00      	cmp	r3, #0
 8007858:	d005      	beq.n	8007866 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785e:	f043 0220 	orr.w	r2, r3, #32
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800786c:	f003 0310 	and.w	r3, r3, #16
 8007870:	2b00      	cmp	r3, #0
 8007872:	d005      	beq.n	8007880 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007878:	f043 0210 	orr.w	r2, r3, #16
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f240 523a 	movw	r2, #1338	; 0x53a
 8007888:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007898:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4618      	mov	r0, r3
 80078a0:	f002 f8be 	bl	8009a20 <SDMMC_CmdStopTransfer>
 80078a4:	4602      	mov	r2, r0
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078aa:	431a      	orrs	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f003 0308 	and.w	r3, r3, #8
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d00a      	beq.n	80078d0 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2201      	movs	r2, #1
 80078be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 f855 	bl	8007978 <HAL_SD_ErrorCallback>
}
 80078ce:	e04a      	b.n	8007966 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d045      	beq.n	8007966 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f003 0310 	and.w	r3, r3, #16
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d104      	bne.n	80078ee <HAL_SD_IRQHandler+0x262>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f003 0320 	and.w	r3, r3, #32
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d011      	beq.n	8007912 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078f2:	4a1f      	ldr	r2, [pc, #124]	; (8007970 <HAL_SD_IRQHandler+0x2e4>)
 80078f4:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7fb fcc8 	bl	8003290 <HAL_DMA_Abort_IT>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d02f      	beq.n	8007966 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800790a:	4618      	mov	r0, r3
 800790c:	f000 fa2e 	bl	8007d6c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007910:	e029      	b.n	8007966 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f003 0301 	and.w	r3, r3, #1
 8007918:	2b00      	cmp	r3, #0
 800791a:	d104      	bne.n	8007926 <HAL_SD_IRQHandler+0x29a>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f003 0302 	and.w	r3, r3, #2
 8007922:	2b00      	cmp	r3, #0
 8007924:	d011      	beq.n	800794a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792a:	4a12      	ldr	r2, [pc, #72]	; (8007974 <HAL_SD_IRQHandler+0x2e8>)
 800792c:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007932:	4618      	mov	r0, r3
 8007934:	f7fb fcac 	bl	8003290 <HAL_DMA_Abort_IT>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d013      	beq.n	8007966 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007942:	4618      	mov	r0, r3
 8007944:	f000 fa49 	bl	8007dda <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007948:	e00d      	b.n	8007966 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f002 fc96 	bl	800a290 <HAL_SD_AbortCallback>
}
 8007964:	e7ff      	b.n	8007966 <HAL_SD_IRQHandler+0x2da>
 8007966:	bf00      	nop
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	08007d6d 	.word	0x08007d6d
 8007974:	08007ddb 	.word	0x08007ddb

08007978 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007980:	bf00      	nop
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800799a:	0f9b      	lsrs	r3, r3, #30
 800799c:	b2da      	uxtb	r2, r3
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079a6:	0e9b      	lsrs	r3, r3, #26
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	f003 030f 	and.w	r3, r3, #15
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079b8:	0e1b      	lsrs	r3, r3, #24
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	f003 0303 	and.w	r3, r3, #3
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079ca:	0c1b      	lsrs	r3, r3, #16
 80079cc:	b2da      	uxtb	r2, r3
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079d6:	0a1b      	lsrs	r3, r3, #8
 80079d8:	b2da      	uxtb	r2, r3
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079e2:	b2da      	uxtb	r2, r3
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079ec:	0d1b      	lsrs	r3, r3, #20
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079f8:	0c1b      	lsrs	r3, r3, #16
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	f003 030f 	and.w	r3, r3, #15
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a0a:	0bdb      	lsrs	r3, r3, #15
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	f003 0301 	and.w	r3, r3, #1
 8007a12:	b2da      	uxtb	r2, r3
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a1c:	0b9b      	lsrs	r3, r3, #14
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	f003 0301 	and.w	r3, r3, #1
 8007a24:	b2da      	uxtb	r2, r3
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a2e:	0b5b      	lsrs	r3, r3, #13
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	b2da      	uxtb	r2, r3
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a40:	0b1b      	lsrs	r3, r3, #12
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	f003 0301 	and.w	r3, r3, #1
 8007a48:	b2da      	uxtb	r2, r3
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	2200      	movs	r2, #0
 8007a52:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d163      	bne.n	8007b24 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a60:	009a      	lsls	r2, r3, #2
 8007a62:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007a66:	4013      	ands	r3, r2
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007a6c:	0f92      	lsrs	r2, r2, #30
 8007a6e:	431a      	orrs	r2, r3
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a78:	0edb      	lsrs	r3, r3, #27
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	f003 0307 	and.w	r3, r3, #7
 8007a80:	b2da      	uxtb	r2, r3
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a8a:	0e1b      	lsrs	r3, r3, #24
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	f003 0307 	and.w	r3, r3, #7
 8007a92:	b2da      	uxtb	r2, r3
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a9c:	0d5b      	lsrs	r3, r3, #21
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	f003 0307 	and.w	r3, r3, #7
 8007aa4:	b2da      	uxtb	r2, r3
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007aae:	0c9b      	lsrs	r3, r3, #18
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	f003 0307 	and.w	r3, r3, #7
 8007ab6:	b2da      	uxtb	r2, r3
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ac0:	0bdb      	lsrs	r3, r3, #15
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	f003 0307 	and.w	r3, r3, #7
 8007ac8:	b2da      	uxtb	r2, r3
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	1c5a      	adds	r2, r3, #1
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	7e1b      	ldrb	r3, [r3, #24]
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	f003 0307 	and.w	r3, r3, #7
 8007ae2:	3302      	adds	r3, #2
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007aee:	fb03 f202 	mul.w	r2, r3, r2
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	7a1b      	ldrb	r3, [r3, #8]
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	f003 030f 	and.w	r3, r3, #15
 8007b00:	2201      	movs	r2, #1
 8007b02:	409a      	lsls	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007b10:	0a52      	lsrs	r2, r2, #9
 8007b12:	fb03 f202 	mul.w	r2, r3, r2
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b20:	661a      	str	r2, [r3, #96]	; 0x60
 8007b22:	e031      	b.n	8007b88 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d11d      	bne.n	8007b68 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b30:	041b      	lsls	r3, r3, #16
 8007b32:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b3a:	0c1b      	lsrs	r3, r3, #16
 8007b3c:	431a      	orrs	r2, r3
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	3301      	adds	r3, #1
 8007b48:	029a      	lsls	r2, r3, #10
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b5c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	661a      	str	r2, [r3, #96]	; 0x60
 8007b66:	e00f      	b.n	8007b88 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a58      	ldr	r2, [pc, #352]	; (8007cd0 <HAL_SD_GetCardCSD+0x344>)
 8007b6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e09d      	b.n	8007cc4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b8c:	0b9b      	lsrs	r3, r3, #14
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	b2da      	uxtb	r2, r3
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b9e:	09db      	lsrs	r3, r3, #7
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ba6:	b2da      	uxtb	r2, r3
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bb6:	b2da      	uxtb	r2, r3
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bc0:	0fdb      	lsrs	r3, r3, #31
 8007bc2:	b2da      	uxtb	r2, r3
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bcc:	0f5b      	lsrs	r3, r3, #29
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	f003 0303 	and.w	r3, r3, #3
 8007bd4:	b2da      	uxtb	r2, r3
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bde:	0e9b      	lsrs	r3, r3, #26
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	f003 0307 	and.w	r3, r3, #7
 8007be6:	b2da      	uxtb	r2, r3
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bf0:	0d9b      	lsrs	r3, r3, #22
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	f003 030f 	and.w	r3, r3, #15
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c02:	0d5b      	lsrs	r3, r3, #21
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	f003 0301 	and.w	r3, r3, #1
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c1e:	0c1b      	lsrs	r3, r3, #16
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	f003 0301 	and.w	r3, r3, #1
 8007c26:	b2da      	uxtb	r2, r3
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c32:	0bdb      	lsrs	r3, r3, #15
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	b2da      	uxtb	r2, r3
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c46:	0b9b      	lsrs	r3, r3, #14
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	f003 0301 	and.w	r3, r3, #1
 8007c4e:	b2da      	uxtb	r2, r3
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c5a:	0b5b      	lsrs	r3, r3, #13
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	f003 0301 	and.w	r3, r3, #1
 8007c62:	b2da      	uxtb	r2, r3
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c6e:	0b1b      	lsrs	r3, r3, #12
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	b2da      	uxtb	r2, r3
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c82:	0a9b      	lsrs	r3, r3, #10
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	f003 0303 	and.w	r3, r3, #3
 8007c8a:	b2da      	uxtb	r2, r3
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c96:	0a1b      	lsrs	r3, r3, #8
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	f003 0303 	and.w	r3, r3, #3
 8007c9e:	b2da      	uxtb	r2, r3
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007caa:	085b      	lsrs	r3, r3, #1
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cb2:	b2da      	uxtb	r2, r3
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr
 8007cd0:	004005ff 	.word	0x004005ff

08007cd4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b086      	sub	sp, #24
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007d34:	2300      	movs	r3, #0
 8007d36:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007d38:	f107 030c 	add.w	r3, r7, #12
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f9de 	bl	8008100 <SD_SendStatus>
 8007d44:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d005      	beq.n	8007d58 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	431a      	orrs	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	0a5b      	lsrs	r3, r3, #9
 8007d5c:	f003 030f 	and.w	r3, r3, #15
 8007d60:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007d62:	693b      	ldr	r3, [r7, #16]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3718      	adds	r7, #24
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d78:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f240 523a 	movw	r2, #1338	; 0x53a
 8007d82:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f7ff ffd1 	bl	8007d2c <HAL_SD_GetCardState>
 8007d8a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	2b06      	cmp	r3, #6
 8007d9e:	d002      	beq.n	8007da6 <SD_DMATxAbort+0x3a>
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	2b05      	cmp	r3, #5
 8007da4:	d10a      	bne.n	8007dbc <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f001 fe38 	bl	8009a20 <SDMMC_CmdStopTransfer>
 8007db0:	4602      	mov	r2, r0
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db6:	431a      	orrs	r2, r3
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d103      	bne.n	8007dcc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f002 fa63 	bl	800a290 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007dca:	e002      	b.n	8007dd2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f7ff fdd3 	bl	8007978 <HAL_SD_ErrorCallback>
}
 8007dd2:	bf00      	nop
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b084      	sub	sp, #16
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f240 523a 	movw	r2, #1338	; 0x53a
 8007df0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f7ff ff9a 	bl	8007d2c <HAL_SD_GetCardState>
 8007df8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	2b06      	cmp	r3, #6
 8007e0c:	d002      	beq.n	8007e14 <SD_DMARxAbort+0x3a>
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	2b05      	cmp	r3, #5
 8007e12:	d10a      	bne.n	8007e2a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f001 fe01 	bl	8009a20 <SDMMC_CmdStopTransfer>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e24:	431a      	orrs	r2, r3
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d103      	bne.n	8007e3a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f002 fa2c 	bl	800a290 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007e38:	e002      	b.n	8007e40 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f7ff fd9c 	bl	8007978 <HAL_SD_ErrorCallback>
}
 8007e40:	bf00      	nop
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007e48:	b5b0      	push	{r4, r5, r7, lr}
 8007e4a:	b094      	sub	sp, #80	; 0x50
 8007e4c:	af04      	add	r7, sp, #16
 8007e4e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007e50:	2301      	movs	r3, #1
 8007e52:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f001 fcb3 	bl	80097c4 <SDMMC_GetPowerState>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d102      	bne.n	8007e6a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007e64:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007e68:	e0b8      	b.n	8007fdc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e6e:	2b03      	cmp	r3, #3
 8007e70:	d02f      	beq.n	8007ed2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f001 fe99 	bl	8009bae <SDMMC_CmdSendCID>
 8007e7c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d001      	beq.n	8007e88 <SD_InitCard+0x40>
    {
      return errorstate;
 8007e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e86:	e0a9      	b.n	8007fdc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f001 fcdd 	bl	800984e <SDMMC_GetResponse>
 8007e94:	4602      	mov	r2, r0
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2104      	movs	r1, #4
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f001 fcd4 	bl	800984e <SDMMC_GetResponse>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2108      	movs	r1, #8
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f001 fccb 	bl	800984e <SDMMC_GetResponse>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	210c      	movs	r1, #12
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f001 fcc2 	bl	800984e <SDMMC_GetResponse>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ed6:	2b03      	cmp	r3, #3
 8007ed8:	d00d      	beq.n	8007ef6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f107 020e 	add.w	r2, r7, #14
 8007ee2:	4611      	mov	r1, r2
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f001 fe9f 	bl	8009c28 <SDMMC_CmdSetRelAdd>
 8007eea:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d001      	beq.n	8007ef6 <SD_InitCard+0xae>
    {
      return errorstate;
 8007ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ef4:	e072      	b.n	8007fdc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	d036      	beq.n	8007f6c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007efe:	89fb      	ldrh	r3, [r7, #14]
 8007f00:	461a      	mov	r2, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f0e:	041b      	lsls	r3, r3, #16
 8007f10:	4619      	mov	r1, r3
 8007f12:	4610      	mov	r0, r2
 8007f14:	f001 fe69 	bl	8009bea <SDMMC_CmdSendCSD>
 8007f18:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d001      	beq.n	8007f24 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f22:	e05b      	b.n	8007fdc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2100      	movs	r1, #0
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f001 fc8f 	bl	800984e <SDMMC_GetResponse>
 8007f30:	4602      	mov	r2, r0
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2104      	movs	r1, #4
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f001 fc86 	bl	800984e <SDMMC_GetResponse>
 8007f42:	4602      	mov	r2, r0
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2108      	movs	r1, #8
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f001 fc7d 	bl	800984e <SDMMC_GetResponse>
 8007f54:	4602      	mov	r2, r0
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	210c      	movs	r1, #12
 8007f60:	4618      	mov	r0, r3
 8007f62:	f001 fc74 	bl	800984e <SDMMC_GetResponse>
 8007f66:	4602      	mov	r2, r0
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2104      	movs	r1, #4
 8007f72:	4618      	mov	r0, r3
 8007f74:	f001 fc6b 	bl	800984e <SDMMC_GetResponse>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	0d1a      	lsrs	r2, r3, #20
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007f80:	f107 0310 	add.w	r3, r7, #16
 8007f84:	4619      	mov	r1, r3
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f7ff fd00 	bl	800798c <HAL_SD_GetCardCSD>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d002      	beq.n	8007f98 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007f96:	e021      	b.n	8007fdc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6819      	ldr	r1, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fa0:	041b      	lsls	r3, r3, #16
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	461c      	mov	r4, r3
 8007fa6:	4615      	mov	r5, r2
 8007fa8:	4622      	mov	r2, r4
 8007faa:	462b      	mov	r3, r5
 8007fac:	4608      	mov	r0, r1
 8007fae:	f001 fd59 	bl	8009a64 <SDMMC_CmdSelDesel>
 8007fb2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d001      	beq.n	8007fbe <SD_InitCard+0x176>
  {
    return errorstate;
 8007fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fbc:	e00e      	b.n	8007fdc <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681d      	ldr	r5, [r3, #0]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	466c      	mov	r4, sp
 8007fc6:	f103 0210 	add.w	r2, r3, #16
 8007fca:	ca07      	ldmia	r2, {r0, r1, r2}
 8007fcc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	f001 fb9b 	bl	8009710 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3740      	adds	r7, #64	; 0x40
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bdb0      	pop	{r4, r5, r7, pc}

08007fe4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b086      	sub	sp, #24
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fec:	2300      	movs	r3, #0
 8007fee:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	617b      	str	r3, [r7, #20]
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f001 fd54 	bl	8009aaa <SDMMC_CmdGoIdleState>
 8008002:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <SD_PowerON+0x2a>
  {
    return errorstate;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	e072      	b.n	80080f4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4618      	mov	r0, r3
 8008014:	f001 fd67 	bl	8009ae6 <SDMMC_CmdOperCond>
 8008018:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d00d      	beq.n	800803c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4618      	mov	r0, r3
 800802c:	f001 fd3d 	bl	8009aaa <SDMMC_CmdGoIdleState>
 8008030:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d004      	beq.n	8008042 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	e05b      	b.n	80080f4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008046:	2b01      	cmp	r3, #1
 8008048:	d137      	bne.n	80080ba <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2100      	movs	r1, #0
 8008050:	4618      	mov	r0, r3
 8008052:	f001 fd67 	bl	8009b24 <SDMMC_CmdAppCommand>
 8008056:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d02d      	beq.n	80080ba <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800805e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008062:	e047      	b.n	80080f4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2100      	movs	r1, #0
 800806a:	4618      	mov	r0, r3
 800806c:	f001 fd5a 	bl	8009b24 <SDMMC_CmdAppCommand>
 8008070:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d001      	beq.n	800807c <SD_PowerON+0x98>
    {
      return errorstate;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	e03b      	b.n	80080f4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	491e      	ldr	r1, [pc, #120]	; (80080fc <SD_PowerON+0x118>)
 8008082:	4618      	mov	r0, r3
 8008084:	f001 fd70 	bl	8009b68 <SDMMC_CmdAppOperCommand>
 8008088:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d002      	beq.n	8008096 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008090:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008094:	e02e      	b.n	80080f4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2100      	movs	r1, #0
 800809c:	4618      	mov	r0, r3
 800809e:	f001 fbd6 	bl	800984e <SDMMC_GetResponse>
 80080a2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	0fdb      	lsrs	r3, r3, #31
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d101      	bne.n	80080b0 <SD_PowerON+0xcc>
 80080ac:	2301      	movs	r3, #1
 80080ae:	e000      	b.n	80080b2 <SD_PowerON+0xce>
 80080b0:	2300      	movs	r3, #0
 80080b2:	613b      	str	r3, [r7, #16]

    count++;
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	3301      	adds	r3, #1
 80080b8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d802      	bhi.n	80080ca <SD_PowerON+0xe6>
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d0cc      	beq.n	8008064 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d902      	bls.n	80080da <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80080d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80080d8:	e00c      	b.n	80080f4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d003      	beq.n	80080ec <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	645a      	str	r2, [r3, #68]	; 0x44
 80080ea:	e002      	b.n	80080f2 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3718      	adds	r7, #24
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	c1100000 	.word	0xc1100000

08008100 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d102      	bne.n	8008116 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008110:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008114:	e018      	b.n	8008148 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800811e:	041b      	lsls	r3, r3, #16
 8008120:	4619      	mov	r1, r3
 8008122:	4610      	mov	r0, r2
 8008124:	f001 fda1 	bl	8009c6a <SDMMC_CmdSendStatus>
 8008128:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d001      	beq.n	8008134 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	e009      	b.n	8008148 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2100      	movs	r1, #0
 800813a:	4618      	mov	r0, r3
 800813c:	f001 fb87 	bl	800984e <SDMMC_GetResponse>
 8008140:	4602      	mov	r2, r0
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800815c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008162:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d03f      	beq.n	80081ea <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800816a:	2300      	movs	r3, #0
 800816c:	617b      	str	r3, [r7, #20]
 800816e:	e033      	b.n	80081d8 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4618      	mov	r0, r3
 8008176:	f001 faf8 	bl	800976a <SDMMC_ReadFIFO>
 800817a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	b2da      	uxtb	r2, r3
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	3301      	adds	r3, #1
 8008188:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	3b01      	subs	r3, #1
 800818e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	0a1b      	lsrs	r3, r3, #8
 8008194:	b2da      	uxtb	r2, r3
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	701a      	strb	r2, [r3, #0]
      tmp++;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	3301      	adds	r3, #1
 800819e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	3b01      	subs	r3, #1
 80081a4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	0c1b      	lsrs	r3, r3, #16
 80081aa:	b2da      	uxtb	r2, r3
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	701a      	strb	r2, [r3, #0]
      tmp++;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	3301      	adds	r3, #1
 80081b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	3b01      	subs	r3, #1
 80081ba:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	0e1b      	lsrs	r3, r3, #24
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	3301      	adds	r3, #1
 80081ca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	3b01      	subs	r3, #1
 80081d0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	3301      	adds	r3, #1
 80081d6:	617b      	str	r3, [r7, #20]
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	2b07      	cmp	r3, #7
 80081dc:	d9c8      	bls.n	8008170 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	693a      	ldr	r2, [r7, #16]
 80081e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80081ea:	bf00      	nop
 80081ec:	3718      	adds	r7, #24
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b086      	sub	sp, #24
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a1b      	ldr	r3, [r3, #32]
 80081fe:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008204:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d043      	beq.n	8008294 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800820c:	2300      	movs	r3, #0
 800820e:	617b      	str	r3, [r7, #20]
 8008210:	e037      	b.n	8008282 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	3301      	adds	r3, #1
 800821c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	3b01      	subs	r3, #1
 8008222:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	021a      	lsls	r2, r3, #8
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	4313      	orrs	r3, r2
 800822e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	3301      	adds	r3, #1
 8008234:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	3b01      	subs	r3, #1
 800823a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	041a      	lsls	r2, r3, #16
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	4313      	orrs	r3, r2
 8008246:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	3301      	adds	r3, #1
 800824c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	3b01      	subs	r3, #1
 8008252:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	061a      	lsls	r2, r3, #24
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	4313      	orrs	r3, r2
 800825e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	3301      	adds	r3, #1
 8008264:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	3b01      	subs	r3, #1
 800826a:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f107 0208 	add.w	r2, r7, #8
 8008274:	4611      	mov	r1, r2
 8008276:	4618      	mov	r0, r3
 8008278:	f001 fa84 	bl	8009784 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	3301      	adds	r3, #1
 8008280:	617b      	str	r3, [r7, #20]
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	2b07      	cmp	r3, #7
 8008286:	d9c4      	bls.n	8008212 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8008294:	bf00      	nop
 8008296:	3718      	adds	r7, #24
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d101      	bne.n	80082ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e095      	b.n	80083da <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d108      	bne.n	80082c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082be:	d009      	beq.n	80082d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	61da      	str	r2, [r3, #28]
 80082c6:	e005      	b.n	80082d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d106      	bne.n	80082f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7fa fa5c 	bl	80027ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2202      	movs	r2, #2
 80082f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800830a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008314:	d902      	bls.n	800831c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008316:	2300      	movs	r3, #0
 8008318:	60fb      	str	r3, [r7, #12]
 800831a:	e002      	b.n	8008322 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800831c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008320:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800832a:	d007      	beq.n	800833c <HAL_SPI_Init+0xa0>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008334:	d002      	beq.n	800833c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800834c:	431a      	orrs	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	f003 0302 	and.w	r3, r3, #2
 8008356:	431a      	orrs	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	695b      	ldr	r3, [r3, #20]
 800835c:	f003 0301 	and.w	r3, r3, #1
 8008360:	431a      	orrs	r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800836a:	431a      	orrs	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	69db      	ldr	r3, [r3, #28]
 8008370:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008374:	431a      	orrs	r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a1b      	ldr	r3, [r3, #32]
 800837a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800837e:	ea42 0103 	orr.w	r1, r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008386:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	430a      	orrs	r2, r1
 8008390:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	0c1b      	lsrs	r3, r3, #16
 8008398:	f003 0204 	and.w	r2, r3, #4
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a0:	f003 0310 	and.w	r3, r3, #16
 80083a4:	431a      	orrs	r2, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083aa:	f003 0308 	and.w	r3, r3, #8
 80083ae:	431a      	orrs	r2, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80083b8:	ea42 0103 	orr.w	r1, r2, r3
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	430a      	orrs	r2, r1
 80083c8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b082      	sub	sp, #8
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d101      	bne.n	80083f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	e049      	b.n	8008488 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d106      	bne.n	800840e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f7fa fa31 	bl	8002870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2202      	movs	r2, #2
 8008412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	3304      	adds	r3, #4
 800841e:	4619      	mov	r1, r3
 8008420:	4610      	mov	r0, r2
 8008422:	f000 f97d 	bl	8008720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2201      	movs	r2, #1
 800842a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2201      	movs	r2, #1
 8008432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2201      	movs	r2, #1
 800843a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2201      	movs	r2, #1
 8008442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2201      	movs	r2, #1
 800844a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2201      	movs	r2, #1
 800845a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2201      	movs	r2, #1
 8008462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2201      	movs	r2, #1
 800846a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2201      	movs	r2, #1
 8008482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	f003 0302 	and.w	r3, r3, #2
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d122      	bne.n	80084ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	f003 0302 	and.w	r3, r3, #2
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d11b      	bne.n	80084ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f06f 0202 	mvn.w	r2, #2
 80084bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2201      	movs	r2, #1
 80084c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	699b      	ldr	r3, [r3, #24]
 80084ca:	f003 0303 	and.w	r3, r3, #3
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d003      	beq.n	80084da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f905 	bl	80086e2 <HAL_TIM_IC_CaptureCallback>
 80084d8:	e005      	b.n	80084e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 f8f7 	bl	80086ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 f908 	bl	80086f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	f003 0304 	and.w	r3, r3, #4
 80084f6:	2b04      	cmp	r3, #4
 80084f8:	d122      	bne.n	8008540 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	f003 0304 	and.w	r3, r3, #4
 8008504:	2b04      	cmp	r3, #4
 8008506:	d11b      	bne.n	8008540 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f06f 0204 	mvn.w	r2, #4
 8008510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2202      	movs	r2, #2
 8008516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	699b      	ldr	r3, [r3, #24]
 800851e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008522:	2b00      	cmp	r3, #0
 8008524:	d003      	beq.n	800852e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 f8db 	bl	80086e2 <HAL_TIM_IC_CaptureCallback>
 800852c:	e005      	b.n	800853a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f8cd 	bl	80086ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 f8de 	bl	80086f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	691b      	ldr	r3, [r3, #16]
 8008546:	f003 0308 	and.w	r3, r3, #8
 800854a:	2b08      	cmp	r3, #8
 800854c:	d122      	bne.n	8008594 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	f003 0308 	and.w	r3, r3, #8
 8008558:	2b08      	cmp	r3, #8
 800855a:	d11b      	bne.n	8008594 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f06f 0208 	mvn.w	r2, #8
 8008564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2204      	movs	r2, #4
 800856a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	69db      	ldr	r3, [r3, #28]
 8008572:	f003 0303 	and.w	r3, r3, #3
 8008576:	2b00      	cmp	r3, #0
 8008578:	d003      	beq.n	8008582 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f8b1 	bl	80086e2 <HAL_TIM_IC_CaptureCallback>
 8008580:	e005      	b.n	800858e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 f8a3 	bl	80086ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 f8b4 	bl	80086f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	f003 0310 	and.w	r3, r3, #16
 800859e:	2b10      	cmp	r3, #16
 80085a0:	d122      	bne.n	80085e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	f003 0310 	and.w	r3, r3, #16
 80085ac:	2b10      	cmp	r3, #16
 80085ae:	d11b      	bne.n	80085e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f06f 0210 	mvn.w	r2, #16
 80085b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2208      	movs	r2, #8
 80085be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	69db      	ldr	r3, [r3, #28]
 80085c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d003      	beq.n	80085d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f887 	bl	80086e2 <HAL_TIM_IC_CaptureCallback>
 80085d4:	e005      	b.n	80085e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 f879 	bl	80086ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 f88a 	bl	80086f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	f003 0301 	and.w	r3, r3, #1
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d10e      	bne.n	8008614 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	f003 0301 	and.w	r3, r3, #1
 8008600:	2b01      	cmp	r3, #1
 8008602:	d107      	bne.n	8008614 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f06f 0201 	mvn.w	r2, #1
 800860c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f7f9 feea 	bl	80023e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800861e:	2b80      	cmp	r3, #128	; 0x80
 8008620:	d10e      	bne.n	8008640 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800862c:	2b80      	cmp	r3, #128	; 0x80
 800862e:	d107      	bne.n	8008640 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 f914 	bl	8008868 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800864a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800864e:	d10e      	bne.n	800866e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	68db      	ldr	r3, [r3, #12]
 8008656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800865a:	2b80      	cmp	r3, #128	; 0x80
 800865c:	d107      	bne.n	800866e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 f907 	bl	800887c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	691b      	ldr	r3, [r3, #16]
 8008674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008678:	2b40      	cmp	r3, #64	; 0x40
 800867a:	d10e      	bne.n	800869a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008686:	2b40      	cmp	r3, #64	; 0x40
 8008688:	d107      	bne.n	800869a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 f838 	bl	800870a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	691b      	ldr	r3, [r3, #16]
 80086a0:	f003 0320 	and.w	r3, r3, #32
 80086a4:	2b20      	cmp	r3, #32
 80086a6:	d10e      	bne.n	80086c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	f003 0320 	and.w	r3, r3, #32
 80086b2:	2b20      	cmp	r3, #32
 80086b4:	d107      	bne.n	80086c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f06f 0220 	mvn.w	r2, #32
 80086be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 f8c7 	bl	8008854 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086c6:	bf00      	nop
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b083      	sub	sp, #12
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086d6:	bf00      	nop
 80086d8:	370c      	adds	r7, #12
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b083      	sub	sp, #12
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086ea:	bf00      	nop
 80086ec:	370c      	adds	r7, #12
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr

080086f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086f6:	b480      	push	{r7}
 80086f8:	b083      	sub	sp, #12
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086fe:	bf00      	nop
 8008700:	370c      	adds	r7, #12
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr

0800870a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800870a:	b480      	push	{r7}
 800870c:	b083      	sub	sp, #12
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008712:	bf00      	nop
 8008714:	370c      	adds	r7, #12
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
	...

08008720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a40      	ldr	r2, [pc, #256]	; (8008834 <TIM_Base_SetConfig+0x114>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d013      	beq.n	8008760 <TIM_Base_SetConfig+0x40>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800873e:	d00f      	beq.n	8008760 <TIM_Base_SetConfig+0x40>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a3d      	ldr	r2, [pc, #244]	; (8008838 <TIM_Base_SetConfig+0x118>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d00b      	beq.n	8008760 <TIM_Base_SetConfig+0x40>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a3c      	ldr	r2, [pc, #240]	; (800883c <TIM_Base_SetConfig+0x11c>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d007      	beq.n	8008760 <TIM_Base_SetConfig+0x40>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a3b      	ldr	r2, [pc, #236]	; (8008840 <TIM_Base_SetConfig+0x120>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d003      	beq.n	8008760 <TIM_Base_SetConfig+0x40>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a3a      	ldr	r2, [pc, #232]	; (8008844 <TIM_Base_SetConfig+0x124>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d108      	bne.n	8008772 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008766:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	4313      	orrs	r3, r2
 8008770:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a2f      	ldr	r2, [pc, #188]	; (8008834 <TIM_Base_SetConfig+0x114>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d01f      	beq.n	80087ba <TIM_Base_SetConfig+0x9a>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008780:	d01b      	beq.n	80087ba <TIM_Base_SetConfig+0x9a>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a2c      	ldr	r2, [pc, #176]	; (8008838 <TIM_Base_SetConfig+0x118>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d017      	beq.n	80087ba <TIM_Base_SetConfig+0x9a>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a2b      	ldr	r2, [pc, #172]	; (800883c <TIM_Base_SetConfig+0x11c>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d013      	beq.n	80087ba <TIM_Base_SetConfig+0x9a>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a2a      	ldr	r2, [pc, #168]	; (8008840 <TIM_Base_SetConfig+0x120>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d00f      	beq.n	80087ba <TIM_Base_SetConfig+0x9a>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a29      	ldr	r2, [pc, #164]	; (8008844 <TIM_Base_SetConfig+0x124>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d00b      	beq.n	80087ba <TIM_Base_SetConfig+0x9a>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a28      	ldr	r2, [pc, #160]	; (8008848 <TIM_Base_SetConfig+0x128>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d007      	beq.n	80087ba <TIM_Base_SetConfig+0x9a>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a27      	ldr	r2, [pc, #156]	; (800884c <TIM_Base_SetConfig+0x12c>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d003      	beq.n	80087ba <TIM_Base_SetConfig+0x9a>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a26      	ldr	r2, [pc, #152]	; (8008850 <TIM_Base_SetConfig+0x130>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d108      	bne.n	80087cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	4313      	orrs	r3, r2
 80087ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	695b      	ldr	r3, [r3, #20]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	689a      	ldr	r2, [r3, #8]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a10      	ldr	r2, [pc, #64]	; (8008834 <TIM_Base_SetConfig+0x114>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d00f      	beq.n	8008818 <TIM_Base_SetConfig+0xf8>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a12      	ldr	r2, [pc, #72]	; (8008844 <TIM_Base_SetConfig+0x124>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d00b      	beq.n	8008818 <TIM_Base_SetConfig+0xf8>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4a11      	ldr	r2, [pc, #68]	; (8008848 <TIM_Base_SetConfig+0x128>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d007      	beq.n	8008818 <TIM_Base_SetConfig+0xf8>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4a10      	ldr	r2, [pc, #64]	; (800884c <TIM_Base_SetConfig+0x12c>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d003      	beq.n	8008818 <TIM_Base_SetConfig+0xf8>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4a0f      	ldr	r2, [pc, #60]	; (8008850 <TIM_Base_SetConfig+0x130>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d103      	bne.n	8008820 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	691a      	ldr	r2, [r3, #16]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	615a      	str	r2, [r3, #20]
}
 8008826:	bf00      	nop
 8008828:	3714      	adds	r7, #20
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	40012c00 	.word	0x40012c00
 8008838:	40000400 	.word	0x40000400
 800883c:	40000800 	.word	0x40000800
 8008840:	40000c00 	.word	0x40000c00
 8008844:	40013400 	.word	0x40013400
 8008848:	40014000 	.word	0x40014000
 800884c:	40014400 	.word	0x40014400
 8008850:	40014800 	.word	0x40014800

08008854 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d101      	bne.n	80088a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	e040      	b.n	8008924 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d106      	bne.n	80088b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f7fa f802 	bl	80028bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2224      	movs	r2, #36	; 0x24
 80088bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f022 0201 	bic.w	r2, r2, #1
 80088cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 f840 	bl	8008954 <UART_SetConfig>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d101      	bne.n	80088de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	e022      	b.n	8008924 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d002      	beq.n	80088ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 faec 	bl	8008ec4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	685a      	ldr	r2, [r3, #4]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80088fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	689a      	ldr	r2, [r3, #8]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800890a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f042 0201 	orr.w	r2, r2, #1
 800891a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 fb73 	bl	8009008 <UART_CheckIdleState>
 8008922:	4603      	mov	r3, r0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3708      	adds	r7, #8
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008934:	bf00      	nop
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008948:	bf00      	nop
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008958:	b08a      	sub	sp, #40	; 0x28
 800895a:	af00      	add	r7, sp, #0
 800895c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800895e:	2300      	movs	r3, #0
 8008960:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	689a      	ldr	r2, [r3, #8]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	691b      	ldr	r3, [r3, #16]
 800896c:	431a      	orrs	r2, r3
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	695b      	ldr	r3, [r3, #20]
 8008972:	431a      	orrs	r2, r3
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	69db      	ldr	r3, [r3, #28]
 8008978:	4313      	orrs	r3, r2
 800897a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	4ba4      	ldr	r3, [pc, #656]	; (8008c14 <UART_SetConfig+0x2c0>)
 8008984:	4013      	ands	r3, r2
 8008986:	68fa      	ldr	r2, [r7, #12]
 8008988:	6812      	ldr	r2, [r2, #0]
 800898a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800898c:	430b      	orrs	r3, r1
 800898e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	68da      	ldr	r2, [r3, #12]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	430a      	orrs	r2, r1
 80089a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	699b      	ldr	r3, [r3, #24]
 80089aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a99      	ldr	r2, [pc, #612]	; (8008c18 <UART_SetConfig+0x2c4>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d004      	beq.n	80089c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6a1b      	ldr	r3, [r3, #32]
 80089ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089bc:	4313      	orrs	r3, r2
 80089be:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089d0:	430a      	orrs	r2, r1
 80089d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a90      	ldr	r2, [pc, #576]	; (8008c1c <UART_SetConfig+0x2c8>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d126      	bne.n	8008a2c <UART_SetConfig+0xd8>
 80089de:	4b90      	ldr	r3, [pc, #576]	; (8008c20 <UART_SetConfig+0x2cc>)
 80089e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089e4:	f003 0303 	and.w	r3, r3, #3
 80089e8:	2b03      	cmp	r3, #3
 80089ea:	d81b      	bhi.n	8008a24 <UART_SetConfig+0xd0>
 80089ec:	a201      	add	r2, pc, #4	; (adr r2, 80089f4 <UART_SetConfig+0xa0>)
 80089ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f2:	bf00      	nop
 80089f4:	08008a05 	.word	0x08008a05
 80089f8:	08008a15 	.word	0x08008a15
 80089fc:	08008a0d 	.word	0x08008a0d
 8008a00:	08008a1d 	.word	0x08008a1d
 8008a04:	2301      	movs	r3, #1
 8008a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a0a:	e116      	b.n	8008c3a <UART_SetConfig+0x2e6>
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a12:	e112      	b.n	8008c3a <UART_SetConfig+0x2e6>
 8008a14:	2304      	movs	r3, #4
 8008a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a1a:	e10e      	b.n	8008c3a <UART_SetConfig+0x2e6>
 8008a1c:	2308      	movs	r3, #8
 8008a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a22:	e10a      	b.n	8008c3a <UART_SetConfig+0x2e6>
 8008a24:	2310      	movs	r3, #16
 8008a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a2a:	e106      	b.n	8008c3a <UART_SetConfig+0x2e6>
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a7c      	ldr	r2, [pc, #496]	; (8008c24 <UART_SetConfig+0x2d0>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d138      	bne.n	8008aa8 <UART_SetConfig+0x154>
 8008a36:	4b7a      	ldr	r3, [pc, #488]	; (8008c20 <UART_SetConfig+0x2cc>)
 8008a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a3c:	f003 030c 	and.w	r3, r3, #12
 8008a40:	2b0c      	cmp	r3, #12
 8008a42:	d82d      	bhi.n	8008aa0 <UART_SetConfig+0x14c>
 8008a44:	a201      	add	r2, pc, #4	; (adr r2, 8008a4c <UART_SetConfig+0xf8>)
 8008a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4a:	bf00      	nop
 8008a4c:	08008a81 	.word	0x08008a81
 8008a50:	08008aa1 	.word	0x08008aa1
 8008a54:	08008aa1 	.word	0x08008aa1
 8008a58:	08008aa1 	.word	0x08008aa1
 8008a5c:	08008a91 	.word	0x08008a91
 8008a60:	08008aa1 	.word	0x08008aa1
 8008a64:	08008aa1 	.word	0x08008aa1
 8008a68:	08008aa1 	.word	0x08008aa1
 8008a6c:	08008a89 	.word	0x08008a89
 8008a70:	08008aa1 	.word	0x08008aa1
 8008a74:	08008aa1 	.word	0x08008aa1
 8008a78:	08008aa1 	.word	0x08008aa1
 8008a7c:	08008a99 	.word	0x08008a99
 8008a80:	2300      	movs	r3, #0
 8008a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a86:	e0d8      	b.n	8008c3a <UART_SetConfig+0x2e6>
 8008a88:	2302      	movs	r3, #2
 8008a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a8e:	e0d4      	b.n	8008c3a <UART_SetConfig+0x2e6>
 8008a90:	2304      	movs	r3, #4
 8008a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a96:	e0d0      	b.n	8008c3a <UART_SetConfig+0x2e6>
 8008a98:	2308      	movs	r3, #8
 8008a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a9e:	e0cc      	b.n	8008c3a <UART_SetConfig+0x2e6>
 8008aa0:	2310      	movs	r3, #16
 8008aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008aa6:	e0c8      	b.n	8008c3a <UART_SetConfig+0x2e6>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a5e      	ldr	r2, [pc, #376]	; (8008c28 <UART_SetConfig+0x2d4>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d125      	bne.n	8008afe <UART_SetConfig+0x1aa>
 8008ab2:	4b5b      	ldr	r3, [pc, #364]	; (8008c20 <UART_SetConfig+0x2cc>)
 8008ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ab8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008abc:	2b30      	cmp	r3, #48	; 0x30
 8008abe:	d016      	beq.n	8008aee <UART_SetConfig+0x19a>
 8008ac0:	2b30      	cmp	r3, #48	; 0x30
 8008ac2:	d818      	bhi.n	8008af6 <UART_SetConfig+0x1a2>
 8008ac4:	2b20      	cmp	r3, #32
 8008ac6:	d00a      	beq.n	8008ade <UART_SetConfig+0x18a>
 8008ac8:	2b20      	cmp	r3, #32
 8008aca:	d814      	bhi.n	8008af6 <UART_SetConfig+0x1a2>
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d002      	beq.n	8008ad6 <UART_SetConfig+0x182>
 8008ad0:	2b10      	cmp	r3, #16
 8008ad2:	d008      	beq.n	8008ae6 <UART_SetConfig+0x192>
 8008ad4:	e00f      	b.n	8008af6 <UART_SetConfig+0x1a2>
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008adc:	e0ad      	b.n	8008c3a <UART_SetConfig+0x2e6>
 8008ade:	2302      	movs	r3, #2
 8008ae0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ae4:	e0a9      	b.n	8008c3a <UART_SetConfig+0x2e6>
 8008ae6:	2304      	movs	r3, #4
 8008ae8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008aec:	e0a5      	b.n	8008c3a <UART_SetConfig+0x2e6>
 8008aee:	2308      	movs	r3, #8
 8008af0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008af4:	e0a1      	b.n	8008c3a <UART_SetConfig+0x2e6>
 8008af6:	2310      	movs	r3, #16
 8008af8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008afc:	e09d      	b.n	8008c3a <UART_SetConfig+0x2e6>
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a4a      	ldr	r2, [pc, #296]	; (8008c2c <UART_SetConfig+0x2d8>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d125      	bne.n	8008b54 <UART_SetConfig+0x200>
 8008b08:	4b45      	ldr	r3, [pc, #276]	; (8008c20 <UART_SetConfig+0x2cc>)
 8008b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008b12:	2bc0      	cmp	r3, #192	; 0xc0
 8008b14:	d016      	beq.n	8008b44 <UART_SetConfig+0x1f0>
 8008b16:	2bc0      	cmp	r3, #192	; 0xc0
 8008b18:	d818      	bhi.n	8008b4c <UART_SetConfig+0x1f8>
 8008b1a:	2b80      	cmp	r3, #128	; 0x80
 8008b1c:	d00a      	beq.n	8008b34 <UART_SetConfig+0x1e0>
 8008b1e:	2b80      	cmp	r3, #128	; 0x80
 8008b20:	d814      	bhi.n	8008b4c <UART_SetConfig+0x1f8>
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d002      	beq.n	8008b2c <UART_SetConfig+0x1d8>
 8008b26:	2b40      	cmp	r3, #64	; 0x40
 8008b28:	d008      	beq.n	8008b3c <UART_SetConfig+0x1e8>
 8008b2a:	e00f      	b.n	8008b4c <UART_SetConfig+0x1f8>
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b32:	e082      	b.n	8008c3a <UART_SetConfig+0x2e6>
 8008b34:	2302      	movs	r3, #2
 8008b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b3a:	e07e      	b.n	8008c3a <UART_SetConfig+0x2e6>
 8008b3c:	2304      	movs	r3, #4
 8008b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b42:	e07a      	b.n	8008c3a <UART_SetConfig+0x2e6>
 8008b44:	2308      	movs	r3, #8
 8008b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b4a:	e076      	b.n	8008c3a <UART_SetConfig+0x2e6>
 8008b4c:	2310      	movs	r3, #16
 8008b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b52:	e072      	b.n	8008c3a <UART_SetConfig+0x2e6>
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a35      	ldr	r2, [pc, #212]	; (8008c30 <UART_SetConfig+0x2dc>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d12a      	bne.n	8008bb4 <UART_SetConfig+0x260>
 8008b5e:	4b30      	ldr	r3, [pc, #192]	; (8008c20 <UART_SetConfig+0x2cc>)
 8008b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b6c:	d01a      	beq.n	8008ba4 <UART_SetConfig+0x250>
 8008b6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b72:	d81b      	bhi.n	8008bac <UART_SetConfig+0x258>
 8008b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b78:	d00c      	beq.n	8008b94 <UART_SetConfig+0x240>
 8008b7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b7e:	d815      	bhi.n	8008bac <UART_SetConfig+0x258>
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d003      	beq.n	8008b8c <UART_SetConfig+0x238>
 8008b84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b88:	d008      	beq.n	8008b9c <UART_SetConfig+0x248>
 8008b8a:	e00f      	b.n	8008bac <UART_SetConfig+0x258>
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b92:	e052      	b.n	8008c3a <UART_SetConfig+0x2e6>
 8008b94:	2302      	movs	r3, #2
 8008b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b9a:	e04e      	b.n	8008c3a <UART_SetConfig+0x2e6>
 8008b9c:	2304      	movs	r3, #4
 8008b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ba2:	e04a      	b.n	8008c3a <UART_SetConfig+0x2e6>
 8008ba4:	2308      	movs	r3, #8
 8008ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008baa:	e046      	b.n	8008c3a <UART_SetConfig+0x2e6>
 8008bac:	2310      	movs	r3, #16
 8008bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008bb2:	e042      	b.n	8008c3a <UART_SetConfig+0x2e6>
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a17      	ldr	r2, [pc, #92]	; (8008c18 <UART_SetConfig+0x2c4>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d13a      	bne.n	8008c34 <UART_SetConfig+0x2e0>
 8008bbe:	4b18      	ldr	r3, [pc, #96]	; (8008c20 <UART_SetConfig+0x2cc>)
 8008bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008bc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008bcc:	d01a      	beq.n	8008c04 <UART_SetConfig+0x2b0>
 8008bce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008bd2:	d81b      	bhi.n	8008c0c <UART_SetConfig+0x2b8>
 8008bd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bd8:	d00c      	beq.n	8008bf4 <UART_SetConfig+0x2a0>
 8008bda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bde:	d815      	bhi.n	8008c0c <UART_SetConfig+0x2b8>
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d003      	beq.n	8008bec <UART_SetConfig+0x298>
 8008be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008be8:	d008      	beq.n	8008bfc <UART_SetConfig+0x2a8>
 8008bea:	e00f      	b.n	8008c0c <UART_SetConfig+0x2b8>
 8008bec:	2300      	movs	r3, #0
 8008bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008bf2:	e022      	b.n	8008c3a <UART_SetConfig+0x2e6>
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008bfa:	e01e      	b.n	8008c3a <UART_SetConfig+0x2e6>
 8008bfc:	2304      	movs	r3, #4
 8008bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c02:	e01a      	b.n	8008c3a <UART_SetConfig+0x2e6>
 8008c04:	2308      	movs	r3, #8
 8008c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c0a:	e016      	b.n	8008c3a <UART_SetConfig+0x2e6>
 8008c0c:	2310      	movs	r3, #16
 8008c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c12:	e012      	b.n	8008c3a <UART_SetConfig+0x2e6>
 8008c14:	efff69f3 	.word	0xefff69f3
 8008c18:	40008000 	.word	0x40008000
 8008c1c:	40013800 	.word	0x40013800
 8008c20:	40021000 	.word	0x40021000
 8008c24:	40004400 	.word	0x40004400
 8008c28:	40004800 	.word	0x40004800
 8008c2c:	40004c00 	.word	0x40004c00
 8008c30:	40005000 	.word	0x40005000
 8008c34:	2310      	movs	r3, #16
 8008c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a9f      	ldr	r2, [pc, #636]	; (8008ebc <UART_SetConfig+0x568>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d17a      	bne.n	8008d3a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c48:	2b08      	cmp	r3, #8
 8008c4a:	d824      	bhi.n	8008c96 <UART_SetConfig+0x342>
 8008c4c:	a201      	add	r2, pc, #4	; (adr r2, 8008c54 <UART_SetConfig+0x300>)
 8008c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c52:	bf00      	nop
 8008c54:	08008c79 	.word	0x08008c79
 8008c58:	08008c97 	.word	0x08008c97
 8008c5c:	08008c81 	.word	0x08008c81
 8008c60:	08008c97 	.word	0x08008c97
 8008c64:	08008c87 	.word	0x08008c87
 8008c68:	08008c97 	.word	0x08008c97
 8008c6c:	08008c97 	.word	0x08008c97
 8008c70:	08008c97 	.word	0x08008c97
 8008c74:	08008c8f 	.word	0x08008c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c78:	f7fc f980 	bl	8004f7c <HAL_RCC_GetPCLK1Freq>
 8008c7c:	61f8      	str	r0, [r7, #28]
        break;
 8008c7e:	e010      	b.n	8008ca2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c80:	4b8f      	ldr	r3, [pc, #572]	; (8008ec0 <UART_SetConfig+0x56c>)
 8008c82:	61fb      	str	r3, [r7, #28]
        break;
 8008c84:	e00d      	b.n	8008ca2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c86:	f7fc f8e1 	bl	8004e4c <HAL_RCC_GetSysClockFreq>
 8008c8a:	61f8      	str	r0, [r7, #28]
        break;
 8008c8c:	e009      	b.n	8008ca2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c92:	61fb      	str	r3, [r7, #28]
        break;
 8008c94:	e005      	b.n	8008ca2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008c96:	2300      	movs	r3, #0
 8008c98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008ca0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f000 80fb 	beq.w	8008ea0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	685a      	ldr	r2, [r3, #4]
 8008cae:	4613      	mov	r3, r2
 8008cb0:	005b      	lsls	r3, r3, #1
 8008cb2:	4413      	add	r3, r2
 8008cb4:	69fa      	ldr	r2, [r7, #28]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d305      	bcc.n	8008cc6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008cc0:	69fa      	ldr	r2, [r7, #28]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d903      	bls.n	8008cce <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008ccc:	e0e8      	b.n	8008ea0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	461c      	mov	r4, r3
 8008cd4:	4615      	mov	r5, r2
 8008cd6:	f04f 0200 	mov.w	r2, #0
 8008cda:	f04f 0300 	mov.w	r3, #0
 8008cde:	022b      	lsls	r3, r5, #8
 8008ce0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008ce4:	0222      	lsls	r2, r4, #8
 8008ce6:	68f9      	ldr	r1, [r7, #12]
 8008ce8:	6849      	ldr	r1, [r1, #4]
 8008cea:	0849      	lsrs	r1, r1, #1
 8008cec:	2000      	movs	r0, #0
 8008cee:	4688      	mov	r8, r1
 8008cf0:	4681      	mov	r9, r0
 8008cf2:	eb12 0a08 	adds.w	sl, r2, r8
 8008cf6:	eb43 0b09 	adc.w	fp, r3, r9
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	603b      	str	r3, [r7, #0]
 8008d02:	607a      	str	r2, [r7, #4]
 8008d04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d08:	4650      	mov	r0, sl
 8008d0a:	4659      	mov	r1, fp
 8008d0c:	f7f7 ff4c 	bl	8000ba8 <__aeabi_uldivmod>
 8008d10:	4602      	mov	r2, r0
 8008d12:	460b      	mov	r3, r1
 8008d14:	4613      	mov	r3, r2
 8008d16:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d18:	69bb      	ldr	r3, [r7, #24]
 8008d1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d1e:	d308      	bcc.n	8008d32 <UART_SetConfig+0x3de>
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d26:	d204      	bcs.n	8008d32 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	69ba      	ldr	r2, [r7, #24]
 8008d2e:	60da      	str	r2, [r3, #12]
 8008d30:	e0b6      	b.n	8008ea0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008d38:	e0b2      	b.n	8008ea0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	69db      	ldr	r3, [r3, #28]
 8008d3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d42:	d15e      	bne.n	8008e02 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008d44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d48:	2b08      	cmp	r3, #8
 8008d4a:	d828      	bhi.n	8008d9e <UART_SetConfig+0x44a>
 8008d4c:	a201      	add	r2, pc, #4	; (adr r2, 8008d54 <UART_SetConfig+0x400>)
 8008d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d52:	bf00      	nop
 8008d54:	08008d79 	.word	0x08008d79
 8008d58:	08008d81 	.word	0x08008d81
 8008d5c:	08008d89 	.word	0x08008d89
 8008d60:	08008d9f 	.word	0x08008d9f
 8008d64:	08008d8f 	.word	0x08008d8f
 8008d68:	08008d9f 	.word	0x08008d9f
 8008d6c:	08008d9f 	.word	0x08008d9f
 8008d70:	08008d9f 	.word	0x08008d9f
 8008d74:	08008d97 	.word	0x08008d97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d78:	f7fc f900 	bl	8004f7c <HAL_RCC_GetPCLK1Freq>
 8008d7c:	61f8      	str	r0, [r7, #28]
        break;
 8008d7e:	e014      	b.n	8008daa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d80:	f7fc f912 	bl	8004fa8 <HAL_RCC_GetPCLK2Freq>
 8008d84:	61f8      	str	r0, [r7, #28]
        break;
 8008d86:	e010      	b.n	8008daa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d88:	4b4d      	ldr	r3, [pc, #308]	; (8008ec0 <UART_SetConfig+0x56c>)
 8008d8a:	61fb      	str	r3, [r7, #28]
        break;
 8008d8c:	e00d      	b.n	8008daa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d8e:	f7fc f85d 	bl	8004e4c <HAL_RCC_GetSysClockFreq>
 8008d92:	61f8      	str	r0, [r7, #28]
        break;
 8008d94:	e009      	b.n	8008daa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d9a:	61fb      	str	r3, [r7, #28]
        break;
 8008d9c:	e005      	b.n	8008daa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008da8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d077      	beq.n	8008ea0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	005a      	lsls	r2, r3, #1
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	085b      	lsrs	r3, r3, #1
 8008dba:	441a      	add	r2, r3
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dc4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dc6:	69bb      	ldr	r3, [r7, #24]
 8008dc8:	2b0f      	cmp	r3, #15
 8008dca:	d916      	bls.n	8008dfa <UART_SetConfig+0x4a6>
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dd2:	d212      	bcs.n	8008dfa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008dd4:	69bb      	ldr	r3, [r7, #24]
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	f023 030f 	bic.w	r3, r3, #15
 8008ddc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	085b      	lsrs	r3, r3, #1
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	f003 0307 	and.w	r3, r3, #7
 8008de8:	b29a      	uxth	r2, r3
 8008dea:	8afb      	ldrh	r3, [r7, #22]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	8afa      	ldrh	r2, [r7, #22]
 8008df6:	60da      	str	r2, [r3, #12]
 8008df8:	e052      	b.n	8008ea0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008e00:	e04e      	b.n	8008ea0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e06:	2b08      	cmp	r3, #8
 8008e08:	d827      	bhi.n	8008e5a <UART_SetConfig+0x506>
 8008e0a:	a201      	add	r2, pc, #4	; (adr r2, 8008e10 <UART_SetConfig+0x4bc>)
 8008e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e10:	08008e35 	.word	0x08008e35
 8008e14:	08008e3d 	.word	0x08008e3d
 8008e18:	08008e45 	.word	0x08008e45
 8008e1c:	08008e5b 	.word	0x08008e5b
 8008e20:	08008e4b 	.word	0x08008e4b
 8008e24:	08008e5b 	.word	0x08008e5b
 8008e28:	08008e5b 	.word	0x08008e5b
 8008e2c:	08008e5b 	.word	0x08008e5b
 8008e30:	08008e53 	.word	0x08008e53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e34:	f7fc f8a2 	bl	8004f7c <HAL_RCC_GetPCLK1Freq>
 8008e38:	61f8      	str	r0, [r7, #28]
        break;
 8008e3a:	e014      	b.n	8008e66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e3c:	f7fc f8b4 	bl	8004fa8 <HAL_RCC_GetPCLK2Freq>
 8008e40:	61f8      	str	r0, [r7, #28]
        break;
 8008e42:	e010      	b.n	8008e66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e44:	4b1e      	ldr	r3, [pc, #120]	; (8008ec0 <UART_SetConfig+0x56c>)
 8008e46:	61fb      	str	r3, [r7, #28]
        break;
 8008e48:	e00d      	b.n	8008e66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e4a:	f7fb ffff 	bl	8004e4c <HAL_RCC_GetSysClockFreq>
 8008e4e:	61f8      	str	r0, [r7, #28]
        break;
 8008e50:	e009      	b.n	8008e66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e56:	61fb      	str	r3, [r7, #28]
        break;
 8008e58:	e005      	b.n	8008e66 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008e64:	bf00      	nop
    }

    if (pclk != 0U)
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d019      	beq.n	8008ea0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	085a      	lsrs	r2, r3, #1
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	441a      	add	r2, r3
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e7e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	2b0f      	cmp	r3, #15
 8008e84:	d909      	bls.n	8008e9a <UART_SetConfig+0x546>
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e8c:	d205      	bcs.n	8008e9a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	b29a      	uxth	r2, r3
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	60da      	str	r2, [r3, #12]
 8008e98:	e002      	b.n	8008ea0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008eac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3728      	adds	r7, #40	; 0x28
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008eba:	bf00      	nop
 8008ebc:	40008000 	.word	0x40008000
 8008ec0:	00f42400 	.word	0x00f42400

08008ec4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed0:	f003 0301 	and.w	r3, r3, #1
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00a      	beq.n	8008eee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	430a      	orrs	r2, r1
 8008eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef2:	f003 0302 	and.w	r3, r3, #2
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00a      	beq.n	8008f10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	430a      	orrs	r2, r1
 8008f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f14:	f003 0304 	and.w	r3, r3, #4
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d00a      	beq.n	8008f32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	430a      	orrs	r2, r1
 8008f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f36:	f003 0308 	and.w	r3, r3, #8
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00a      	beq.n	8008f54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	430a      	orrs	r2, r1
 8008f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f58:	f003 0310 	and.w	r3, r3, #16
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00a      	beq.n	8008f76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	430a      	orrs	r2, r1
 8008f74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7a:	f003 0320 	and.w	r3, r3, #32
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00a      	beq.n	8008f98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	430a      	orrs	r2, r1
 8008f96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d01a      	beq.n	8008fda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	430a      	orrs	r2, r1
 8008fb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fc2:	d10a      	bne.n	8008fda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	430a      	orrs	r2, r1
 8008fd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00a      	beq.n	8008ffc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	430a      	orrs	r2, r1
 8008ffa:	605a      	str	r2, [r3, #4]
  }
}
 8008ffc:	bf00      	nop
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b086      	sub	sp, #24
 800900c:	af02      	add	r7, sp, #8
 800900e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009018:	f7f9 fee0 	bl	8002ddc <HAL_GetTick>
 800901c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f003 0308 	and.w	r3, r3, #8
 8009028:	2b08      	cmp	r3, #8
 800902a:	d10e      	bne.n	800904a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800902c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009030:	9300      	str	r3, [sp, #0]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2200      	movs	r2, #0
 8009036:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 f82d 	bl	800909a <UART_WaitOnFlagUntilTimeout>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d001      	beq.n	800904a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009046:	2303      	movs	r3, #3
 8009048:	e023      	b.n	8009092 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 0304 	and.w	r3, r3, #4
 8009054:	2b04      	cmp	r3, #4
 8009056:	d10e      	bne.n	8009076 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009058:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2200      	movs	r2, #0
 8009062:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 f817 	bl	800909a <UART_WaitOnFlagUntilTimeout>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d001      	beq.n	8009076 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009072:	2303      	movs	r3, #3
 8009074:	e00d      	b.n	8009092 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2220      	movs	r2, #32
 800907a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2220      	movs	r2, #32
 8009080:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b09c      	sub	sp, #112	; 0x70
 800909e:	af00      	add	r7, sp, #0
 80090a0:	60f8      	str	r0, [r7, #12]
 80090a2:	60b9      	str	r1, [r7, #8]
 80090a4:	603b      	str	r3, [r7, #0]
 80090a6:	4613      	mov	r3, r2
 80090a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090aa:	e0a5      	b.n	80091f8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090b2:	f000 80a1 	beq.w	80091f8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090b6:	f7f9 fe91 	bl	8002ddc <HAL_GetTick>
 80090ba:	4602      	mov	r2, r0
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	1ad3      	subs	r3, r2, r3
 80090c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d302      	bcc.n	80090cc <UART_WaitOnFlagUntilTimeout+0x32>
 80090c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d13e      	bne.n	800914a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090d4:	e853 3f00 	ldrex	r3, [r3]
 80090d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80090da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80090e0:	667b      	str	r3, [r7, #100]	; 0x64
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	461a      	mov	r2, r3
 80090e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090ec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80090f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80090f2:	e841 2300 	strex	r3, r2, [r1]
 80090f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80090f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1e6      	bne.n	80090cc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	3308      	adds	r3, #8
 8009104:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009108:	e853 3f00 	ldrex	r3, [r3]
 800910c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800910e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009110:	f023 0301 	bic.w	r3, r3, #1
 8009114:	663b      	str	r3, [r7, #96]	; 0x60
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	3308      	adds	r3, #8
 800911c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800911e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009120:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009122:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009124:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009126:	e841 2300 	strex	r3, r2, [r1]
 800912a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800912c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800912e:	2b00      	cmp	r3, #0
 8009130:	d1e5      	bne.n	80090fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2220      	movs	r2, #32
 8009136:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2220      	movs	r2, #32
 800913c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2200      	movs	r2, #0
 8009142:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009146:	2303      	movs	r3, #3
 8009148:	e067      	b.n	800921a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f003 0304 	and.w	r3, r3, #4
 8009154:	2b00      	cmp	r3, #0
 8009156:	d04f      	beq.n	80091f8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	69db      	ldr	r3, [r3, #28]
 800915e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009166:	d147      	bne.n	80091f8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009170:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917a:	e853 3f00 	ldrex	r3, [r3]
 800917e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009182:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009186:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	461a      	mov	r2, r3
 800918e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009190:	637b      	str	r3, [r7, #52]	; 0x34
 8009192:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009194:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009196:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009198:	e841 2300 	strex	r3, r2, [r1]
 800919c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800919e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d1e6      	bne.n	8009172 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	3308      	adds	r3, #8
 80091aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	e853 3f00 	ldrex	r3, [r3]
 80091b2:	613b      	str	r3, [r7, #16]
   return(result);
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	f023 0301 	bic.w	r3, r3, #1
 80091ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	3308      	adds	r3, #8
 80091c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80091c4:	623a      	str	r2, [r7, #32]
 80091c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c8:	69f9      	ldr	r1, [r7, #28]
 80091ca:	6a3a      	ldr	r2, [r7, #32]
 80091cc:	e841 2300 	strex	r3, r2, [r1]
 80091d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d1e5      	bne.n	80091a4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2220      	movs	r2, #32
 80091dc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2220      	movs	r2, #32
 80091e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2220      	movs	r2, #32
 80091e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2200      	movs	r2, #0
 80091f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80091f4:	2303      	movs	r3, #3
 80091f6:	e010      	b.n	800921a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	69da      	ldr	r2, [r3, #28]
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	4013      	ands	r3, r2
 8009202:	68ba      	ldr	r2, [r7, #8]
 8009204:	429a      	cmp	r2, r3
 8009206:	bf0c      	ite	eq
 8009208:	2301      	moveq	r3, #1
 800920a:	2300      	movne	r3, #0
 800920c:	b2db      	uxtb	r3, r3
 800920e:	461a      	mov	r2, r3
 8009210:	79fb      	ldrb	r3, [r7, #7]
 8009212:	429a      	cmp	r2, r3
 8009214:	f43f af4a 	beq.w	80090ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3770      	adds	r7, #112	; 0x70
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
	...

08009224 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b096      	sub	sp, #88	; 0x58
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	4613      	mov	r3, r2
 8009230:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	68ba      	ldr	r2, [r7, #8]
 8009236:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	88fa      	ldrh	r2, [r7, #6]
 800923c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2222      	movs	r2, #34	; 0x22
 800924c:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009252:	2b00      	cmp	r3, #0
 8009254:	d02b      	beq.n	80092ae <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800925a:	4a42      	ldr	r2, [pc, #264]	; (8009364 <UART_Start_Receive_DMA+0x140>)
 800925c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009262:	4a41      	ldr	r2, [pc, #260]	; (8009368 <UART_Start_Receive_DMA+0x144>)
 8009264:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800926a:	4a40      	ldr	r2, [pc, #256]	; (800936c <UART_Start_Receive_DMA+0x148>)
 800926c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009272:	2200      	movs	r2, #0
 8009274:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	3324      	adds	r3, #36	; 0x24
 8009280:	4619      	mov	r1, r3
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009286:	461a      	mov	r2, r3
 8009288:	88fb      	ldrh	r3, [r7, #6]
 800928a:	f7f9 ffa1 	bl	80031d0 <HAL_DMA_Start_IT>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00c      	beq.n	80092ae <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2210      	movs	r2, #16
 8009298:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2220      	movs	r2, #32
 80092a8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	e055      	b.n	800935a <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2200      	movs	r2, #0
 80092b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	691b      	ldr	r3, [r3, #16]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d018      	beq.n	80092f0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092c6:	e853 3f00 	ldrex	r3, [r3]
 80092ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092d2:	657b      	str	r3, [r7, #84]	; 0x54
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	461a      	mov	r2, r3
 80092da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80092de:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80092e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092e4:	e841 2300 	strex	r3, r2, [r1]
 80092e8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80092ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d1e6      	bne.n	80092be <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	3308      	adds	r3, #8
 80092f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fa:	e853 3f00 	ldrex	r3, [r3]
 80092fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009302:	f043 0301 	orr.w	r3, r3, #1
 8009306:	653b      	str	r3, [r7, #80]	; 0x50
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	3308      	adds	r3, #8
 800930e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009310:	637a      	str	r2, [r7, #52]	; 0x34
 8009312:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009314:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009316:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009318:	e841 2300 	strex	r3, r2, [r1]
 800931c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800931e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009320:	2b00      	cmp	r3, #0
 8009322:	d1e5      	bne.n	80092f0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	3308      	adds	r3, #8
 800932a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	e853 3f00 	ldrex	r3, [r3]
 8009332:	613b      	str	r3, [r7, #16]
   return(result);
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800933a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	3308      	adds	r3, #8
 8009342:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009344:	623a      	str	r2, [r7, #32]
 8009346:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009348:	69f9      	ldr	r1, [r7, #28]
 800934a:	6a3a      	ldr	r2, [r7, #32]
 800934c:	e841 2300 	strex	r3, r2, [r1]
 8009350:	61bb      	str	r3, [r7, #24]
   return(result);
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d1e5      	bne.n	8009324 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3758      	adds	r7, #88	; 0x58
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	08009483 	.word	0x08009483
 8009368:	080095a7 	.word	0x080095a7
 800936c:	080095df 	.word	0x080095df

08009370 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009370:	b480      	push	{r7}
 8009372:	b089      	sub	sp, #36	; 0x24
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	e853 3f00 	ldrex	r3, [r3]
 8009384:	60bb      	str	r3, [r7, #8]
   return(result);
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800938c:	61fb      	str	r3, [r7, #28]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	461a      	mov	r2, r3
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	61bb      	str	r3, [r7, #24]
 8009398:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939a:	6979      	ldr	r1, [r7, #20]
 800939c:	69ba      	ldr	r2, [r7, #24]
 800939e:	e841 2300 	strex	r3, r2, [r1]
 80093a2:	613b      	str	r3, [r7, #16]
   return(result);
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d1e6      	bne.n	8009378 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2220      	movs	r2, #32
 80093ae:	679a      	str	r2, [r3, #120]	; 0x78
}
 80093b0:	bf00      	nop
 80093b2:	3724      	adds	r7, #36	; 0x24
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80093bc:	b480      	push	{r7}
 80093be:	b095      	sub	sp, #84	; 0x54
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093cc:	e853 3f00 	ldrex	r3, [r3]
 80093d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80093d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80093d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	461a      	mov	r2, r3
 80093e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093e2:	643b      	str	r3, [r7, #64]	; 0x40
 80093e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80093e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093ea:	e841 2300 	strex	r3, r2, [r1]
 80093ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80093f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d1e6      	bne.n	80093c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	3308      	adds	r3, #8
 80093fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fe:	6a3b      	ldr	r3, [r7, #32]
 8009400:	e853 3f00 	ldrex	r3, [r3]
 8009404:	61fb      	str	r3, [r7, #28]
   return(result);
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	f023 0301 	bic.w	r3, r3, #1
 800940c:	64bb      	str	r3, [r7, #72]	; 0x48
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	3308      	adds	r3, #8
 8009414:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009416:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009418:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800941c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800941e:	e841 2300 	strex	r3, r2, [r1]
 8009422:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009426:	2b00      	cmp	r3, #0
 8009428:	d1e5      	bne.n	80093f6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800942e:	2b01      	cmp	r3, #1
 8009430:	d118      	bne.n	8009464 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	e853 3f00 	ldrex	r3, [r3]
 800943e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	f023 0310 	bic.w	r3, r3, #16
 8009446:	647b      	str	r3, [r7, #68]	; 0x44
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	461a      	mov	r2, r3
 800944e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009450:	61bb      	str	r3, [r7, #24]
 8009452:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009454:	6979      	ldr	r1, [r7, #20]
 8009456:	69ba      	ldr	r2, [r7, #24]
 8009458:	e841 2300 	strex	r3, r2, [r1]
 800945c:	613b      	str	r3, [r7, #16]
   return(result);
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d1e6      	bne.n	8009432 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2220      	movs	r2, #32
 8009468:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009476:	bf00      	nop
 8009478:	3754      	adds	r7, #84	; 0x54
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr

08009482 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b09c      	sub	sp, #112	; 0x70
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800948e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f003 0320 	and.w	r3, r3, #32
 800949a:	2b00      	cmp	r3, #0
 800949c:	d170      	bne.n	8009580 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800949e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094a0:	2200      	movs	r2, #0
 80094a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094ae:	e853 3f00 	ldrex	r3, [r3]
 80094b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80094b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80094bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	461a      	mov	r2, r3
 80094c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80094c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80094ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80094cc:	e841 2300 	strex	r3, r2, [r1]
 80094d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80094d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d1e6      	bne.n	80094a6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	3308      	adds	r3, #8
 80094de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e2:	e853 3f00 	ldrex	r3, [r3]
 80094e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80094e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ea:	f023 0301 	bic.w	r3, r3, #1
 80094ee:	667b      	str	r3, [r7, #100]	; 0x64
 80094f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	3308      	adds	r3, #8
 80094f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80094f8:	647a      	str	r2, [r7, #68]	; 0x44
 80094fa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80094fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009500:	e841 2300 	strex	r3, r2, [r1]
 8009504:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009508:	2b00      	cmp	r3, #0
 800950a:	d1e5      	bne.n	80094d8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800950c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	3308      	adds	r3, #8
 8009512:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009516:	e853 3f00 	ldrex	r3, [r3]
 800951a:	623b      	str	r3, [r7, #32]
   return(result);
 800951c:	6a3b      	ldr	r3, [r7, #32]
 800951e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009522:	663b      	str	r3, [r7, #96]	; 0x60
 8009524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	3308      	adds	r3, #8
 800952a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800952c:	633a      	str	r2, [r7, #48]	; 0x30
 800952e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009530:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009534:	e841 2300 	strex	r3, r2, [r1]
 8009538:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800953a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953c:	2b00      	cmp	r3, #0
 800953e:	d1e5      	bne.n	800950c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009542:	2220      	movs	r2, #32
 8009544:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800954a:	2b01      	cmp	r3, #1
 800954c:	d118      	bne.n	8009580 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800954e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	e853 3f00 	ldrex	r3, [r3]
 800955a:	60fb      	str	r3, [r7, #12]
   return(result);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f023 0310 	bic.w	r3, r3, #16
 8009562:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	461a      	mov	r2, r3
 800956a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800956c:	61fb      	str	r3, [r7, #28]
 800956e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009570:	69b9      	ldr	r1, [r7, #24]
 8009572:	69fa      	ldr	r2, [r7, #28]
 8009574:	e841 2300 	strex	r3, r2, [r1]
 8009578:	617b      	str	r3, [r7, #20]
   return(result);
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d1e6      	bne.n	800954e <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009584:	2b01      	cmp	r3, #1
 8009586:	d107      	bne.n	8009598 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800958a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800958e:	4619      	mov	r1, r3
 8009590:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009592:	f7f8 ff43 	bl	800241c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009596:	e002      	b.n	800959e <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8009598:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800959a:	f7f8 ff35 	bl	8002408 <HAL_UART_RxCpltCallback>
}
 800959e:	bf00      	nop
 80095a0:	3770      	adds	r7, #112	; 0x70
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b084      	sub	sp, #16
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d109      	bne.n	80095d0 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80095c2:	085b      	lsrs	r3, r3, #1
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	4619      	mov	r1, r3
 80095c8:	68f8      	ldr	r0, [r7, #12]
 80095ca:	f7f8 ff27 	bl	800241c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80095ce:	e002      	b.n	80095d6 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f7ff f9ab 	bl	800892c <HAL_UART_RxHalfCpltCallback>
}
 80095d6:	bf00      	nop
 80095d8:	3710      	adds	r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80095de:	b580      	push	{r7, lr}
 80095e0:	b086      	sub	sp, #24
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ea:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095f0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095f6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009602:	2b80      	cmp	r3, #128	; 0x80
 8009604:	d109      	bne.n	800961a <UART_DMAError+0x3c>
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	2b21      	cmp	r3, #33	; 0x21
 800960a:	d106      	bne.n	800961a <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	2200      	movs	r2, #0
 8009610:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8009614:	6978      	ldr	r0, [r7, #20]
 8009616:	f7ff feab 	bl	8009370 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009624:	2b40      	cmp	r3, #64	; 0x40
 8009626:	d109      	bne.n	800963c <UART_DMAError+0x5e>
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2b22      	cmp	r3, #34	; 0x22
 800962c:	d106      	bne.n	800963c <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	2200      	movs	r2, #0
 8009632:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8009636:	6978      	ldr	r0, [r7, #20]
 8009638:	f7ff fec0 	bl	80093bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009642:	f043 0210 	orr.w	r2, r3, #16
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800964c:	6978      	ldr	r0, [r7, #20]
 800964e:	f7ff f977 	bl	8008940 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009652:	bf00      	nop
 8009654:	3718      	adds	r7, #24
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}

0800965a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800965a:	b580      	push	{r7, lr}
 800965c:	b08c      	sub	sp, #48	; 0x30
 800965e:	af00      	add	r7, sp, #0
 8009660:	60f8      	str	r0, [r7, #12]
 8009662:	60b9      	str	r1, [r7, #8]
 8009664:	4613      	mov	r3, r2
 8009666:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800966c:	2b20      	cmp	r3, #32
 800966e:	d14a      	bne.n	8009706 <HAL_UARTEx_ReceiveToIdle_DMA+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d002      	beq.n	800967c <HAL_UARTEx_ReceiveToIdle_DMA+0x22>
 8009676:	88fb      	ldrh	r3, [r7, #6]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d101      	bne.n	8009680 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
    {
      return HAL_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	e043      	b.n	8009708 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
    }

    __HAL_LOCK(huart);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009686:	2b01      	cmp	r3, #1
 8009688:	d101      	bne.n	800968e <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 800968a:	2302      	movs	r3, #2
 800968c:	e03c      	b.n	8009708 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2201      	movs	r2, #1
 8009692:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2201      	movs	r2, #1
 800969a:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800969c:	88fb      	ldrh	r3, [r7, #6]
 800969e:	461a      	mov	r2, r3
 80096a0:	68b9      	ldr	r1, [r7, #8]
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	f7ff fdbe 	bl	8009224 <UART_Start_Receive_DMA>
 80096a8:	4603      	mov	r3, r0
 80096aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80096ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d124      	bne.n	8009700 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d11d      	bne.n	80096fa <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2210      	movs	r2, #16
 80096c4:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	e853 3f00 	ldrex	r3, [r3]
 80096d2:	617b      	str	r3, [r7, #20]
   return(result);
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	f043 0310 	orr.w	r3, r3, #16
 80096da:	62bb      	str	r3, [r7, #40]	; 0x28
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	461a      	mov	r2, r3
 80096e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e4:	627b      	str	r3, [r7, #36]	; 0x24
 80096e6:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e8:	6a39      	ldr	r1, [r7, #32]
 80096ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ec:	e841 2300 	strex	r3, r2, [r1]
 80096f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80096f2:	69fb      	ldr	r3, [r7, #28]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d1e6      	bne.n	80096c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
 80096f8:	e002      	b.n	8009700 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8009700:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009704:	e000      	b.n	8009708 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  }
  else
  {
    return HAL_BUSY;
 8009706:	2302      	movs	r3, #2
  }
}
 8009708:	4618      	mov	r0, r3
 800970a:	3730      	adds	r7, #48	; 0x30
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009710:	b084      	sub	sp, #16
 8009712:	b480      	push	{r7}
 8009714:	b085      	sub	sp, #20
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
 800971a:	f107 001c 	add.w	r0, r7, #28
 800971e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009722:	2300      	movs	r3, #0
 8009724:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8009726:	6a3b      	ldr	r3, [r7, #32]
 8009728:	68fa      	ldr	r2, [r7, #12]
 800972a:	4313      	orrs	r3, r2
 800972c:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800972e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8009730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8009732:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009734:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009736:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800973a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800973c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800973e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	4313      	orrs	r3, r2
 8009744:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800974e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	431a      	orrs	r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800975a:	2300      	movs	r3, #0
}
 800975c:	4618      	mov	r0, r3
 800975e:	3714      	adds	r7, #20
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	b004      	add	sp, #16
 8009768:	4770      	bx	lr

0800976a <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800976a:	b480      	push	{r7}
 800976c:	b083      	sub	sp, #12
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009778:	4618      	mov	r0, r3
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8009784:	b480      	push	{r7}
 8009786:	b083      	sub	sp, #12
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	370c      	adds	r7, #12
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr

080097a6 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b082      	sub	sp, #8
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2203      	movs	r2, #3
 80097b2:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80097b4:	2002      	movs	r0, #2
 80097b6:	f7f9 fb1d 	bl	8002df4 <HAL_Delay>

  return HAL_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3708      	adds	r7, #8
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f003 0303 	and.w	r3, r3, #3
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b085      	sub	sp, #20
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80097ea:	2300      	movs	r3, #0
 80097ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80097fe:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009804:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800980a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	4313      	orrs	r3, r2
 8009810:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	68db      	ldr	r3, [r3, #12]
 8009816:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800981a:	f023 030f 	bic.w	r3, r3, #15
 800981e:	68fa      	ldr	r2, [r7, #12]
 8009820:	431a      	orrs	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009826:	2300      	movs	r3, #0
}
 8009828:	4618      	mov	r0, r3
 800982a:	3714      	adds	r7, #20
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	691b      	ldr	r3, [r3, #16]
 8009840:	b2db      	uxtb	r3, r3
}
 8009842:	4618      	mov	r0, r3
 8009844:	370c      	adds	r7, #12
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr

0800984e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800984e:	b480      	push	{r7}
 8009850:	b085      	sub	sp, #20
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
 8009856:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	3314      	adds	r3, #20
 800985c:	461a      	mov	r2, r3
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	4413      	add	r3, r2
 8009862:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
}
 8009868:	4618      	mov	r0, r3
 800986a:	3714      	adds	r7, #20
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009874:	b480      	push	{r7}
 8009876:	b085      	sub	sp, #20
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800987e:	2300      	movs	r3, #0
 8009880:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	685a      	ldr	r2, [r3, #4]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800989a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80098a0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80098a6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	4313      	orrs	r3, r2
 80098ac:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	431a      	orrs	r2, r3
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80098be:	2300      	movs	r3, #0

}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3714      	adds	r7, #20
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b088      	sub	sp, #32
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80098da:	2310      	movs	r3, #16
 80098dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80098de:	2340      	movs	r3, #64	; 0x40
 80098e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80098e2:	2300      	movs	r3, #0
 80098e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80098ec:	f107 0308 	add.w	r3, r7, #8
 80098f0:	4619      	mov	r1, r3
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f7ff ff74 	bl	80097e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80098f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80098fc:	2110      	movs	r1, #16
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 f9d6 	bl	8009cb0 <SDMMC_GetCmdResp1>
 8009904:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009906:	69fb      	ldr	r3, [r7, #28]
}
 8009908:	4618      	mov	r0, r3
 800990a:	3720      	adds	r7, #32
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b088      	sub	sp, #32
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800991e:	2311      	movs	r3, #17
 8009920:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009922:	2340      	movs	r3, #64	; 0x40
 8009924:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009926:	2300      	movs	r3, #0
 8009928:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800992a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800992e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009930:	f107 0308 	add.w	r3, r7, #8
 8009934:	4619      	mov	r1, r3
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f7ff ff52 	bl	80097e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800993c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009940:	2111      	movs	r1, #17
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 f9b4 	bl	8009cb0 <SDMMC_GetCmdResp1>
 8009948:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800994a:	69fb      	ldr	r3, [r7, #28]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3720      	adds	r7, #32
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b088      	sub	sp, #32
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009962:	2312      	movs	r3, #18
 8009964:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009966:	2340      	movs	r3, #64	; 0x40
 8009968:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800996a:	2300      	movs	r3, #0
 800996c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800996e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009972:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009974:	f107 0308 	add.w	r3, r7, #8
 8009978:	4619      	mov	r1, r3
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f7ff ff30 	bl	80097e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009980:	f241 3288 	movw	r2, #5000	; 0x1388
 8009984:	2112      	movs	r1, #18
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 f992 	bl	8009cb0 <SDMMC_GetCmdResp1>
 800998c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800998e:	69fb      	ldr	r3, [r7, #28]
}
 8009990:	4618      	mov	r0, r3
 8009992:	3720      	adds	r7, #32
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b088      	sub	sp, #32
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80099a6:	2318      	movs	r3, #24
 80099a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099aa:	2340      	movs	r3, #64	; 0x40
 80099ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099ae:	2300      	movs	r3, #0
 80099b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099b8:	f107 0308 	add.w	r3, r7, #8
 80099bc:	4619      	mov	r1, r3
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f7ff ff0e 	bl	80097e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80099c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80099c8:	2118      	movs	r1, #24
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 f970 	bl	8009cb0 <SDMMC_GetCmdResp1>
 80099d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099d2:	69fb      	ldr	r3, [r7, #28]
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3720      	adds	r7, #32
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b088      	sub	sp, #32
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80099ea:	2319      	movs	r3, #25
 80099ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099ee:	2340      	movs	r3, #64	; 0x40
 80099f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099f2:	2300      	movs	r3, #0
 80099f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099fc:	f107 0308 	add.w	r3, r7, #8
 8009a00:	4619      	mov	r1, r3
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f7ff feec 	bl	80097e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a0c:	2119      	movs	r1, #25
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 f94e 	bl	8009cb0 <SDMMC_GetCmdResp1>
 8009a14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a16:	69fb      	ldr	r3, [r7, #28]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3720      	adds	r7, #32
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b088      	sub	sp, #32
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009a2c:	230c      	movs	r3, #12
 8009a2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a30:	2340      	movs	r3, #64	; 0x40
 8009a32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a34:	2300      	movs	r3, #0
 8009a36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a3c:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a3e:	f107 0308 	add.w	r3, r7, #8
 8009a42:	4619      	mov	r1, r3
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f7ff fecb 	bl	80097e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009a4a:	4a05      	ldr	r2, [pc, #20]	; (8009a60 <SDMMC_CmdStopTransfer+0x40>)
 8009a4c:	210c      	movs	r1, #12
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 f92e 	bl	8009cb0 <SDMMC_GetCmdResp1>
 8009a54:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8009a56:	69fb      	ldr	r3, [r7, #28]
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3720      	adds	r7, #32
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	05f5e100 	.word	0x05f5e100

08009a64 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b08a      	sub	sp, #40	; 0x28
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009a74:	2307      	movs	r3, #7
 8009a76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a78:	2340      	movs	r3, #64	; 0x40
 8009a7a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a84:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a86:	f107 0310 	add.w	r3, r7, #16
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f7ff fea7 	bl	80097e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a96:	2107      	movs	r1, #7
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f000 f909 	bl	8009cb0 <SDMMC_GetCmdResp1>
 8009a9e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3728      	adds	r7, #40	; 0x28
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b088      	sub	sp, #32
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009aba:	2300      	movs	r3, #0
 8009abc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ac6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ac8:	f107 0308 	add.w	r3, r7, #8
 8009acc:	4619      	mov	r1, r3
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f7ff fe86 	bl	80097e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 fb23 	bl	800a120 <SDMMC_GetCmdError>
 8009ada:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009adc:	69fb      	ldr	r3, [r7, #28]
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3720      	adds	r7, #32
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}

08009ae6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009ae6:	b580      	push	{r7, lr}
 8009ae8:	b088      	sub	sp, #32
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009aee:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009af2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009af4:	2308      	movs	r3, #8
 8009af6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009af8:	2340      	movs	r3, #64	; 0x40
 8009afa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009afc:	2300      	movs	r3, #0
 8009afe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b06:	f107 0308 	add.w	r3, r7, #8
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f7ff fe67 	bl	80097e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 fab6 	bl	800a084 <SDMMC_GetCmdResp7>
 8009b18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b1a:	69fb      	ldr	r3, [r7, #28]
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3720      	adds	r7, #32
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b088      	sub	sp, #32
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009b32:	2337      	movs	r3, #55	; 0x37
 8009b34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b36:	2340      	movs	r3, #64	; 0x40
 8009b38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b44:	f107 0308 	add.w	r3, r7, #8
 8009b48:	4619      	mov	r1, r3
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f7ff fe48 	bl	80097e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b54:	2137      	movs	r1, #55	; 0x37
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 f8aa 	bl	8009cb0 <SDMMC_GetCmdResp1>
 8009b5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b5e:	69fb      	ldr	r3, [r7, #28]
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3720      	adds	r7, #32
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b088      	sub	sp, #32
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b7c:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009b7e:	2329      	movs	r3, #41	; 0x29
 8009b80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b82:	2340      	movs	r3, #64	; 0x40
 8009b84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b86:	2300      	movs	r3, #0
 8009b88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b90:	f107 0308 	add.w	r3, r7, #8
 8009b94:	4619      	mov	r1, r3
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f7ff fe22 	bl	80097e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 f9bd 	bl	8009f1c <SDMMC_GetCmdResp3>
 8009ba2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ba4:	69fb      	ldr	r3, [r7, #28]
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3720      	adds	r7, #32
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b088      	sub	sp, #32
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009bba:	2302      	movs	r3, #2
 8009bbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009bbe:	23c0      	movs	r3, #192	; 0xc0
 8009bc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bcc:	f107 0308 	add.w	r3, r7, #8
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f7ff fe04 	bl	80097e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 f957 	bl	8009e8c <SDMMC_GetCmdResp2>
 8009bde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009be0:	69fb      	ldr	r3, [r7, #28]
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3720      	adds	r7, #32
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}

08009bea <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b088      	sub	sp, #32
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
 8009bf2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009bf8:	2309      	movs	r3, #9
 8009bfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009bfc:	23c0      	movs	r3, #192	; 0xc0
 8009bfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c00:	2300      	movs	r3, #0
 8009c02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c0a:	f107 0308 	add.w	r3, r7, #8
 8009c0e:	4619      	mov	r1, r3
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f7ff fde5 	bl	80097e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f938 	bl	8009e8c <SDMMC_GetCmdResp2>
 8009c1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c1e:	69fb      	ldr	r3, [r7, #28]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3720      	adds	r7, #32
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b088      	sub	sp, #32
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009c32:	2300      	movs	r3, #0
 8009c34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009c36:	2303      	movs	r3, #3
 8009c38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c3a:	2340      	movs	r3, #64	; 0x40
 8009c3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c48:	f107 0308 	add.w	r3, r7, #8
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f7ff fdc6 	bl	80097e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009c54:	683a      	ldr	r2, [r7, #0]
 8009c56:	2103      	movs	r1, #3
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 f99d 	bl	8009f98 <SDMMC_GetCmdResp6>
 8009c5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c60:	69fb      	ldr	r3, [r7, #28]
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3720      	adds	r7, #32
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b088      	sub	sp, #32
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
 8009c72:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009c78:	230d      	movs	r3, #13
 8009c7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c7c:	2340      	movs	r3, #64	; 0x40
 8009c7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c80:	2300      	movs	r3, #0
 8009c82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c8a:	f107 0308 	add.w	r3, r7, #8
 8009c8e:	4619      	mov	r1, r3
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f7ff fda5 	bl	80097e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c9a:	210d      	movs	r1, #13
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 f807 	bl	8009cb0 <SDMMC_GetCmdResp1>
 8009ca2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ca4:	69fb      	ldr	r3, [r7, #28]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3720      	adds	r7, #32
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
	...

08009cb0 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b088      	sub	sp, #32
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	460b      	mov	r3, r1
 8009cba:	607a      	str	r2, [r7, #4]
 8009cbc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009cbe:	4b70      	ldr	r3, [pc, #448]	; (8009e80 <SDMMC_GetCmdResp1+0x1d0>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a70      	ldr	r2, [pc, #448]	; (8009e84 <SDMMC_GetCmdResp1+0x1d4>)
 8009cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8009cc8:	0a5a      	lsrs	r2, r3, #9
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	fb02 f303 	mul.w	r3, r2, r3
 8009cd0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	1e5a      	subs	r2, r3, #1
 8009cd6:	61fa      	str	r2, [r7, #28]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d102      	bne.n	8009ce2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009cdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ce0:	e0c9      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ce6:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d0ef      	beq.n	8009cd2 <SDMMC_GetCmdResp1+0x22>
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d1ea      	bne.n	8009cd2 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d00:	f003 0304 	and.w	r3, r3, #4
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d004      	beq.n	8009d12 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2204      	movs	r2, #4
 8009d0c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d0e:	2304      	movs	r3, #4
 8009d10:	e0b1      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d16:	f003 0301 	and.w	r3, r3, #1
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d004      	beq.n	8009d28 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2201      	movs	r2, #1
 8009d22:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d24:	2301      	movs	r3, #1
 8009d26:	e0a6      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	22c5      	movs	r2, #197	; 0xc5
 8009d2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009d2e:	68f8      	ldr	r0, [r7, #12]
 8009d30:	f7ff fd80 	bl	8009834 <SDMMC_GetCommandResponse>
 8009d34:	4603      	mov	r3, r0
 8009d36:	461a      	mov	r2, r3
 8009d38:	7afb      	ldrb	r3, [r7, #11]
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d001      	beq.n	8009d42 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e099      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009d42:	2100      	movs	r1, #0
 8009d44:	68f8      	ldr	r0, [r7, #12]
 8009d46:	f7ff fd82 	bl	800984e <SDMMC_GetResponse>
 8009d4a:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009d4c:	697a      	ldr	r2, [r7, #20]
 8009d4e:	4b4e      	ldr	r3, [pc, #312]	; (8009e88 <SDMMC_GetCmdResp1+0x1d8>)
 8009d50:	4013      	ands	r3, r2
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d101      	bne.n	8009d5a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009d56:	2300      	movs	r3, #0
 8009d58:	e08d      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	da02      	bge.n	8009d66 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009d60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009d64:	e087      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d001      	beq.n	8009d74 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009d70:	2340      	movs	r3, #64	; 0x40
 8009d72:	e080      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d001      	beq.n	8009d82 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009d7e:	2380      	movs	r3, #128	; 0x80
 8009d80:	e079      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d002      	beq.n	8009d92 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d90:	e071      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d002      	beq.n	8009da2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009d9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009da0:	e069      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d002      	beq.n	8009db2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009db0:	e061      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d002      	beq.n	8009dc2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009dbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009dc0:	e059      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d002      	beq.n	8009dd2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009dcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009dd0:	e051      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d002      	beq.n	8009de2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009ddc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009de0:	e049      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d002      	beq.n	8009df2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009dec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009df0:	e041      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d002      	beq.n	8009e02 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009dfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e00:	e039      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d002      	beq.n	8009e12 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009e0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009e10:	e031      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d002      	beq.n	8009e22 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009e1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009e20:	e029      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d002      	beq.n	8009e32 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009e2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009e30:	e021      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d002      	beq.n	8009e42 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009e3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009e40:	e019      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d002      	beq.n	8009e52 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009e4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009e50:	e011      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d002      	beq.n	8009e62 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009e5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009e60:	e009      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	f003 0308 	and.w	r3, r3, #8
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d002      	beq.n	8009e72 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009e6c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009e70:	e001      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009e72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3720      	adds	r7, #32
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	2000010c 	.word	0x2000010c
 8009e84:	10624dd3 	.word	0x10624dd3
 8009e88:	fdffe008 	.word	0xfdffe008

08009e8c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009e94:	4b1f      	ldr	r3, [pc, #124]	; (8009f14 <SDMMC_GetCmdResp2+0x88>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a1f      	ldr	r2, [pc, #124]	; (8009f18 <SDMMC_GetCmdResp2+0x8c>)
 8009e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e9e:	0a5b      	lsrs	r3, r3, #9
 8009ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ea4:	fb02 f303 	mul.w	r3, r2, r3
 8009ea8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	1e5a      	subs	r2, r3, #1
 8009eae:	60fa      	str	r2, [r7, #12]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d102      	bne.n	8009eba <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009eb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009eb8:	e026      	b.n	8009f08 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ebe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d0ef      	beq.n	8009eaa <SDMMC_GetCmdResp2+0x1e>
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d1ea      	bne.n	8009eaa <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ed8:	f003 0304 	and.w	r3, r3, #4
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d004      	beq.n	8009eea <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2204      	movs	r2, #4
 8009ee4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009ee6:	2304      	movs	r3, #4
 8009ee8:	e00e      	b.n	8009f08 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eee:	f003 0301 	and.w	r3, r3, #1
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d004      	beq.n	8009f00 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2201      	movs	r2, #1
 8009efa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009efc:	2301      	movs	r3, #1
 8009efe:	e003      	b.n	8009f08 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	22c5      	movs	r2, #197	; 0xc5
 8009f04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009f06:	2300      	movs	r3, #0
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3714      	adds	r7, #20
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr
 8009f14:	2000010c 	.word	0x2000010c
 8009f18:	10624dd3 	.word	0x10624dd3

08009f1c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009f24:	4b1a      	ldr	r3, [pc, #104]	; (8009f90 <SDMMC_GetCmdResp3+0x74>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a1a      	ldr	r2, [pc, #104]	; (8009f94 <SDMMC_GetCmdResp3+0x78>)
 8009f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f2e:	0a5b      	lsrs	r3, r3, #9
 8009f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f34:	fb02 f303 	mul.w	r3, r2, r3
 8009f38:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	1e5a      	subs	r2, r3, #1
 8009f3e:	60fa      	str	r2, [r7, #12]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d102      	bne.n	8009f4a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f48:	e01b      	b.n	8009f82 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f4e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d0ef      	beq.n	8009f3a <SDMMC_GetCmdResp3+0x1e>
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d1ea      	bne.n	8009f3a <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f68:	f003 0304 	and.w	r3, r3, #4
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d004      	beq.n	8009f7a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2204      	movs	r2, #4
 8009f74:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f76:	2304      	movs	r3, #4
 8009f78:	e003      	b.n	8009f82 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	22c5      	movs	r2, #197	; 0xc5
 8009f7e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009f80:	2300      	movs	r3, #0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3714      	adds	r7, #20
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop
 8009f90:	2000010c 	.word	0x2000010c
 8009f94:	10624dd3 	.word	0x10624dd3

08009f98 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b088      	sub	sp, #32
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	607a      	str	r2, [r7, #4]
 8009fa4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009fa6:	4b35      	ldr	r3, [pc, #212]	; (800a07c <SDMMC_GetCmdResp6+0xe4>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a35      	ldr	r2, [pc, #212]	; (800a080 <SDMMC_GetCmdResp6+0xe8>)
 8009fac:	fba2 2303 	umull	r2, r3, r2, r3
 8009fb0:	0a5b      	lsrs	r3, r3, #9
 8009fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fb6:	fb02 f303 	mul.w	r3, r2, r3
 8009fba:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	1e5a      	subs	r2, r3, #1
 8009fc0:	61fa      	str	r2, [r7, #28]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d102      	bne.n	8009fcc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009fc6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009fca:	e052      	b.n	800a072 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fd0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d0ef      	beq.n	8009fbc <SDMMC_GetCmdResp6+0x24>
 8009fdc:	69bb      	ldr	r3, [r7, #24]
 8009fde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d1ea      	bne.n	8009fbc <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fea:	f003 0304 	and.w	r3, r3, #4
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d004      	beq.n	8009ffc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2204      	movs	r2, #4
 8009ff6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009ff8:	2304      	movs	r3, #4
 8009ffa:	e03a      	b.n	800a072 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a000:	f003 0301 	and.w	r3, r3, #1
 800a004:	2b00      	cmp	r3, #0
 800a006:	d004      	beq.n	800a012 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2201      	movs	r2, #1
 800a00c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a00e:	2301      	movs	r3, #1
 800a010:	e02f      	b.n	800a072 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a012:	68f8      	ldr	r0, [r7, #12]
 800a014:	f7ff fc0e 	bl	8009834 <SDMMC_GetCommandResponse>
 800a018:	4603      	mov	r3, r0
 800a01a:	461a      	mov	r2, r3
 800a01c:	7afb      	ldrb	r3, [r7, #11]
 800a01e:	4293      	cmp	r3, r2
 800a020:	d001      	beq.n	800a026 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a022:	2301      	movs	r3, #1
 800a024:	e025      	b.n	800a072 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	22c5      	movs	r2, #197	; 0xc5
 800a02a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a02c:	2100      	movs	r1, #0
 800a02e:	68f8      	ldr	r0, [r7, #12]
 800a030:	f7ff fc0d 	bl	800984e <SDMMC_GetResponse>
 800a034:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d106      	bne.n	800a04e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	0c1b      	lsrs	r3, r3, #16
 800a044:	b29a      	uxth	r2, r3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a04a:	2300      	movs	r3, #0
 800a04c:	e011      	b.n	800a072 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a054:	2b00      	cmp	r3, #0
 800a056:	d002      	beq.n	800a05e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a058:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a05c:	e009      	b.n	800a072 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a064:	2b00      	cmp	r3, #0
 800a066:	d002      	beq.n	800a06e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a06c:	e001      	b.n	800a072 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a06e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a072:	4618      	mov	r0, r3
 800a074:	3720      	adds	r7, #32
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	2000010c 	.word	0x2000010c
 800a080:	10624dd3 	.word	0x10624dd3

0800a084 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a084:	b480      	push	{r7}
 800a086:	b085      	sub	sp, #20
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a08c:	4b22      	ldr	r3, [pc, #136]	; (800a118 <SDMMC_GetCmdResp7+0x94>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a22      	ldr	r2, [pc, #136]	; (800a11c <SDMMC_GetCmdResp7+0x98>)
 800a092:	fba2 2303 	umull	r2, r3, r2, r3
 800a096:	0a5b      	lsrs	r3, r3, #9
 800a098:	f241 3288 	movw	r2, #5000	; 0x1388
 800a09c:	fb02 f303 	mul.w	r3, r2, r3
 800a0a0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	1e5a      	subs	r2, r3, #1
 800a0a6:	60fa      	str	r2, [r7, #12]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d102      	bne.n	800a0b2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a0ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0b0:	e02c      	b.n	800a10c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d0ef      	beq.n	800a0a2 <SDMMC_GetCmdResp7+0x1e>
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d1ea      	bne.n	800a0a2 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0d0:	f003 0304 	and.w	r3, r3, #4
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d004      	beq.n	800a0e2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2204      	movs	r2, #4
 800a0dc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a0de:	2304      	movs	r3, #4
 800a0e0:	e014      	b.n	800a10c <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0e6:	f003 0301 	and.w	r3, r3, #1
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d004      	beq.n	800a0f8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	e009      	b.n	800a10c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a100:	2b00      	cmp	r3, #0
 800a102:	d002      	beq.n	800a10a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2240      	movs	r2, #64	; 0x40
 800a108:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a10a:	2300      	movs	r3, #0

}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3714      	adds	r7, #20
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr
 800a118:	2000010c 	.word	0x2000010c
 800a11c:	10624dd3 	.word	0x10624dd3

0800a120 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a120:	b480      	push	{r7}
 800a122:	b085      	sub	sp, #20
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a128:	4b11      	ldr	r3, [pc, #68]	; (800a170 <SDMMC_GetCmdError+0x50>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a11      	ldr	r2, [pc, #68]	; (800a174 <SDMMC_GetCmdError+0x54>)
 800a12e:	fba2 2303 	umull	r2, r3, r2, r3
 800a132:	0a5b      	lsrs	r3, r3, #9
 800a134:	f241 3288 	movw	r2, #5000	; 0x1388
 800a138:	fb02 f303 	mul.w	r3, r2, r3
 800a13c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	1e5a      	subs	r2, r3, #1
 800a142:	60fa      	str	r2, [r7, #12]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d102      	bne.n	800a14e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a148:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a14c:	e009      	b.n	800a162 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a156:	2b00      	cmp	r3, #0
 800a158:	d0f1      	beq.n	800a13e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	22c5      	movs	r2, #197	; 0xc5
 800a15e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a160:	2300      	movs	r3, #0
}
 800a162:	4618      	mov	r0, r3
 800a164:	3714      	adds	r7, #20
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr
 800a16e:	bf00      	nop
 800a170:	2000010c 	.word	0x2000010c
 800a174:	10624dd3 	.word	0x10624dd3

0800a178 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a17c:	4904      	ldr	r1, [pc, #16]	; (800a190 <MX_FATFS_Init+0x18>)
 800a17e:	4805      	ldr	r0, [pc, #20]	; (800a194 <MX_FATFS_Init+0x1c>)
 800a180:	f002 fb7e 	bl	800c880 <FATFS_LinkDriver>
 800a184:	4603      	mov	r3, r0
 800a186:	461a      	mov	r2, r3
 800a188:	4b03      	ldr	r3, [pc, #12]	; (800a198 <MX_FATFS_Init+0x20>)
 800a18a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a18c:	bf00      	nop
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	20000a44 	.word	0x20000a44
 800a194:	0800fd3c 	.word	0x0800fd3c
 800a198:	20000a40 	.word	0x20000a40

0800a19c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a19c:	b480      	push	{r7}
 800a19e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a1a0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a1b6:	f000 f89e 	bl	800a2f6 <BSP_SD_IsDetected>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d001      	beq.n	800a1c4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a1c0:	2302      	movs	r3, #2
 800a1c2:	e005      	b.n	800a1d0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a1c4:	4804      	ldr	r0, [pc, #16]	; (800a1d8 <BSP_SD_Init+0x2c>)
 800a1c6:	f7fc fe26 	bl	8006e16 <HAL_SD_Init>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800a1ce:	79fb      	ldrb	r3, [r7, #7]
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3708      	adds	r7, #8
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	20000694 	.word	0x20000694

0800a1dc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b088      	sub	sp, #32
 800a1e0:	af02      	add	r7, sp, #8
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	607a      	str	r2, [r7, #4]
 800a1e8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	9300      	str	r3, [sp, #0]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	68ba      	ldr	r2, [r7, #8]
 800a1f6:	68f9      	ldr	r1, [r7, #12]
 800a1f8:	4806      	ldr	r0, [pc, #24]	; (800a214 <BSP_SD_ReadBlocks+0x38>)
 800a1fa:	f7fc fee3 	bl	8006fc4 <HAL_SD_ReadBlocks>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d001      	beq.n	800a208 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a204:	2301      	movs	r3, #1
 800a206:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a208:	7dfb      	ldrb	r3, [r7, #23]
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3718      	adds	r7, #24
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	20000694 	.word	0x20000694

0800a218 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b088      	sub	sp, #32
 800a21c:	af02      	add	r7, sp, #8
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	607a      	str	r2, [r7, #4]
 800a224:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a226:	2300      	movs	r3, #0
 800a228:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	9300      	str	r3, [sp, #0]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	68ba      	ldr	r2, [r7, #8]
 800a232:	68f9      	ldr	r1, [r7, #12]
 800a234:	4806      	ldr	r0, [pc, #24]	; (800a250 <BSP_SD_WriteBlocks+0x38>)
 800a236:	f7fd f8a3 	bl	8007380 <HAL_SD_WriteBlocks>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d001      	beq.n	800a244 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a240:	2301      	movs	r3, #1
 800a242:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a244:	7dfb      	ldrb	r3, [r7, #23]
}
 800a246:	4618      	mov	r0, r3
 800a248:	3718      	adds	r7, #24
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	20000694 	.word	0x20000694

0800a254 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a258:	4805      	ldr	r0, [pc, #20]	; (800a270 <BSP_SD_GetCardState+0x1c>)
 800a25a:	f7fd fd67 	bl	8007d2c <HAL_SD_GetCardState>
 800a25e:	4603      	mov	r3, r0
 800a260:	2b04      	cmp	r3, #4
 800a262:	bf14      	ite	ne
 800a264:	2301      	movne	r3, #1
 800a266:	2300      	moveq	r3, #0
 800a268:	b2db      	uxtb	r3, r3
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	20000694 	.word	0x20000694

0800a274 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a27c:	6879      	ldr	r1, [r7, #4]
 800a27e:	4803      	ldr	r0, [pc, #12]	; (800a28c <BSP_SD_GetCardInfo+0x18>)
 800a280:	f7fd fd28 	bl	8007cd4 <HAL_SD_GetCardInfo>
}
 800a284:	bf00      	nop
 800a286:	3708      	adds	r7, #8
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	20000694 	.word	0x20000694

0800a290 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a298:	f000 f818 	bl	800a2cc <BSP_SD_AbortCallback>
}
 800a29c:	bf00      	nop
 800a29e:	3708      	adds	r7, #8
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a2ac:	f000 f815 	bl	800a2da <BSP_SD_WriteCpltCallback>
}
 800a2b0:	bf00      	nop
 800a2b2:	3708      	adds	r7, #8
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a2c0:	f000 f812 	bl	800a2e8 <BSP_SD_ReadCpltCallback>
}
 800a2c4:	bf00      	nop
 800a2c6:	3708      	adds	r7, #8
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	af00      	add	r7, sp, #0

}
 800a2d0:	bf00      	nop
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr

0800a2da <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800a2da:	b480      	push	{r7}
 800a2dc:	af00      	add	r7, sp, #0

}
 800a2de:	bf00      	nop
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	af00      	add	r7, sp, #0

}
 800a2ec:	bf00      	nop
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr

0800a2f6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a2f6:	b580      	push	{r7, lr}
 800a2f8:	b082      	sub	sp, #8
 800a2fa:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a300:	f000 f80c 	bl	800a31c <BSP_PlatformIsDetected>
 800a304:	4603      	mov	r3, r0
 800a306:	2b00      	cmp	r3, #0
 800a308:	d101      	bne.n	800a30e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a30a:	2300      	movs	r3, #0
 800a30c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a30e:	79fb      	ldrb	r3, [r7, #7]
 800a310:	b2db      	uxtb	r3, r3
}
 800a312:	4618      	mov	r0, r3
 800a314:	3708      	adds	r7, #8
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
	...

0800a31c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a322:	2301      	movs	r3, #1
 800a324:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a326:	2140      	movs	r1, #64	; 0x40
 800a328:	480c      	ldr	r0, [pc, #48]	; (800a35c <BSP_PlatformIsDetected+0x40>)
 800a32a:	f7f9 fa7b 	bl	8003824 <HAL_GPIO_ReadPin>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d001      	beq.n	800a338 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800a334:	2300      	movs	r3, #0
 800a336:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 800a338:	2140      	movs	r1, #64	; 0x40
 800a33a:	4808      	ldr	r0, [pc, #32]	; (800a35c <BSP_PlatformIsDetected+0x40>)
 800a33c:	f7f9 fa72 	bl	8003824 <HAL_GPIO_ReadPin>
 800a340:	4603      	mov	r3, r0
 800a342:	2b01      	cmp	r3, #1
 800a344:	d002      	beq.n	800a34c <BSP_PlatformIsDetected+0x30>
	{
		status = SD_NOT_PRESENT;
 800a346:	2300      	movs	r3, #0
 800a348:	71fb      	strb	r3, [r7, #7]
 800a34a:	e001      	b.n	800a350 <BSP_PlatformIsDetected+0x34>
	} else {
		status = SD_PRESENT;
 800a34c:	2301      	movs	r3, #1
 800a34e:	71fb      	strb	r3, [r7, #7]
	}
    /* USER CODE END 1 */
    return status;
 800a350:	79fb      	ldrb	r3, [r7, #7]
}
 800a352:	4618      	mov	r0, r3
 800a354:	3708      	adds	r7, #8
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	48000400 	.word	0x48000400

0800a360 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
 800a366:	4603      	mov	r3, r0
 800a368:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a36a:	4b0b      	ldr	r3, [pc, #44]	; (800a398 <SD_CheckStatus+0x38>)
 800a36c:	2201      	movs	r2, #1
 800a36e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a370:	f7ff ff70 	bl	800a254 <BSP_SD_GetCardState>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	d107      	bne.n	800a38a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a37a:	4b07      	ldr	r3, [pc, #28]	; (800a398 <SD_CheckStatus+0x38>)
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	b2db      	uxtb	r3, r3
 800a380:	f023 0301 	bic.w	r3, r3, #1
 800a384:	b2da      	uxtb	r2, r3
 800a386:	4b04      	ldr	r3, [pc, #16]	; (800a398 <SD_CheckStatus+0x38>)
 800a388:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a38a:	4b03      	ldr	r3, [pc, #12]	; (800a398 <SD_CheckStatus+0x38>)
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	b2db      	uxtb	r3, r3
}
 800a390:	4618      	mov	r0, r3
 800a392:	3708      	adds	r7, #8
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}
 800a398:	20000115 	.word	0x20000115

0800a39c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a3a6:	4b0b      	ldr	r3, [pc, #44]	; (800a3d4 <SD_initialize+0x38>)
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a3ac:	f7ff fefe 	bl	800a1ac <BSP_SD_Init>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d107      	bne.n	800a3c6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a3b6:	79fb      	ldrb	r3, [r7, #7]
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f7ff ffd1 	bl	800a360 <SD_CheckStatus>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	4b04      	ldr	r3, [pc, #16]	; (800a3d4 <SD_initialize+0x38>)
 800a3c4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a3c6:	4b03      	ldr	r3, [pc, #12]	; (800a3d4 <SD_initialize+0x38>)
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	b2db      	uxtb	r3, r3
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3708      	adds	r7, #8
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}
 800a3d4:	20000115 	.word	0x20000115

0800a3d8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b082      	sub	sp, #8
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	4603      	mov	r3, r0
 800a3e0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a3e2:	79fb      	ldrb	r3, [r7, #7]
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7ff ffbb 	bl	800a360 <SD_CheckStatus>
 800a3ea:	4603      	mov	r3, r0
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3708      	adds	r7, #8
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b086      	sub	sp, #24
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60b9      	str	r1, [r7, #8]
 800a3fc:	607a      	str	r2, [r7, #4]
 800a3fe:	603b      	str	r3, [r7, #0]
 800a400:	4603      	mov	r3, r0
 800a402:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a404:	2301      	movs	r3, #1
 800a406:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a408:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a40c:	683a      	ldr	r2, [r7, #0]
 800a40e:	6879      	ldr	r1, [r7, #4]
 800a410:	68b8      	ldr	r0, [r7, #8]
 800a412:	f7ff fee3 	bl	800a1dc <BSP_SD_ReadBlocks>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d107      	bne.n	800a42c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a41c:	bf00      	nop
 800a41e:	f7ff ff19 	bl	800a254 <BSP_SD_GetCardState>
 800a422:	4603      	mov	r3, r0
 800a424:	2b00      	cmp	r3, #0
 800a426:	d1fa      	bne.n	800a41e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a428:	2300      	movs	r3, #0
 800a42a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a42c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3718      	adds	r7, #24
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a436:	b580      	push	{r7, lr}
 800a438:	b086      	sub	sp, #24
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	607a      	str	r2, [r7, #4]
 800a440:	603b      	str	r3, [r7, #0]
 800a442:	4603      	mov	r3, r0
 800a444:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a446:	2301      	movs	r3, #1
 800a448:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a44a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a44e:	683a      	ldr	r2, [r7, #0]
 800a450:	6879      	ldr	r1, [r7, #4]
 800a452:	68b8      	ldr	r0, [r7, #8]
 800a454:	f7ff fee0 	bl	800a218 <BSP_SD_WriteBlocks>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d107      	bne.n	800a46e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a45e:	bf00      	nop
 800a460:	f7ff fef8 	bl	800a254 <BSP_SD_GetCardState>
 800a464:	4603      	mov	r3, r0
 800a466:	2b00      	cmp	r3, #0
 800a468:	d1fa      	bne.n	800a460 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a46a:	2300      	movs	r3, #0
 800a46c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a46e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a470:	4618      	mov	r0, r3
 800a472:	3718      	adds	r7, #24
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b08c      	sub	sp, #48	; 0x30
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	4603      	mov	r3, r0
 800a480:	603a      	str	r2, [r7, #0]
 800a482:	71fb      	strb	r3, [r7, #7]
 800a484:	460b      	mov	r3, r1
 800a486:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a488:	2301      	movs	r3, #1
 800a48a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a48e:	4b25      	ldr	r3, [pc, #148]	; (800a524 <SD_ioctl+0xac>)
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	b2db      	uxtb	r3, r3
 800a494:	f003 0301 	and.w	r3, r3, #1
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d001      	beq.n	800a4a0 <SD_ioctl+0x28>
 800a49c:	2303      	movs	r3, #3
 800a49e:	e03c      	b.n	800a51a <SD_ioctl+0xa2>

  switch (cmd)
 800a4a0:	79bb      	ldrb	r3, [r7, #6]
 800a4a2:	2b03      	cmp	r3, #3
 800a4a4:	d834      	bhi.n	800a510 <SD_ioctl+0x98>
 800a4a6:	a201      	add	r2, pc, #4	; (adr r2, 800a4ac <SD_ioctl+0x34>)
 800a4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ac:	0800a4bd 	.word	0x0800a4bd
 800a4b0:	0800a4c5 	.word	0x0800a4c5
 800a4b4:	0800a4dd 	.word	0x0800a4dd
 800a4b8:	0800a4f7 	.word	0x0800a4f7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a4c2:	e028      	b.n	800a516 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a4c4:	f107 030c 	add.w	r3, r7, #12
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f7ff fed3 	bl	800a274 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a4ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a4da:	e01c      	b.n	800a516 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a4dc:	f107 030c 	add.w	r3, r7, #12
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7ff fec7 	bl	800a274 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e8:	b29a      	uxth	r2, r3
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a4f4:	e00f      	b.n	800a516 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a4f6:	f107 030c 	add.w	r3, r7, #12
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7ff feba 	bl	800a274 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a502:	0a5a      	lsrs	r2, r3, #9
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a508:	2300      	movs	r3, #0
 800a50a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a50e:	e002      	b.n	800a516 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a510:	2304      	movs	r3, #4
 800a512:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a516:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3730      	adds	r7, #48	; 0x30
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	20000115 	.word	0x20000115

0800a528 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	4603      	mov	r3, r0
 800a530:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a532:	79fb      	ldrb	r3, [r7, #7]
 800a534:	4a08      	ldr	r2, [pc, #32]	; (800a558 <disk_status+0x30>)
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	4413      	add	r3, r2
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	79fa      	ldrb	r2, [r7, #7]
 800a540:	4905      	ldr	r1, [pc, #20]	; (800a558 <disk_status+0x30>)
 800a542:	440a      	add	r2, r1
 800a544:	7a12      	ldrb	r2, [r2, #8]
 800a546:	4610      	mov	r0, r2
 800a548:	4798      	blx	r3
 800a54a:	4603      	mov	r3, r0
 800a54c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a54e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a550:	4618      	mov	r0, r3
 800a552:	3710      	adds	r7, #16
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	20000ed0 	.word	0x20000ed0

0800a55c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	4603      	mov	r3, r0
 800a564:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a566:	2300      	movs	r3, #0
 800a568:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a56a:	79fb      	ldrb	r3, [r7, #7]
 800a56c:	4a0d      	ldr	r2, [pc, #52]	; (800a5a4 <disk_initialize+0x48>)
 800a56e:	5cd3      	ldrb	r3, [r2, r3]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d111      	bne.n	800a598 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a574:	79fb      	ldrb	r3, [r7, #7]
 800a576:	4a0b      	ldr	r2, [pc, #44]	; (800a5a4 <disk_initialize+0x48>)
 800a578:	2101      	movs	r1, #1
 800a57a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a57c:	79fb      	ldrb	r3, [r7, #7]
 800a57e:	4a09      	ldr	r2, [pc, #36]	; (800a5a4 <disk_initialize+0x48>)
 800a580:	009b      	lsls	r3, r3, #2
 800a582:	4413      	add	r3, r2
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	79fa      	ldrb	r2, [r7, #7]
 800a58a:	4906      	ldr	r1, [pc, #24]	; (800a5a4 <disk_initialize+0x48>)
 800a58c:	440a      	add	r2, r1
 800a58e:	7a12      	ldrb	r2, [r2, #8]
 800a590:	4610      	mov	r0, r2
 800a592:	4798      	blx	r3
 800a594:	4603      	mov	r3, r0
 800a596:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a598:	7bfb      	ldrb	r3, [r7, #15]
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3710      	adds	r7, #16
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	20000ed0 	.word	0x20000ed0

0800a5a8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a5a8:	b590      	push	{r4, r7, lr}
 800a5aa:	b087      	sub	sp, #28
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	60b9      	str	r1, [r7, #8]
 800a5b0:	607a      	str	r2, [r7, #4]
 800a5b2:	603b      	str	r3, [r7, #0]
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a5b8:	7bfb      	ldrb	r3, [r7, #15]
 800a5ba:	4a0a      	ldr	r2, [pc, #40]	; (800a5e4 <disk_read+0x3c>)
 800a5bc:	009b      	lsls	r3, r3, #2
 800a5be:	4413      	add	r3, r2
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	689c      	ldr	r4, [r3, #8]
 800a5c4:	7bfb      	ldrb	r3, [r7, #15]
 800a5c6:	4a07      	ldr	r2, [pc, #28]	; (800a5e4 <disk_read+0x3c>)
 800a5c8:	4413      	add	r3, r2
 800a5ca:	7a18      	ldrb	r0, [r3, #8]
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	68b9      	ldr	r1, [r7, #8]
 800a5d2:	47a0      	blx	r4
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	75fb      	strb	r3, [r7, #23]
  return res;
 800a5d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	371c      	adds	r7, #28
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd90      	pop	{r4, r7, pc}
 800a5e2:	bf00      	nop
 800a5e4:	20000ed0 	.word	0x20000ed0

0800a5e8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a5e8:	b590      	push	{r4, r7, lr}
 800a5ea:	b087      	sub	sp, #28
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	60b9      	str	r1, [r7, #8]
 800a5f0:	607a      	str	r2, [r7, #4]
 800a5f2:	603b      	str	r3, [r7, #0]
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a5f8:	7bfb      	ldrb	r3, [r7, #15]
 800a5fa:	4a0a      	ldr	r2, [pc, #40]	; (800a624 <disk_write+0x3c>)
 800a5fc:	009b      	lsls	r3, r3, #2
 800a5fe:	4413      	add	r3, r2
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	68dc      	ldr	r4, [r3, #12]
 800a604:	7bfb      	ldrb	r3, [r7, #15]
 800a606:	4a07      	ldr	r2, [pc, #28]	; (800a624 <disk_write+0x3c>)
 800a608:	4413      	add	r3, r2
 800a60a:	7a18      	ldrb	r0, [r3, #8]
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	68b9      	ldr	r1, [r7, #8]
 800a612:	47a0      	blx	r4
 800a614:	4603      	mov	r3, r0
 800a616:	75fb      	strb	r3, [r7, #23]
  return res;
 800a618:	7dfb      	ldrb	r3, [r7, #23]
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	371c      	adds	r7, #28
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd90      	pop	{r4, r7, pc}
 800a622:	bf00      	nop
 800a624:	20000ed0 	.word	0x20000ed0

0800a628 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	4603      	mov	r3, r0
 800a630:	603a      	str	r2, [r7, #0]
 800a632:	71fb      	strb	r3, [r7, #7]
 800a634:	460b      	mov	r3, r1
 800a636:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a638:	79fb      	ldrb	r3, [r7, #7]
 800a63a:	4a09      	ldr	r2, [pc, #36]	; (800a660 <disk_ioctl+0x38>)
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	4413      	add	r3, r2
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	691b      	ldr	r3, [r3, #16]
 800a644:	79fa      	ldrb	r2, [r7, #7]
 800a646:	4906      	ldr	r1, [pc, #24]	; (800a660 <disk_ioctl+0x38>)
 800a648:	440a      	add	r2, r1
 800a64a:	7a10      	ldrb	r0, [r2, #8]
 800a64c:	79b9      	ldrb	r1, [r7, #6]
 800a64e:	683a      	ldr	r2, [r7, #0]
 800a650:	4798      	blx	r3
 800a652:	4603      	mov	r3, r0
 800a654:	73fb      	strb	r3, [r7, #15]
  return res;
 800a656:	7bfb      	ldrb	r3, [r7, #15]
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3710      	adds	r7, #16
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	20000ed0 	.word	0x20000ed0

0800a664 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a664:	b480      	push	{r7}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	3301      	adds	r3, #1
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a674:	89fb      	ldrh	r3, [r7, #14]
 800a676:	021b      	lsls	r3, r3, #8
 800a678:	b21a      	sxth	r2, r3
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	b21b      	sxth	r3, r3
 800a680:	4313      	orrs	r3, r2
 800a682:	b21b      	sxth	r3, r3
 800a684:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a686:	89fb      	ldrh	r3, [r7, #14]
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3714      	adds	r7, #20
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a694:	b480      	push	{r7}
 800a696:	b085      	sub	sp, #20
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	3303      	adds	r3, #3
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	021b      	lsls	r3, r3, #8
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	3202      	adds	r2, #2
 800a6ac:	7812      	ldrb	r2, [r2, #0]
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	021b      	lsls	r3, r3, #8
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	3201      	adds	r2, #1
 800a6ba:	7812      	ldrb	r2, [r2, #0]
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	021b      	lsls	r3, r3, #8
 800a6c4:	687a      	ldr	r2, [r7, #4]
 800a6c6:	7812      	ldrb	r2, [r2, #0]
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	60fb      	str	r3, [r7, #12]
	return rv;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3714      	adds	r7, #20
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr

0800a6da <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a6da:	b480      	push	{r7}
 800a6dc:	b083      	sub	sp, #12
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	1c5a      	adds	r2, r3, #1
 800a6ea:	607a      	str	r2, [r7, #4]
 800a6ec:	887a      	ldrh	r2, [r7, #2]
 800a6ee:	b2d2      	uxtb	r2, r2
 800a6f0:	701a      	strb	r2, [r3, #0]
 800a6f2:	887b      	ldrh	r3, [r7, #2]
 800a6f4:	0a1b      	lsrs	r3, r3, #8
 800a6f6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	1c5a      	adds	r2, r3, #1
 800a6fc:	607a      	str	r2, [r7, #4]
 800a6fe:	887a      	ldrh	r2, [r7, #2]
 800a700:	b2d2      	uxtb	r2, r2
 800a702:	701a      	strb	r2, [r3, #0]
}
 800a704:	bf00      	nop
 800a706:	370c      	adds	r7, #12
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a710:	b480      	push	{r7}
 800a712:	b083      	sub	sp, #12
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	1c5a      	adds	r2, r3, #1
 800a71e:	607a      	str	r2, [r7, #4]
 800a720:	683a      	ldr	r2, [r7, #0]
 800a722:	b2d2      	uxtb	r2, r2
 800a724:	701a      	strb	r2, [r3, #0]
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	0a1b      	lsrs	r3, r3, #8
 800a72a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	1c5a      	adds	r2, r3, #1
 800a730:	607a      	str	r2, [r7, #4]
 800a732:	683a      	ldr	r2, [r7, #0]
 800a734:	b2d2      	uxtb	r2, r2
 800a736:	701a      	strb	r2, [r3, #0]
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	0a1b      	lsrs	r3, r3, #8
 800a73c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	1c5a      	adds	r2, r3, #1
 800a742:	607a      	str	r2, [r7, #4]
 800a744:	683a      	ldr	r2, [r7, #0]
 800a746:	b2d2      	uxtb	r2, r2
 800a748:	701a      	strb	r2, [r3, #0]
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	0a1b      	lsrs	r3, r3, #8
 800a74e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	1c5a      	adds	r2, r3, #1
 800a754:	607a      	str	r2, [r7, #4]
 800a756:	683a      	ldr	r2, [r7, #0]
 800a758:	b2d2      	uxtb	r2, r2
 800a75a:	701a      	strb	r2, [r3, #0]
}
 800a75c:	bf00      	nop
 800a75e:	370c      	adds	r7, #12
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr

0800a768 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a768:	b480      	push	{r7}
 800a76a:	b087      	sub	sp, #28
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	60b9      	str	r1, [r7, #8]
 800a772:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d00d      	beq.n	800a79e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a782:	693a      	ldr	r2, [r7, #16]
 800a784:	1c53      	adds	r3, r2, #1
 800a786:	613b      	str	r3, [r7, #16]
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	1c59      	adds	r1, r3, #1
 800a78c:	6179      	str	r1, [r7, #20]
 800a78e:	7812      	ldrb	r2, [r2, #0]
 800a790:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	3b01      	subs	r3, #1
 800a796:	607b      	str	r3, [r7, #4]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d1f1      	bne.n	800a782 <mem_cpy+0x1a>
	}
}
 800a79e:	bf00      	nop
 800a7a0:	371c      	adds	r7, #28
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a7aa:	b480      	push	{r7}
 800a7ac:	b087      	sub	sp, #28
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	60f8      	str	r0, [r7, #12]
 800a7b2:	60b9      	str	r1, [r7, #8]
 800a7b4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	1c5a      	adds	r2, r3, #1
 800a7be:	617a      	str	r2, [r7, #20]
 800a7c0:	68ba      	ldr	r2, [r7, #8]
 800a7c2:	b2d2      	uxtb	r2, r2
 800a7c4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	3b01      	subs	r3, #1
 800a7ca:	607b      	str	r3, [r7, #4]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1f3      	bne.n	800a7ba <mem_set+0x10>
}
 800a7d2:	bf00      	nop
 800a7d4:	bf00      	nop
 800a7d6:	371c      	adds	r7, #28
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a7e0:	b480      	push	{r7}
 800a7e2:	b089      	sub	sp, #36	; 0x24
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	60f8      	str	r0, [r7, #12]
 800a7e8:	60b9      	str	r1, [r7, #8]
 800a7ea:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	61fb      	str	r3, [r7, #28]
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a7f8:	69fb      	ldr	r3, [r7, #28]
 800a7fa:	1c5a      	adds	r2, r3, #1
 800a7fc:	61fa      	str	r2, [r7, #28]
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	4619      	mov	r1, r3
 800a802:	69bb      	ldr	r3, [r7, #24]
 800a804:	1c5a      	adds	r2, r3, #1
 800a806:	61ba      	str	r2, [r7, #24]
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	1acb      	subs	r3, r1, r3
 800a80c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	3b01      	subs	r3, #1
 800a812:	607b      	str	r3, [r7, #4]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d002      	beq.n	800a820 <mem_cmp+0x40>
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d0eb      	beq.n	800a7f8 <mem_cmp+0x18>

	return r;
 800a820:	697b      	ldr	r3, [r7, #20]
}
 800a822:	4618      	mov	r0, r3
 800a824:	3724      	adds	r7, #36	; 0x24
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr

0800a82e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a82e:	b480      	push	{r7}
 800a830:	b083      	sub	sp, #12
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
 800a836:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a838:	e002      	b.n	800a840 <chk_chr+0x12>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	3301      	adds	r3, #1
 800a83e:	607b      	str	r3, [r7, #4]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d005      	beq.n	800a854 <chk_chr+0x26>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	461a      	mov	r2, r3
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	4293      	cmp	r3, r2
 800a852:	d1f2      	bne.n	800a83a <chk_chr+0xc>
	return *str;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	781b      	ldrb	r3, [r3, #0]
}
 800a858:	4618      	mov	r0, r3
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a864:	b480      	push	{r7}
 800a866:	b085      	sub	sp, #20
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a86e:	2300      	movs	r3, #0
 800a870:	60bb      	str	r3, [r7, #8]
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	60fb      	str	r3, [r7, #12]
 800a876:	e029      	b.n	800a8cc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a878:	4a27      	ldr	r2, [pc, #156]	; (800a918 <chk_lock+0xb4>)
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	011b      	lsls	r3, r3, #4
 800a87e:	4413      	add	r3, r2
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d01d      	beq.n	800a8c2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a886:	4a24      	ldr	r2, [pc, #144]	; (800a918 <chk_lock+0xb4>)
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	011b      	lsls	r3, r3, #4
 800a88c:	4413      	add	r3, r2
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	429a      	cmp	r2, r3
 800a896:	d116      	bne.n	800a8c6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a898:	4a1f      	ldr	r2, [pc, #124]	; (800a918 <chk_lock+0xb4>)
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	011b      	lsls	r3, r3, #4
 800a89e:	4413      	add	r3, r2
 800a8a0:	3304      	adds	r3, #4
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d10c      	bne.n	800a8c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a8ac:	4a1a      	ldr	r2, [pc, #104]	; (800a918 <chk_lock+0xb4>)
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	011b      	lsls	r3, r3, #4
 800a8b2:	4413      	add	r3, r2
 800a8b4:	3308      	adds	r3, #8
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d102      	bne.n	800a8c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a8c0:	e007      	b.n	800a8d2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	60fb      	str	r3, [r7, #12]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	d9d2      	bls.n	800a878 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2b02      	cmp	r3, #2
 800a8d6:	d109      	bne.n	800a8ec <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d102      	bne.n	800a8e4 <chk_lock+0x80>
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	2b02      	cmp	r3, #2
 800a8e2:	d101      	bne.n	800a8e8 <chk_lock+0x84>
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	e010      	b.n	800a90a <chk_lock+0xa6>
 800a8e8:	2312      	movs	r3, #18
 800a8ea:	e00e      	b.n	800a90a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d108      	bne.n	800a904 <chk_lock+0xa0>
 800a8f2:	4a09      	ldr	r2, [pc, #36]	; (800a918 <chk_lock+0xb4>)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	011b      	lsls	r3, r3, #4
 800a8f8:	4413      	add	r3, r2
 800a8fa:	330c      	adds	r3, #12
 800a8fc:	881b      	ldrh	r3, [r3, #0]
 800a8fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a902:	d101      	bne.n	800a908 <chk_lock+0xa4>
 800a904:	2310      	movs	r3, #16
 800a906:	e000      	b.n	800a90a <chk_lock+0xa6>
 800a908:	2300      	movs	r3, #0
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3714      	adds	r7, #20
 800a90e:	46bd      	mov	sp, r7
 800a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a914:	4770      	bx	lr
 800a916:	bf00      	nop
 800a918:	20000eb0 	.word	0x20000eb0

0800a91c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a91c:	b480      	push	{r7}
 800a91e:	b083      	sub	sp, #12
 800a920:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a922:	2300      	movs	r3, #0
 800a924:	607b      	str	r3, [r7, #4]
 800a926:	e002      	b.n	800a92e <enq_lock+0x12>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	3301      	adds	r3, #1
 800a92c:	607b      	str	r3, [r7, #4]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2b01      	cmp	r3, #1
 800a932:	d806      	bhi.n	800a942 <enq_lock+0x26>
 800a934:	4a09      	ldr	r2, [pc, #36]	; (800a95c <enq_lock+0x40>)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	011b      	lsls	r3, r3, #4
 800a93a:	4413      	add	r3, r2
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d1f2      	bne.n	800a928 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2b02      	cmp	r3, #2
 800a946:	bf14      	ite	ne
 800a948:	2301      	movne	r3, #1
 800a94a:	2300      	moveq	r3, #0
 800a94c:	b2db      	uxtb	r3, r3
}
 800a94e:	4618      	mov	r0, r3
 800a950:	370c      	adds	r7, #12
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr
 800a95a:	bf00      	nop
 800a95c:	20000eb0 	.word	0x20000eb0

0800a960 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a960:	b480      	push	{r7}
 800a962:	b085      	sub	sp, #20
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a96a:	2300      	movs	r3, #0
 800a96c:	60fb      	str	r3, [r7, #12]
 800a96e:	e01f      	b.n	800a9b0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a970:	4a41      	ldr	r2, [pc, #260]	; (800aa78 <inc_lock+0x118>)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	011b      	lsls	r3, r3, #4
 800a976:	4413      	add	r3, r2
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	429a      	cmp	r2, r3
 800a980:	d113      	bne.n	800a9aa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a982:	4a3d      	ldr	r2, [pc, #244]	; (800aa78 <inc_lock+0x118>)
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	011b      	lsls	r3, r3, #4
 800a988:	4413      	add	r3, r2
 800a98a:	3304      	adds	r3, #4
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a992:	429a      	cmp	r2, r3
 800a994:	d109      	bne.n	800a9aa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a996:	4a38      	ldr	r2, [pc, #224]	; (800aa78 <inc_lock+0x118>)
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	011b      	lsls	r3, r3, #4
 800a99c:	4413      	add	r3, r2
 800a99e:	3308      	adds	r3, #8
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d006      	beq.n	800a9b8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	60fb      	str	r3, [r7, #12]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d9dc      	bls.n	800a970 <inc_lock+0x10>
 800a9b6:	e000      	b.n	800a9ba <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a9b8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2b02      	cmp	r3, #2
 800a9be:	d132      	bne.n	800aa26 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	60fb      	str	r3, [r7, #12]
 800a9c4:	e002      	b.n	800a9cc <inc_lock+0x6c>
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	60fb      	str	r3, [r7, #12]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d806      	bhi.n	800a9e0 <inc_lock+0x80>
 800a9d2:	4a29      	ldr	r2, [pc, #164]	; (800aa78 <inc_lock+0x118>)
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	011b      	lsls	r3, r3, #4
 800a9d8:	4413      	add	r3, r2
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d1f2      	bne.n	800a9c6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2b02      	cmp	r3, #2
 800a9e4:	d101      	bne.n	800a9ea <inc_lock+0x8a>
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	e040      	b.n	800aa6c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	4922      	ldr	r1, [pc, #136]	; (800aa78 <inc_lock+0x118>)
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	011b      	lsls	r3, r3, #4
 800a9f4:	440b      	add	r3, r1
 800a9f6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	689a      	ldr	r2, [r3, #8]
 800a9fc:	491e      	ldr	r1, [pc, #120]	; (800aa78 <inc_lock+0x118>)
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	011b      	lsls	r3, r3, #4
 800aa02:	440b      	add	r3, r1
 800aa04:	3304      	adds	r3, #4
 800aa06:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	695a      	ldr	r2, [r3, #20]
 800aa0c:	491a      	ldr	r1, [pc, #104]	; (800aa78 <inc_lock+0x118>)
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	011b      	lsls	r3, r3, #4
 800aa12:	440b      	add	r3, r1
 800aa14:	3308      	adds	r3, #8
 800aa16:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800aa18:	4a17      	ldr	r2, [pc, #92]	; (800aa78 <inc_lock+0x118>)
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	011b      	lsls	r3, r3, #4
 800aa1e:	4413      	add	r3, r2
 800aa20:	330c      	adds	r3, #12
 800aa22:	2200      	movs	r2, #0
 800aa24:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d009      	beq.n	800aa40 <inc_lock+0xe0>
 800aa2c:	4a12      	ldr	r2, [pc, #72]	; (800aa78 <inc_lock+0x118>)
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	011b      	lsls	r3, r3, #4
 800aa32:	4413      	add	r3, r2
 800aa34:	330c      	adds	r3, #12
 800aa36:	881b      	ldrh	r3, [r3, #0]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d001      	beq.n	800aa40 <inc_lock+0xe0>
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	e015      	b.n	800aa6c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d108      	bne.n	800aa58 <inc_lock+0xf8>
 800aa46:	4a0c      	ldr	r2, [pc, #48]	; (800aa78 <inc_lock+0x118>)
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	011b      	lsls	r3, r3, #4
 800aa4c:	4413      	add	r3, r2
 800aa4e:	330c      	adds	r3, #12
 800aa50:	881b      	ldrh	r3, [r3, #0]
 800aa52:	3301      	adds	r3, #1
 800aa54:	b29a      	uxth	r2, r3
 800aa56:	e001      	b.n	800aa5c <inc_lock+0xfc>
 800aa58:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aa5c:	4906      	ldr	r1, [pc, #24]	; (800aa78 <inc_lock+0x118>)
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	011b      	lsls	r3, r3, #4
 800aa62:	440b      	add	r3, r1
 800aa64:	330c      	adds	r3, #12
 800aa66:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	3301      	adds	r3, #1
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3714      	adds	r7, #20
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr
 800aa78:	20000eb0 	.word	0x20000eb0

0800aa7c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b085      	sub	sp, #20
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	3b01      	subs	r3, #1
 800aa88:	607b      	str	r3, [r7, #4]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d825      	bhi.n	800aadc <dec_lock+0x60>
		n = Files[i].ctr;
 800aa90:	4a17      	ldr	r2, [pc, #92]	; (800aaf0 <dec_lock+0x74>)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	011b      	lsls	r3, r3, #4
 800aa96:	4413      	add	r3, r2
 800aa98:	330c      	adds	r3, #12
 800aa9a:	881b      	ldrh	r3, [r3, #0]
 800aa9c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800aa9e:	89fb      	ldrh	r3, [r7, #14]
 800aaa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaa4:	d101      	bne.n	800aaaa <dec_lock+0x2e>
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800aaaa:	89fb      	ldrh	r3, [r7, #14]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d002      	beq.n	800aab6 <dec_lock+0x3a>
 800aab0:	89fb      	ldrh	r3, [r7, #14]
 800aab2:	3b01      	subs	r3, #1
 800aab4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800aab6:	4a0e      	ldr	r2, [pc, #56]	; (800aaf0 <dec_lock+0x74>)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	011b      	lsls	r3, r3, #4
 800aabc:	4413      	add	r3, r2
 800aabe:	330c      	adds	r3, #12
 800aac0:	89fa      	ldrh	r2, [r7, #14]
 800aac2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800aac4:	89fb      	ldrh	r3, [r7, #14]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d105      	bne.n	800aad6 <dec_lock+0x5a>
 800aaca:	4a09      	ldr	r2, [pc, #36]	; (800aaf0 <dec_lock+0x74>)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	011b      	lsls	r3, r3, #4
 800aad0:	4413      	add	r3, r2
 800aad2:	2200      	movs	r2, #0
 800aad4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800aad6:	2300      	movs	r3, #0
 800aad8:	737b      	strb	r3, [r7, #13]
 800aada:	e001      	b.n	800aae0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800aadc:	2302      	movs	r3, #2
 800aade:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800aae0:	7b7b      	ldrb	r3, [r7, #13]
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3714      	adds	r7, #20
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr
 800aaee:	bf00      	nop
 800aaf0:	20000eb0 	.word	0x20000eb0

0800aaf4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b085      	sub	sp, #20
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800aafc:	2300      	movs	r3, #0
 800aafe:	60fb      	str	r3, [r7, #12]
 800ab00:	e010      	b.n	800ab24 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ab02:	4a0d      	ldr	r2, [pc, #52]	; (800ab38 <clear_lock+0x44>)
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	011b      	lsls	r3, r3, #4
 800ab08:	4413      	add	r3, r2
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d105      	bne.n	800ab1e <clear_lock+0x2a>
 800ab12:	4a09      	ldr	r2, [pc, #36]	; (800ab38 <clear_lock+0x44>)
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	011b      	lsls	r3, r3, #4
 800ab18:	4413      	add	r3, r2
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	3301      	adds	r3, #1
 800ab22:	60fb      	str	r3, [r7, #12]
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d9eb      	bls.n	800ab02 <clear_lock+0xe>
	}
}
 800ab2a:	bf00      	nop
 800ab2c:	bf00      	nop
 800ab2e:	3714      	adds	r7, #20
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr
 800ab38:	20000eb0 	.word	0x20000eb0

0800ab3c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b086      	sub	sp, #24
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ab44:	2300      	movs	r3, #0
 800ab46:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	78db      	ldrb	r3, [r3, #3]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d034      	beq.n	800abba <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab54:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	7858      	ldrb	r0, [r3, #1]
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab60:	2301      	movs	r3, #1
 800ab62:	697a      	ldr	r2, [r7, #20]
 800ab64:	f7ff fd40 	bl	800a5e8 <disk_write>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d002      	beq.n	800ab74 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	73fb      	strb	r3, [r7, #15]
 800ab72:	e022      	b.n	800abba <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2200      	movs	r2, #0
 800ab78:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6a1b      	ldr	r3, [r3, #32]
 800ab7e:	697a      	ldr	r2, [r7, #20]
 800ab80:	1ad2      	subs	r2, r2, r3
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	699b      	ldr	r3, [r3, #24]
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d217      	bcs.n	800abba <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	789b      	ldrb	r3, [r3, #2]
 800ab8e:	613b      	str	r3, [r7, #16]
 800ab90:	e010      	b.n	800abb4 <sync_window+0x78>
					wsect += fs->fsize;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	699b      	ldr	r3, [r3, #24]
 800ab96:	697a      	ldr	r2, [r7, #20]
 800ab98:	4413      	add	r3, r2
 800ab9a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	7858      	ldrb	r0, [r3, #1]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aba6:	2301      	movs	r3, #1
 800aba8:	697a      	ldr	r2, [r7, #20]
 800abaa:	f7ff fd1d 	bl	800a5e8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	3b01      	subs	r3, #1
 800abb2:	613b      	str	r3, [r7, #16]
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d8eb      	bhi.n	800ab92 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800abba:	7bfb      	ldrb	r3, [r7, #15]
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3718      	adds	r7, #24
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800abce:	2300      	movs	r3, #0
 800abd0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd6:	683a      	ldr	r2, [r7, #0]
 800abd8:	429a      	cmp	r2, r3
 800abda:	d01b      	beq.n	800ac14 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f7ff ffad 	bl	800ab3c <sync_window>
 800abe2:	4603      	mov	r3, r0
 800abe4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800abe6:	7bfb      	ldrb	r3, [r7, #15]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d113      	bne.n	800ac14 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	7858      	ldrb	r0, [r3, #1]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800abf6:	2301      	movs	r3, #1
 800abf8:	683a      	ldr	r2, [r7, #0]
 800abfa:	f7ff fcd5 	bl	800a5a8 <disk_read>
 800abfe:	4603      	mov	r3, r0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d004      	beq.n	800ac0e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ac04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac08:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	683a      	ldr	r2, [r7, #0]
 800ac12:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800ac14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3710      	adds	r7, #16
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
	...

0800ac20 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f7ff ff87 	bl	800ab3c <sync_window>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ac32:	7bfb      	ldrb	r3, [r7, #15]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d158      	bne.n	800acea <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	2b03      	cmp	r3, #3
 800ac3e:	d148      	bne.n	800acd2 <sync_fs+0xb2>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	791b      	ldrb	r3, [r3, #4]
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d144      	bne.n	800acd2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	3330      	adds	r3, #48	; 0x30
 800ac4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac50:	2100      	movs	r1, #0
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7ff fda9 	bl	800a7aa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	3330      	adds	r3, #48	; 0x30
 800ac5c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ac60:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7ff fd38 	bl	800a6da <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	3330      	adds	r3, #48	; 0x30
 800ac6e:	4921      	ldr	r1, [pc, #132]	; (800acf4 <sync_fs+0xd4>)
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7ff fd4d 	bl	800a710 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	3330      	adds	r3, #48	; 0x30
 800ac7a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ac7e:	491e      	ldr	r1, [pc, #120]	; (800acf8 <sync_fs+0xd8>)
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7ff fd45 	bl	800a710 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	3330      	adds	r3, #48	; 0x30
 800ac8a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	691b      	ldr	r3, [r3, #16]
 800ac92:	4619      	mov	r1, r3
 800ac94:	4610      	mov	r0, r2
 800ac96:	f7ff fd3b 	bl	800a710 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	3330      	adds	r3, #48	; 0x30
 800ac9e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	68db      	ldr	r3, [r3, #12]
 800aca6:	4619      	mov	r1, r3
 800aca8:	4610      	mov	r0, r2
 800acaa:	f7ff fd31 	bl	800a710 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	69db      	ldr	r3, [r3, #28]
 800acb2:	1c5a      	adds	r2, r3, #1
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	7858      	ldrb	r0, [r3, #1]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acc6:	2301      	movs	r3, #1
 800acc8:	f7ff fc8e 	bl	800a5e8 <disk_write>
			fs->fsi_flag = 0;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	785b      	ldrb	r3, [r3, #1]
 800acd6:	2200      	movs	r2, #0
 800acd8:	2100      	movs	r1, #0
 800acda:	4618      	mov	r0, r3
 800acdc:	f7ff fca4 	bl	800a628 <disk_ioctl>
 800ace0:	4603      	mov	r3, r0
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d001      	beq.n	800acea <sync_fs+0xca>
 800ace6:	2301      	movs	r3, #1
 800ace8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800acea:	7bfb      	ldrb	r3, [r7, #15]
}
 800acec:	4618      	mov	r0, r3
 800acee:	3710      	adds	r7, #16
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	41615252 	.word	0x41615252
 800acf8:	61417272 	.word	0x61417272

0800acfc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	3b02      	subs	r3, #2
 800ad0a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	695b      	ldr	r3, [r3, #20]
 800ad10:	3b02      	subs	r3, #2
 800ad12:	683a      	ldr	r2, [r7, #0]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d301      	bcc.n	800ad1c <clust2sect+0x20>
 800ad18:	2300      	movs	r3, #0
 800ad1a:	e008      	b.n	800ad2e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	895b      	ldrh	r3, [r3, #10]
 800ad20:	461a      	mov	r2, r3
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	fb03 f202 	mul.w	r2, r3, r2
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad2c:	4413      	add	r3, r2
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	370c      	adds	r7, #12
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr

0800ad3a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ad3a:	b580      	push	{r7, lr}
 800ad3c:	b086      	sub	sp, #24
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]
 800ad42:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d904      	bls.n	800ad5a <get_fat+0x20>
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	695b      	ldr	r3, [r3, #20]
 800ad54:	683a      	ldr	r2, [r7, #0]
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d302      	bcc.n	800ad60 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	617b      	str	r3, [r7, #20]
 800ad5e:	e08f      	b.n	800ae80 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ad60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad64:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	2b03      	cmp	r3, #3
 800ad6c:	d062      	beq.n	800ae34 <get_fat+0xfa>
 800ad6e:	2b03      	cmp	r3, #3
 800ad70:	dc7c      	bgt.n	800ae6c <get_fat+0x132>
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d002      	beq.n	800ad7c <get_fat+0x42>
 800ad76:	2b02      	cmp	r3, #2
 800ad78:	d042      	beq.n	800ae00 <get_fat+0xc6>
 800ad7a:	e077      	b.n	800ae6c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	60fb      	str	r3, [r7, #12]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	085b      	lsrs	r3, r3, #1
 800ad84:	68fa      	ldr	r2, [r7, #12]
 800ad86:	4413      	add	r3, r2
 800ad88:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	6a1a      	ldr	r2, [r3, #32]
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	0a5b      	lsrs	r3, r3, #9
 800ad92:	4413      	add	r3, r2
 800ad94:	4619      	mov	r1, r3
 800ad96:	6938      	ldr	r0, [r7, #16]
 800ad98:	f7ff ff14 	bl	800abc4 <move_window>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d167      	bne.n	800ae72 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	1c5a      	adds	r2, r3, #1
 800ada6:	60fa      	str	r2, [r7, #12]
 800ada8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adac:	693a      	ldr	r2, [r7, #16]
 800adae:	4413      	add	r3, r2
 800adb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800adb4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	6a1a      	ldr	r2, [r3, #32]
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	0a5b      	lsrs	r3, r3, #9
 800adbe:	4413      	add	r3, r2
 800adc0:	4619      	mov	r1, r3
 800adc2:	6938      	ldr	r0, [r7, #16]
 800adc4:	f7ff fefe 	bl	800abc4 <move_window>
 800adc8:	4603      	mov	r3, r0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d153      	bne.n	800ae76 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800add4:	693a      	ldr	r2, [r7, #16]
 800add6:	4413      	add	r3, r2
 800add8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800addc:	021b      	lsls	r3, r3, #8
 800adde:	461a      	mov	r2, r3
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	4313      	orrs	r3, r2
 800ade4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	f003 0301 	and.w	r3, r3, #1
 800adec:	2b00      	cmp	r3, #0
 800adee:	d002      	beq.n	800adf6 <get_fat+0xbc>
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	091b      	lsrs	r3, r3, #4
 800adf4:	e002      	b.n	800adfc <get_fat+0xc2>
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800adfc:	617b      	str	r3, [r7, #20]
			break;
 800adfe:	e03f      	b.n	800ae80 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	6a1a      	ldr	r2, [r3, #32]
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	0a1b      	lsrs	r3, r3, #8
 800ae08:	4413      	add	r3, r2
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	6938      	ldr	r0, [r7, #16]
 800ae0e:	f7ff fed9 	bl	800abc4 <move_window>
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d130      	bne.n	800ae7a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	005b      	lsls	r3, r3, #1
 800ae22:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ae26:	4413      	add	r3, r2
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7ff fc1b 	bl	800a664 <ld_word>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	617b      	str	r3, [r7, #20]
			break;
 800ae32:	e025      	b.n	800ae80 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	6a1a      	ldr	r2, [r3, #32]
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	09db      	lsrs	r3, r3, #7
 800ae3c:	4413      	add	r3, r2
 800ae3e:	4619      	mov	r1, r3
 800ae40:	6938      	ldr	r0, [r7, #16]
 800ae42:	f7ff febf 	bl	800abc4 <move_window>
 800ae46:	4603      	mov	r3, r0
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d118      	bne.n	800ae7e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	009b      	lsls	r3, r3, #2
 800ae56:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ae5a:	4413      	add	r3, r2
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f7ff fc19 	bl	800a694 <ld_dword>
 800ae62:	4603      	mov	r3, r0
 800ae64:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ae68:	617b      	str	r3, [r7, #20]
			break;
 800ae6a:	e009      	b.n	800ae80 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	617b      	str	r3, [r7, #20]
 800ae70:	e006      	b.n	800ae80 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ae72:	bf00      	nop
 800ae74:	e004      	b.n	800ae80 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ae76:	bf00      	nop
 800ae78:	e002      	b.n	800ae80 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ae7a:	bf00      	nop
 800ae7c:	e000      	b.n	800ae80 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ae7e:	bf00      	nop
		}
	}

	return val;
 800ae80:	697b      	ldr	r3, [r7, #20]
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3718      	adds	r7, #24
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}

0800ae8a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ae8a:	b590      	push	{r4, r7, lr}
 800ae8c:	b089      	sub	sp, #36	; 0x24
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	60f8      	str	r0, [r7, #12]
 800ae92:	60b9      	str	r1, [r7, #8]
 800ae94:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ae96:	2302      	movs	r3, #2
 800ae98:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	f240 80d2 	bls.w	800b046 <put_fat+0x1bc>
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	695b      	ldr	r3, [r3, #20]
 800aea6:	68ba      	ldr	r2, [r7, #8]
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	f080 80cc 	bcs.w	800b046 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	2b03      	cmp	r3, #3
 800aeb4:	f000 8096 	beq.w	800afe4 <put_fat+0x15a>
 800aeb8:	2b03      	cmp	r3, #3
 800aeba:	f300 80cd 	bgt.w	800b058 <put_fat+0x1ce>
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	d002      	beq.n	800aec8 <put_fat+0x3e>
 800aec2:	2b02      	cmp	r3, #2
 800aec4:	d06e      	beq.n	800afa4 <put_fat+0x11a>
 800aec6:	e0c7      	b.n	800b058 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	61bb      	str	r3, [r7, #24]
 800aecc:	69bb      	ldr	r3, [r7, #24]
 800aece:	085b      	lsrs	r3, r3, #1
 800aed0:	69ba      	ldr	r2, [r7, #24]
 800aed2:	4413      	add	r3, r2
 800aed4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	6a1a      	ldr	r2, [r3, #32]
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	0a5b      	lsrs	r3, r3, #9
 800aede:	4413      	add	r3, r2
 800aee0:	4619      	mov	r1, r3
 800aee2:	68f8      	ldr	r0, [r7, #12]
 800aee4:	f7ff fe6e 	bl	800abc4 <move_window>
 800aee8:	4603      	mov	r3, r0
 800aeea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aeec:	7ffb      	ldrb	r3, [r7, #31]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	f040 80ab 	bne.w	800b04a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aefa:	69bb      	ldr	r3, [r7, #24]
 800aefc:	1c59      	adds	r1, r3, #1
 800aefe:	61b9      	str	r1, [r7, #24]
 800af00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af04:	4413      	add	r3, r2
 800af06:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	f003 0301 	and.w	r3, r3, #1
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d00d      	beq.n	800af2e <put_fat+0xa4>
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	b25b      	sxtb	r3, r3
 800af18:	f003 030f 	and.w	r3, r3, #15
 800af1c:	b25a      	sxtb	r2, r3
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	b2db      	uxtb	r3, r3
 800af22:	011b      	lsls	r3, r3, #4
 800af24:	b25b      	sxtb	r3, r3
 800af26:	4313      	orrs	r3, r2
 800af28:	b25b      	sxtb	r3, r3
 800af2a:	b2db      	uxtb	r3, r3
 800af2c:	e001      	b.n	800af32 <put_fat+0xa8>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	b2db      	uxtb	r3, r3
 800af32:	697a      	ldr	r2, [r7, #20]
 800af34:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2201      	movs	r2, #1
 800af3a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	6a1a      	ldr	r2, [r3, #32]
 800af40:	69bb      	ldr	r3, [r7, #24]
 800af42:	0a5b      	lsrs	r3, r3, #9
 800af44:	4413      	add	r3, r2
 800af46:	4619      	mov	r1, r3
 800af48:	68f8      	ldr	r0, [r7, #12]
 800af4a:	f7ff fe3b 	bl	800abc4 <move_window>
 800af4e:	4603      	mov	r3, r0
 800af50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800af52:	7ffb      	ldrb	r3, [r7, #31]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d17a      	bne.n	800b04e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800af5e:	69bb      	ldr	r3, [r7, #24]
 800af60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af64:	4413      	add	r3, r2
 800af66:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	f003 0301 	and.w	r3, r3, #1
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d003      	beq.n	800af7a <put_fat+0xf0>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	091b      	lsrs	r3, r3, #4
 800af76:	b2db      	uxtb	r3, r3
 800af78:	e00e      	b.n	800af98 <put_fat+0x10e>
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	b25b      	sxtb	r3, r3
 800af80:	f023 030f 	bic.w	r3, r3, #15
 800af84:	b25a      	sxtb	r2, r3
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	0a1b      	lsrs	r3, r3, #8
 800af8a:	b25b      	sxtb	r3, r3
 800af8c:	f003 030f 	and.w	r3, r3, #15
 800af90:	b25b      	sxtb	r3, r3
 800af92:	4313      	orrs	r3, r2
 800af94:	b25b      	sxtb	r3, r3
 800af96:	b2db      	uxtb	r3, r3
 800af98:	697a      	ldr	r2, [r7, #20]
 800af9a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	2201      	movs	r2, #1
 800afa0:	70da      	strb	r2, [r3, #3]
			break;
 800afa2:	e059      	b.n	800b058 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	6a1a      	ldr	r2, [r3, #32]
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	0a1b      	lsrs	r3, r3, #8
 800afac:	4413      	add	r3, r2
 800afae:	4619      	mov	r1, r3
 800afb0:	68f8      	ldr	r0, [r7, #12]
 800afb2:	f7ff fe07 	bl	800abc4 <move_window>
 800afb6:	4603      	mov	r3, r0
 800afb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800afba:	7ffb      	ldrb	r3, [r7, #31]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d148      	bne.n	800b052 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	005b      	lsls	r3, r3, #1
 800afca:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800afce:	4413      	add	r3, r2
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	b292      	uxth	r2, r2
 800afd4:	4611      	mov	r1, r2
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7ff fb7f 	bl	800a6da <st_word>
			fs->wflag = 1;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2201      	movs	r2, #1
 800afe0:	70da      	strb	r2, [r3, #3]
			break;
 800afe2:	e039      	b.n	800b058 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	6a1a      	ldr	r2, [r3, #32]
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	09db      	lsrs	r3, r3, #7
 800afec:	4413      	add	r3, r2
 800afee:	4619      	mov	r1, r3
 800aff0:	68f8      	ldr	r0, [r7, #12]
 800aff2:	f7ff fde7 	bl	800abc4 <move_window>
 800aff6:	4603      	mov	r3, r0
 800aff8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800affa:	7ffb      	ldrb	r3, [r7, #31]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d12a      	bne.n	800b056 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	009b      	lsls	r3, r3, #2
 800b010:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b014:	4413      	add	r3, r2
 800b016:	4618      	mov	r0, r3
 800b018:	f7ff fb3c 	bl	800a694 <ld_dword>
 800b01c:	4603      	mov	r3, r0
 800b01e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b022:	4323      	orrs	r3, r4
 800b024:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	009b      	lsls	r3, r3, #2
 800b030:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b034:	4413      	add	r3, r2
 800b036:	6879      	ldr	r1, [r7, #4]
 800b038:	4618      	mov	r0, r3
 800b03a:	f7ff fb69 	bl	800a710 <st_dword>
			fs->wflag = 1;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2201      	movs	r2, #1
 800b042:	70da      	strb	r2, [r3, #3]
			break;
 800b044:	e008      	b.n	800b058 <put_fat+0x1ce>
		}
	}
 800b046:	bf00      	nop
 800b048:	e006      	b.n	800b058 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b04a:	bf00      	nop
 800b04c:	e004      	b.n	800b058 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b04e:	bf00      	nop
 800b050:	e002      	b.n	800b058 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b052:	bf00      	nop
 800b054:	e000      	b.n	800b058 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b056:	bf00      	nop
	return res;
 800b058:	7ffb      	ldrb	r3, [r7, #31]
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3724      	adds	r7, #36	; 0x24
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd90      	pop	{r4, r7, pc}

0800b062 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b062:	b580      	push	{r7, lr}
 800b064:	b088      	sub	sp, #32
 800b066:	af00      	add	r7, sp, #0
 800b068:	60f8      	str	r0, [r7, #12]
 800b06a:	60b9      	str	r1, [r7, #8]
 800b06c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b06e:	2300      	movs	r3, #0
 800b070:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d904      	bls.n	800b088 <remove_chain+0x26>
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	695b      	ldr	r3, [r3, #20]
 800b082:	68ba      	ldr	r2, [r7, #8]
 800b084:	429a      	cmp	r2, r3
 800b086:	d301      	bcc.n	800b08c <remove_chain+0x2a>
 800b088:	2302      	movs	r3, #2
 800b08a:	e04b      	b.n	800b124 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d00c      	beq.n	800b0ac <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b092:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b096:	6879      	ldr	r1, [r7, #4]
 800b098:	69b8      	ldr	r0, [r7, #24]
 800b09a:	f7ff fef6 	bl	800ae8a <put_fat>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b0a2:	7ffb      	ldrb	r3, [r7, #31]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d001      	beq.n	800b0ac <remove_chain+0x4a>
 800b0a8:	7ffb      	ldrb	r3, [r7, #31]
 800b0aa:	e03b      	b.n	800b124 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b0ac:	68b9      	ldr	r1, [r7, #8]
 800b0ae:	68f8      	ldr	r0, [r7, #12]
 800b0b0:	f7ff fe43 	bl	800ad3a <get_fat>
 800b0b4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d031      	beq.n	800b120 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d101      	bne.n	800b0c6 <remove_chain+0x64>
 800b0c2:	2302      	movs	r3, #2
 800b0c4:	e02e      	b.n	800b124 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0cc:	d101      	bne.n	800b0d2 <remove_chain+0x70>
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	e028      	b.n	800b124 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	68b9      	ldr	r1, [r7, #8]
 800b0d6:	69b8      	ldr	r0, [r7, #24]
 800b0d8:	f7ff fed7 	bl	800ae8a <put_fat>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b0e0:	7ffb      	ldrb	r3, [r7, #31]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d001      	beq.n	800b0ea <remove_chain+0x88>
 800b0e6:	7ffb      	ldrb	r3, [r7, #31]
 800b0e8:	e01c      	b.n	800b124 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b0ea:	69bb      	ldr	r3, [r7, #24]
 800b0ec:	691a      	ldr	r2, [r3, #16]
 800b0ee:	69bb      	ldr	r3, [r7, #24]
 800b0f0:	695b      	ldr	r3, [r3, #20]
 800b0f2:	3b02      	subs	r3, #2
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d20b      	bcs.n	800b110 <remove_chain+0xae>
			fs->free_clst++;
 800b0f8:	69bb      	ldr	r3, [r7, #24]
 800b0fa:	691b      	ldr	r3, [r3, #16]
 800b0fc:	1c5a      	adds	r2, r3, #1
 800b0fe:	69bb      	ldr	r3, [r7, #24]
 800b100:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800b102:	69bb      	ldr	r3, [r7, #24]
 800b104:	791b      	ldrb	r3, [r3, #4]
 800b106:	f043 0301 	orr.w	r3, r3, #1
 800b10a:	b2da      	uxtb	r2, r3
 800b10c:	69bb      	ldr	r3, [r7, #24]
 800b10e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b114:	69bb      	ldr	r3, [r7, #24]
 800b116:	695b      	ldr	r3, [r3, #20]
 800b118:	68ba      	ldr	r2, [r7, #8]
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d3c6      	bcc.n	800b0ac <remove_chain+0x4a>
 800b11e:	e000      	b.n	800b122 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b120:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b122:	2300      	movs	r3, #0
}
 800b124:	4618      	mov	r0, r3
 800b126:	3720      	adds	r7, #32
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b088      	sub	sp, #32
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d10d      	bne.n	800b15e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	68db      	ldr	r3, [r3, #12]
 800b146:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b148:	69bb      	ldr	r3, [r7, #24]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d004      	beq.n	800b158 <create_chain+0x2c>
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	695b      	ldr	r3, [r3, #20]
 800b152:	69ba      	ldr	r2, [r7, #24]
 800b154:	429a      	cmp	r2, r3
 800b156:	d31b      	bcc.n	800b190 <create_chain+0x64>
 800b158:	2301      	movs	r3, #1
 800b15a:	61bb      	str	r3, [r7, #24]
 800b15c:	e018      	b.n	800b190 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b15e:	6839      	ldr	r1, [r7, #0]
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f7ff fdea 	bl	800ad3a <get_fat>
 800b166:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2b01      	cmp	r3, #1
 800b16c:	d801      	bhi.n	800b172 <create_chain+0x46>
 800b16e:	2301      	movs	r3, #1
 800b170:	e070      	b.n	800b254 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b178:	d101      	bne.n	800b17e <create_chain+0x52>
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	e06a      	b.n	800b254 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	695b      	ldr	r3, [r3, #20]
 800b182:	68fa      	ldr	r2, [r7, #12]
 800b184:	429a      	cmp	r2, r3
 800b186:	d201      	bcs.n	800b18c <create_chain+0x60>
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	e063      	b.n	800b254 <create_chain+0x128>
		scl = clst;
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b190:	69bb      	ldr	r3, [r7, #24]
 800b192:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b194:	69fb      	ldr	r3, [r7, #28]
 800b196:	3301      	adds	r3, #1
 800b198:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	695b      	ldr	r3, [r3, #20]
 800b19e:	69fa      	ldr	r2, [r7, #28]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d307      	bcc.n	800b1b4 <create_chain+0x88>
				ncl = 2;
 800b1a4:	2302      	movs	r3, #2
 800b1a6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b1a8:	69fa      	ldr	r2, [r7, #28]
 800b1aa:	69bb      	ldr	r3, [r7, #24]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d901      	bls.n	800b1b4 <create_chain+0x88>
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	e04f      	b.n	800b254 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b1b4:	69f9      	ldr	r1, [r7, #28]
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f7ff fdbf 	bl	800ad3a <get_fat>
 800b1bc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d00e      	beq.n	800b1e2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d003      	beq.n	800b1d2 <create_chain+0xa6>
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1d0:	d101      	bne.n	800b1d6 <create_chain+0xaa>
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	e03e      	b.n	800b254 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b1d6:	69fa      	ldr	r2, [r7, #28]
 800b1d8:	69bb      	ldr	r3, [r7, #24]
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d1da      	bne.n	800b194 <create_chain+0x68>
 800b1de:	2300      	movs	r3, #0
 800b1e0:	e038      	b.n	800b254 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b1e2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b1e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b1e8:	69f9      	ldr	r1, [r7, #28]
 800b1ea:	6938      	ldr	r0, [r7, #16]
 800b1ec:	f7ff fe4d 	bl	800ae8a <put_fat>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b1f4:	7dfb      	ldrb	r3, [r7, #23]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d109      	bne.n	800b20e <create_chain+0xe2>
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d006      	beq.n	800b20e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b200:	69fa      	ldr	r2, [r7, #28]
 800b202:	6839      	ldr	r1, [r7, #0]
 800b204:	6938      	ldr	r0, [r7, #16]
 800b206:	f7ff fe40 	bl	800ae8a <put_fat>
 800b20a:	4603      	mov	r3, r0
 800b20c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b20e:	7dfb      	ldrb	r3, [r7, #23]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d116      	bne.n	800b242 <create_chain+0x116>
		fs->last_clst = ncl;
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	69fa      	ldr	r2, [r7, #28]
 800b218:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	691a      	ldr	r2, [r3, #16]
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	695b      	ldr	r3, [r3, #20]
 800b222:	3b02      	subs	r3, #2
 800b224:	429a      	cmp	r2, r3
 800b226:	d804      	bhi.n	800b232 <create_chain+0x106>
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	691b      	ldr	r3, [r3, #16]
 800b22c:	1e5a      	subs	r2, r3, #1
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	791b      	ldrb	r3, [r3, #4]
 800b236:	f043 0301 	orr.w	r3, r3, #1
 800b23a:	b2da      	uxtb	r2, r3
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	711a      	strb	r2, [r3, #4]
 800b240:	e007      	b.n	800b252 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b242:	7dfb      	ldrb	r3, [r7, #23]
 800b244:	2b01      	cmp	r3, #1
 800b246:	d102      	bne.n	800b24e <create_chain+0x122>
 800b248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b24c:	e000      	b.n	800b250 <create_chain+0x124>
 800b24e:	2301      	movs	r3, #1
 800b250:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b252:	69fb      	ldr	r3, [r7, #28]
}
 800b254:	4618      	mov	r0, r3
 800b256:	3720      	adds	r7, #32
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b087      	sub	sp, #28
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b270:	3304      	adds	r3, #4
 800b272:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	0a5b      	lsrs	r3, r3, #9
 800b278:	68fa      	ldr	r2, [r7, #12]
 800b27a:	8952      	ldrh	r2, [r2, #10]
 800b27c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b280:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	1d1a      	adds	r2, r3, #4
 800b286:	613a      	str	r2, [r7, #16]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d101      	bne.n	800b296 <clmt_clust+0x3a>
 800b292:	2300      	movs	r3, #0
 800b294:	e010      	b.n	800b2b8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b296:	697a      	ldr	r2, [r7, #20]
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d307      	bcc.n	800b2ae <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b29e:	697a      	ldr	r2, [r7, #20]
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	1ad3      	subs	r3, r2, r3
 800b2a4:	617b      	str	r3, [r7, #20]
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	3304      	adds	r3, #4
 800b2aa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b2ac:	e7e9      	b.n	800b282 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b2ae:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	681a      	ldr	r2, [r3, #0]
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	4413      	add	r3, r2
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	371c      	adds	r7, #28
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b086      	sub	sp, #24
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b2da:	d204      	bcs.n	800b2e6 <dir_sdi+0x22>
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	f003 031f 	and.w	r3, r3, #31
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d001      	beq.n	800b2ea <dir_sdi+0x26>
		return FR_INT_ERR;
 800b2e6:	2302      	movs	r3, #2
 800b2e8:	e063      	b.n	800b3b2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	683a      	ldr	r2, [r7, #0]
 800b2ee:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d106      	bne.n	800b30a <dir_sdi+0x46>
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	2b02      	cmp	r3, #2
 800b302:	d902      	bls.n	800b30a <dir_sdi+0x46>
		clst = fs->dirbase;
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b308:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d10c      	bne.n	800b32a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	095b      	lsrs	r3, r3, #5
 800b314:	693a      	ldr	r2, [r7, #16]
 800b316:	8912      	ldrh	r2, [r2, #8]
 800b318:	4293      	cmp	r3, r2
 800b31a:	d301      	bcc.n	800b320 <dir_sdi+0x5c>
 800b31c:	2302      	movs	r3, #2
 800b31e:	e048      	b.n	800b3b2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	61da      	str	r2, [r3, #28]
 800b328:	e029      	b.n	800b37e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	895b      	ldrh	r3, [r3, #10]
 800b32e:	025b      	lsls	r3, r3, #9
 800b330:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b332:	e019      	b.n	800b368 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6979      	ldr	r1, [r7, #20]
 800b338:	4618      	mov	r0, r3
 800b33a:	f7ff fcfe 	bl	800ad3a <get_fat>
 800b33e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b346:	d101      	bne.n	800b34c <dir_sdi+0x88>
 800b348:	2301      	movs	r3, #1
 800b34a:	e032      	b.n	800b3b2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	2b01      	cmp	r3, #1
 800b350:	d904      	bls.n	800b35c <dir_sdi+0x98>
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	695b      	ldr	r3, [r3, #20]
 800b356:	697a      	ldr	r2, [r7, #20]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d301      	bcc.n	800b360 <dir_sdi+0x9c>
 800b35c:	2302      	movs	r3, #2
 800b35e:	e028      	b.n	800b3b2 <dir_sdi+0xee>
			ofs -= csz;
 800b360:	683a      	ldr	r2, [r7, #0]
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	1ad3      	subs	r3, r2, r3
 800b366:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b368:	683a      	ldr	r2, [r7, #0]
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d2e1      	bcs.n	800b334 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b370:	6979      	ldr	r1, [r7, #20]
 800b372:	6938      	ldr	r0, [r7, #16]
 800b374:	f7ff fcc2 	bl	800acfc <clust2sect>
 800b378:	4602      	mov	r2, r0
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	697a      	ldr	r2, [r7, #20]
 800b382:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	69db      	ldr	r3, [r3, #28]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d101      	bne.n	800b390 <dir_sdi+0xcc>
 800b38c:	2302      	movs	r3, #2
 800b38e:	e010      	b.n	800b3b2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	69da      	ldr	r2, [r3, #28]
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	0a5b      	lsrs	r3, r3, #9
 800b398:	441a      	add	r2, r3
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3aa:	441a      	add	r2, r3
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b3b0:	2300      	movs	r3, #0
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3718      	adds	r7, #24
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}

0800b3ba <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b3ba:	b580      	push	{r7, lr}
 800b3bc:	b086      	sub	sp, #24
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	6078      	str	r0, [r7, #4]
 800b3c2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	695b      	ldr	r3, [r3, #20]
 800b3ce:	3320      	adds	r3, #32
 800b3d0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	69db      	ldr	r3, [r3, #28]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d003      	beq.n	800b3e2 <dir_next+0x28>
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b3e0:	d301      	bcc.n	800b3e6 <dir_next+0x2c>
 800b3e2:	2304      	movs	r3, #4
 800b3e4:	e0aa      	b.n	800b53c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	f040 8098 	bne.w	800b522 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	69db      	ldr	r3, [r3, #28]
 800b3f6:	1c5a      	adds	r2, r3, #1
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	699b      	ldr	r3, [r3, #24]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d10b      	bne.n	800b41c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	095b      	lsrs	r3, r3, #5
 800b408:	68fa      	ldr	r2, [r7, #12]
 800b40a:	8912      	ldrh	r2, [r2, #8]
 800b40c:	4293      	cmp	r3, r2
 800b40e:	f0c0 8088 	bcc.w	800b522 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2200      	movs	r2, #0
 800b416:	61da      	str	r2, [r3, #28]
 800b418:	2304      	movs	r3, #4
 800b41a:	e08f      	b.n	800b53c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	0a5b      	lsrs	r3, r3, #9
 800b420:	68fa      	ldr	r2, [r7, #12]
 800b422:	8952      	ldrh	r2, [r2, #10]
 800b424:	3a01      	subs	r2, #1
 800b426:	4013      	ands	r3, r2
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d17a      	bne.n	800b522 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	699b      	ldr	r3, [r3, #24]
 800b432:	4619      	mov	r1, r3
 800b434:	4610      	mov	r0, r2
 800b436:	f7ff fc80 	bl	800ad3a <get_fat>
 800b43a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d801      	bhi.n	800b446 <dir_next+0x8c>
 800b442:	2302      	movs	r3, #2
 800b444:	e07a      	b.n	800b53c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b44c:	d101      	bne.n	800b452 <dir_next+0x98>
 800b44e:	2301      	movs	r3, #1
 800b450:	e074      	b.n	800b53c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	695b      	ldr	r3, [r3, #20]
 800b456:	697a      	ldr	r2, [r7, #20]
 800b458:	429a      	cmp	r2, r3
 800b45a:	d358      	bcc.n	800b50e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d104      	bne.n	800b46c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2200      	movs	r2, #0
 800b466:	61da      	str	r2, [r3, #28]
 800b468:	2304      	movs	r3, #4
 800b46a:	e067      	b.n	800b53c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b46c:	687a      	ldr	r2, [r7, #4]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	699b      	ldr	r3, [r3, #24]
 800b472:	4619      	mov	r1, r3
 800b474:	4610      	mov	r0, r2
 800b476:	f7ff fe59 	bl	800b12c <create_chain>
 800b47a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d101      	bne.n	800b486 <dir_next+0xcc>
 800b482:	2307      	movs	r3, #7
 800b484:	e05a      	b.n	800b53c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d101      	bne.n	800b490 <dir_next+0xd6>
 800b48c:	2302      	movs	r3, #2
 800b48e:	e055      	b.n	800b53c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b496:	d101      	bne.n	800b49c <dir_next+0xe2>
 800b498:	2301      	movs	r3, #1
 800b49a:	e04f      	b.n	800b53c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b49c:	68f8      	ldr	r0, [r7, #12]
 800b49e:	f7ff fb4d 	bl	800ab3c <sync_window>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d001      	beq.n	800b4ac <dir_next+0xf2>
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	e047      	b.n	800b53c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	3330      	adds	r3, #48	; 0x30
 800b4b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4b4:	2100      	movs	r1, #0
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7ff f977 	bl	800a7aa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b4bc:	2300      	movs	r3, #0
 800b4be:	613b      	str	r3, [r7, #16]
 800b4c0:	6979      	ldr	r1, [r7, #20]
 800b4c2:	68f8      	ldr	r0, [r7, #12]
 800b4c4:	f7ff fc1a 	bl	800acfc <clust2sect>
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	62da      	str	r2, [r3, #44]	; 0x2c
 800b4ce:	e012      	b.n	800b4f6 <dir_next+0x13c>
						fs->wflag = 1;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b4d6:	68f8      	ldr	r0, [r7, #12]
 800b4d8:	f7ff fb30 	bl	800ab3c <sync_window>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d001      	beq.n	800b4e6 <dir_next+0x12c>
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	e02a      	b.n	800b53c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	613b      	str	r3, [r7, #16]
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4f0:	1c5a      	adds	r2, r3, #1
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	62da      	str	r2, [r3, #44]	; 0x2c
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	895b      	ldrh	r3, [r3, #10]
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d3e6      	bcc.n	800b4d0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	1ad2      	subs	r2, r2, r3
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	697a      	ldr	r2, [r7, #20]
 800b512:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b514:	6979      	ldr	r1, [r7, #20]
 800b516:	68f8      	ldr	r0, [r7, #12]
 800b518:	f7ff fbf0 	bl	800acfc <clust2sect>
 800b51c:	4602      	mov	r2, r0
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	68ba      	ldr	r2, [r7, #8]
 800b526:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b534:	441a      	add	r2, r3
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b53a:	2300      	movs	r3, #0
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3718      	adds	r7, #24
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b086      	sub	sp, #24
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b554:	2100      	movs	r1, #0
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f7ff feb4 	bl	800b2c4 <dir_sdi>
 800b55c:	4603      	mov	r3, r0
 800b55e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b560:	7dfb      	ldrb	r3, [r7, #23]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d12b      	bne.n	800b5be <dir_alloc+0x7a>
		n = 0;
 800b566:	2300      	movs	r3, #0
 800b568:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	69db      	ldr	r3, [r3, #28]
 800b56e:	4619      	mov	r1, r3
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	f7ff fb27 	bl	800abc4 <move_window>
 800b576:	4603      	mov	r3, r0
 800b578:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b57a:	7dfb      	ldrb	r3, [r7, #23]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d11d      	bne.n	800b5bc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6a1b      	ldr	r3, [r3, #32]
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	2be5      	cmp	r3, #229	; 0xe5
 800b588:	d004      	beq.n	800b594 <dir_alloc+0x50>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6a1b      	ldr	r3, [r3, #32]
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d107      	bne.n	800b5a4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	3301      	adds	r3, #1
 800b598:	613b      	str	r3, [r7, #16]
 800b59a:	693a      	ldr	r2, [r7, #16]
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	d102      	bne.n	800b5a8 <dir_alloc+0x64>
 800b5a2:	e00c      	b.n	800b5be <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b5a8:	2101      	movs	r1, #1
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f7ff ff05 	bl	800b3ba <dir_next>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b5b4:	7dfb      	ldrb	r3, [r7, #23]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d0d7      	beq.n	800b56a <dir_alloc+0x26>
 800b5ba:	e000      	b.n	800b5be <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b5bc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b5be:	7dfb      	ldrb	r3, [r7, #23]
 800b5c0:	2b04      	cmp	r3, #4
 800b5c2:	d101      	bne.n	800b5c8 <dir_alloc+0x84>
 800b5c4:	2307      	movs	r3, #7
 800b5c6:	75fb      	strb	r3, [r7, #23]
	return res;
 800b5c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3718      	adds	r7, #24
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}

0800b5d2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b5d2:	b580      	push	{r7, lr}
 800b5d4:	b084      	sub	sp, #16
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	6078      	str	r0, [r7, #4]
 800b5da:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	331a      	adds	r3, #26
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f7ff f83f 	bl	800a664 <ld_word>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	2b03      	cmp	r3, #3
 800b5f0:	d109      	bne.n	800b606 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	3314      	adds	r3, #20
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f7ff f834 	bl	800a664 <ld_word>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	041b      	lsls	r3, r3, #16
 800b600:	68fa      	ldr	r2, [r7, #12]
 800b602:	4313      	orrs	r3, r2
 800b604:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b606:	68fb      	ldr	r3, [r7, #12]
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3710      	adds	r7, #16
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	60f8      	str	r0, [r7, #12]
 800b618:	60b9      	str	r1, [r7, #8]
 800b61a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	331a      	adds	r3, #26
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	b292      	uxth	r2, r2
 800b624:	4611      	mov	r1, r2
 800b626:	4618      	mov	r0, r3
 800b628:	f7ff f857 	bl	800a6da <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	781b      	ldrb	r3, [r3, #0]
 800b630:	2b03      	cmp	r3, #3
 800b632:	d109      	bne.n	800b648 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	f103 0214 	add.w	r2, r3, #20
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	0c1b      	lsrs	r3, r3, #16
 800b63e:	b29b      	uxth	r3, r3
 800b640:	4619      	mov	r1, r3
 800b642:	4610      	mov	r0, r2
 800b644:	f7ff f849 	bl	800a6da <st_word>
	}
}
 800b648:	bf00      	nop
 800b64a:	3710      	adds	r7, #16
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b086      	sub	sp, #24
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b65e:	2100      	movs	r1, #0
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f7ff fe2f 	bl	800b2c4 <dir_sdi>
 800b666:	4603      	mov	r3, r0
 800b668:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b66a:	7dfb      	ldrb	r3, [r7, #23]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d001      	beq.n	800b674 <dir_find+0x24>
 800b670:	7dfb      	ldrb	r3, [r7, #23]
 800b672:	e03e      	b.n	800b6f2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	69db      	ldr	r3, [r3, #28]
 800b678:	4619      	mov	r1, r3
 800b67a:	6938      	ldr	r0, [r7, #16]
 800b67c:	f7ff faa2 	bl	800abc4 <move_window>
 800b680:	4603      	mov	r3, r0
 800b682:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b684:	7dfb      	ldrb	r3, [r7, #23]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d12f      	bne.n	800b6ea <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6a1b      	ldr	r3, [r3, #32]
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b692:	7bfb      	ldrb	r3, [r7, #15]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d102      	bne.n	800b69e <dir_find+0x4e>
 800b698:	2304      	movs	r3, #4
 800b69a:	75fb      	strb	r3, [r7, #23]
 800b69c:	e028      	b.n	800b6f0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6a1b      	ldr	r3, [r3, #32]
 800b6a2:	330b      	adds	r3, #11
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b6aa:	b2da      	uxtb	r2, r3
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6a1b      	ldr	r3, [r3, #32]
 800b6b4:	330b      	adds	r3, #11
 800b6b6:	781b      	ldrb	r3, [r3, #0]
 800b6b8:	f003 0308 	and.w	r3, r3, #8
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d10a      	bne.n	800b6d6 <dir_find+0x86>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6a18      	ldr	r0, [r3, #32]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	3324      	adds	r3, #36	; 0x24
 800b6c8:	220b      	movs	r2, #11
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	f7ff f888 	bl	800a7e0 <mem_cmp>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00b      	beq.n	800b6ee <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b6d6:	2100      	movs	r1, #0
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f7ff fe6e 	bl	800b3ba <dir_next>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b6e2:	7dfb      	ldrb	r3, [r7, #23]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d0c5      	beq.n	800b674 <dir_find+0x24>
 800b6e8:	e002      	b.n	800b6f0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b6ea:	bf00      	nop
 800b6ec:	e000      	b.n	800b6f0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b6ee:	bf00      	nop

	return res;
 800b6f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3718      	adds	r7, #24
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}

0800b6fa <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b6fa:	b580      	push	{r7, lr}
 800b6fc:	b084      	sub	sp, #16
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b708:	2101      	movs	r1, #1
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f7ff ff1a 	bl	800b544 <dir_alloc>
 800b710:	4603      	mov	r3, r0
 800b712:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b714:	7bfb      	ldrb	r3, [r7, #15]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d11c      	bne.n	800b754 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	69db      	ldr	r3, [r3, #28]
 800b71e:	4619      	mov	r1, r3
 800b720:	68b8      	ldr	r0, [r7, #8]
 800b722:	f7ff fa4f 	bl	800abc4 <move_window>
 800b726:	4603      	mov	r3, r0
 800b728:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b72a:	7bfb      	ldrb	r3, [r7, #15]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d111      	bne.n	800b754 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6a1b      	ldr	r3, [r3, #32]
 800b734:	2220      	movs	r2, #32
 800b736:	2100      	movs	r1, #0
 800b738:	4618      	mov	r0, r3
 800b73a:	f7ff f836 	bl	800a7aa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6a18      	ldr	r0, [r3, #32]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	3324      	adds	r3, #36	; 0x24
 800b746:	220b      	movs	r2, #11
 800b748:	4619      	mov	r1, r3
 800b74a:	f7ff f80d 	bl	800a768 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	2201      	movs	r2, #1
 800b752:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b754:	7bfb      	ldrb	r3, [r7, #15]
}
 800b756:	4618      	mov	r0, r3
 800b758:	3710      	adds	r7, #16
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
	...

0800b760 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b088      	sub	sp, #32
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	60fb      	str	r3, [r7, #12]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	3324      	adds	r3, #36	; 0x24
 800b774:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b776:	220b      	movs	r2, #11
 800b778:	2120      	movs	r1, #32
 800b77a:	68b8      	ldr	r0, [r7, #8]
 800b77c:	f7ff f815 	bl	800a7aa <mem_set>
	si = i = 0; ni = 8;
 800b780:	2300      	movs	r3, #0
 800b782:	613b      	str	r3, [r7, #16]
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	61fb      	str	r3, [r7, #28]
 800b788:	2308      	movs	r3, #8
 800b78a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	1c5a      	adds	r2, r3, #1
 800b790:	61fa      	str	r2, [r7, #28]
 800b792:	68fa      	ldr	r2, [r7, #12]
 800b794:	4413      	add	r3, r2
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b79a:	7efb      	ldrb	r3, [r7, #27]
 800b79c:	2b20      	cmp	r3, #32
 800b79e:	d94e      	bls.n	800b83e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b7a0:	7efb      	ldrb	r3, [r7, #27]
 800b7a2:	2b2f      	cmp	r3, #47	; 0x2f
 800b7a4:	d006      	beq.n	800b7b4 <create_name+0x54>
 800b7a6:	7efb      	ldrb	r3, [r7, #27]
 800b7a8:	2b5c      	cmp	r3, #92	; 0x5c
 800b7aa:	d110      	bne.n	800b7ce <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b7ac:	e002      	b.n	800b7b4 <create_name+0x54>
 800b7ae:	69fb      	ldr	r3, [r7, #28]
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	61fb      	str	r3, [r7, #28]
 800b7b4:	68fa      	ldr	r2, [r7, #12]
 800b7b6:	69fb      	ldr	r3, [r7, #28]
 800b7b8:	4413      	add	r3, r2
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	2b2f      	cmp	r3, #47	; 0x2f
 800b7be:	d0f6      	beq.n	800b7ae <create_name+0x4e>
 800b7c0:	68fa      	ldr	r2, [r7, #12]
 800b7c2:	69fb      	ldr	r3, [r7, #28]
 800b7c4:	4413      	add	r3, r2
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	2b5c      	cmp	r3, #92	; 0x5c
 800b7ca:	d0f0      	beq.n	800b7ae <create_name+0x4e>
			break;
 800b7cc:	e038      	b.n	800b840 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b7ce:	7efb      	ldrb	r3, [r7, #27]
 800b7d0:	2b2e      	cmp	r3, #46	; 0x2e
 800b7d2:	d003      	beq.n	800b7dc <create_name+0x7c>
 800b7d4:	693a      	ldr	r2, [r7, #16]
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d30c      	bcc.n	800b7f6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	2b0b      	cmp	r3, #11
 800b7e0:	d002      	beq.n	800b7e8 <create_name+0x88>
 800b7e2:	7efb      	ldrb	r3, [r7, #27]
 800b7e4:	2b2e      	cmp	r3, #46	; 0x2e
 800b7e6:	d001      	beq.n	800b7ec <create_name+0x8c>
 800b7e8:	2306      	movs	r3, #6
 800b7ea:	e044      	b.n	800b876 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b7ec:	2308      	movs	r3, #8
 800b7ee:	613b      	str	r3, [r7, #16]
 800b7f0:	230b      	movs	r3, #11
 800b7f2:	617b      	str	r3, [r7, #20]
			continue;
 800b7f4:	e022      	b.n	800b83c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b7f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	da04      	bge.n	800b808 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b7fe:	7efb      	ldrb	r3, [r7, #27]
 800b800:	3b80      	subs	r3, #128	; 0x80
 800b802:	4a1f      	ldr	r2, [pc, #124]	; (800b880 <create_name+0x120>)
 800b804:	5cd3      	ldrb	r3, [r2, r3]
 800b806:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b808:	7efb      	ldrb	r3, [r7, #27]
 800b80a:	4619      	mov	r1, r3
 800b80c:	481d      	ldr	r0, [pc, #116]	; (800b884 <create_name+0x124>)
 800b80e:	f7ff f80e 	bl	800a82e <chk_chr>
 800b812:	4603      	mov	r3, r0
 800b814:	2b00      	cmp	r3, #0
 800b816:	d001      	beq.n	800b81c <create_name+0xbc>
 800b818:	2306      	movs	r3, #6
 800b81a:	e02c      	b.n	800b876 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b81c:	7efb      	ldrb	r3, [r7, #27]
 800b81e:	2b60      	cmp	r3, #96	; 0x60
 800b820:	d905      	bls.n	800b82e <create_name+0xce>
 800b822:	7efb      	ldrb	r3, [r7, #27]
 800b824:	2b7a      	cmp	r3, #122	; 0x7a
 800b826:	d802      	bhi.n	800b82e <create_name+0xce>
 800b828:	7efb      	ldrb	r3, [r7, #27]
 800b82a:	3b20      	subs	r3, #32
 800b82c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	1c5a      	adds	r2, r3, #1
 800b832:	613a      	str	r2, [r7, #16]
 800b834:	68ba      	ldr	r2, [r7, #8]
 800b836:	4413      	add	r3, r2
 800b838:	7efa      	ldrb	r2, [r7, #27]
 800b83a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b83c:	e7a6      	b.n	800b78c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b83e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b840:	68fa      	ldr	r2, [r7, #12]
 800b842:	69fb      	ldr	r3, [r7, #28]
 800b844:	441a      	add	r2, r3
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d101      	bne.n	800b854 <create_name+0xf4>
 800b850:	2306      	movs	r3, #6
 800b852:	e010      	b.n	800b876 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	781b      	ldrb	r3, [r3, #0]
 800b858:	2be5      	cmp	r3, #229	; 0xe5
 800b85a:	d102      	bne.n	800b862 <create_name+0x102>
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	2205      	movs	r2, #5
 800b860:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b862:	7efb      	ldrb	r3, [r7, #27]
 800b864:	2b20      	cmp	r3, #32
 800b866:	d801      	bhi.n	800b86c <create_name+0x10c>
 800b868:	2204      	movs	r2, #4
 800b86a:	e000      	b.n	800b86e <create_name+0x10e>
 800b86c:	2200      	movs	r2, #0
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	330b      	adds	r3, #11
 800b872:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b874:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b876:	4618      	mov	r0, r3
 800b878:	3720      	adds	r7, #32
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}
 800b87e:	bf00      	nop
 800b880:	0800fd50 	.word	0x0800fd50
 800b884:	0800fb08 	.word	0x0800fb08

0800b888 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b086      	sub	sp, #24
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
 800b890:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b89c:	e002      	b.n	800b8a4 <follow_path+0x1c>
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	603b      	str	r3, [r7, #0]
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	2b2f      	cmp	r3, #47	; 0x2f
 800b8aa:	d0f8      	beq.n	800b89e <follow_path+0x16>
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	2b5c      	cmp	r3, #92	; 0x5c
 800b8b2:	d0f4      	beq.n	800b89e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	2b1f      	cmp	r3, #31
 800b8c0:	d80a      	bhi.n	800b8d8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2280      	movs	r2, #128	; 0x80
 800b8c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b8ca:	2100      	movs	r1, #0
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f7ff fcf9 	bl	800b2c4 <dir_sdi>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	75fb      	strb	r3, [r7, #23]
 800b8d6:	e043      	b.n	800b960 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b8d8:	463b      	mov	r3, r7
 800b8da:	4619      	mov	r1, r3
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f7ff ff3f 	bl	800b760 <create_name>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b8e6:	7dfb      	ldrb	r3, [r7, #23]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d134      	bne.n	800b956 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f7ff feaf 	bl	800b650 <dir_find>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b8fc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b8fe:	7dfb      	ldrb	r3, [r7, #23]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d00a      	beq.n	800b91a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b904:	7dfb      	ldrb	r3, [r7, #23]
 800b906:	2b04      	cmp	r3, #4
 800b908:	d127      	bne.n	800b95a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b90a:	7afb      	ldrb	r3, [r7, #11]
 800b90c:	f003 0304 	and.w	r3, r3, #4
 800b910:	2b00      	cmp	r3, #0
 800b912:	d122      	bne.n	800b95a <follow_path+0xd2>
 800b914:	2305      	movs	r3, #5
 800b916:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b918:	e01f      	b.n	800b95a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b91a:	7afb      	ldrb	r3, [r7, #11]
 800b91c:	f003 0304 	and.w	r3, r3, #4
 800b920:	2b00      	cmp	r3, #0
 800b922:	d11c      	bne.n	800b95e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	799b      	ldrb	r3, [r3, #6]
 800b928:	f003 0310 	and.w	r3, r3, #16
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d102      	bne.n	800b936 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b930:	2305      	movs	r3, #5
 800b932:	75fb      	strb	r3, [r7, #23]
 800b934:	e014      	b.n	800b960 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	695b      	ldr	r3, [r3, #20]
 800b940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b944:	4413      	add	r3, r2
 800b946:	4619      	mov	r1, r3
 800b948:	68f8      	ldr	r0, [r7, #12]
 800b94a:	f7ff fe42 	bl	800b5d2 <ld_clust>
 800b94e:	4602      	mov	r2, r0
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b954:	e7c0      	b.n	800b8d8 <follow_path+0x50>
			if (res != FR_OK) break;
 800b956:	bf00      	nop
 800b958:	e002      	b.n	800b960 <follow_path+0xd8>
				break;
 800b95a:	bf00      	nop
 800b95c:	e000      	b.n	800b960 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b95e:	bf00      	nop
			}
		}
	}

	return res;
 800b960:	7dfb      	ldrb	r3, [r7, #23]
}
 800b962:	4618      	mov	r0, r3
 800b964:	3718      	adds	r7, #24
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}

0800b96a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b96a:	b480      	push	{r7}
 800b96c:	b087      	sub	sp, #28
 800b96e:	af00      	add	r7, sp, #0
 800b970:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b976:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d031      	beq.n	800b9e4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	617b      	str	r3, [r7, #20]
 800b986:	e002      	b.n	800b98e <get_ldnumber+0x24>
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	3301      	adds	r3, #1
 800b98c:	617b      	str	r3, [r7, #20]
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	2b20      	cmp	r3, #32
 800b994:	d903      	bls.n	800b99e <get_ldnumber+0x34>
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	2b3a      	cmp	r3, #58	; 0x3a
 800b99c:	d1f4      	bne.n	800b988 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	2b3a      	cmp	r3, #58	; 0x3a
 800b9a4:	d11c      	bne.n	800b9e0 <get_ldnumber+0x76>
			tp = *path;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	1c5a      	adds	r2, r3, #1
 800b9b0:	60fa      	str	r2, [r7, #12]
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	3b30      	subs	r3, #48	; 0x30
 800b9b6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	2b09      	cmp	r3, #9
 800b9bc:	d80e      	bhi.n	800b9dc <get_ldnumber+0x72>
 800b9be:	68fa      	ldr	r2, [r7, #12]
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d10a      	bne.n	800b9dc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d107      	bne.n	800b9dc <get_ldnumber+0x72>
					vol = (int)i;
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	3301      	adds	r3, #1
 800b9d4:	617b      	str	r3, [r7, #20]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	697a      	ldr	r2, [r7, #20]
 800b9da:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	e002      	b.n	800b9e6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b9e4:	693b      	ldr	r3, [r7, #16]
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	371c      	adds	r7, #28
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr
	...

0800b9f4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2200      	movs	r2, #0
 800ba02:	70da      	strb	r2, [r3, #3]
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba0a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ba0c:	6839      	ldr	r1, [r7, #0]
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f7ff f8d8 	bl	800abc4 <move_window>
 800ba14:	4603      	mov	r3, r0
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d001      	beq.n	800ba1e <check_fs+0x2a>
 800ba1a:	2304      	movs	r3, #4
 800ba1c:	e038      	b.n	800ba90 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	3330      	adds	r3, #48	; 0x30
 800ba22:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ba26:	4618      	mov	r0, r3
 800ba28:	f7fe fe1c 	bl	800a664 <ld_word>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	461a      	mov	r2, r3
 800ba30:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d001      	beq.n	800ba3c <check_fs+0x48>
 800ba38:	2303      	movs	r3, #3
 800ba3a:	e029      	b.n	800ba90 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ba42:	2be9      	cmp	r3, #233	; 0xe9
 800ba44:	d009      	beq.n	800ba5a <check_fs+0x66>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ba4c:	2beb      	cmp	r3, #235	; 0xeb
 800ba4e:	d11e      	bne.n	800ba8e <check_fs+0x9a>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ba56:	2b90      	cmp	r3, #144	; 0x90
 800ba58:	d119      	bne.n	800ba8e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	3330      	adds	r3, #48	; 0x30
 800ba5e:	3336      	adds	r3, #54	; 0x36
 800ba60:	4618      	mov	r0, r3
 800ba62:	f7fe fe17 	bl	800a694 <ld_dword>
 800ba66:	4603      	mov	r3, r0
 800ba68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ba6c:	4a0a      	ldr	r2, [pc, #40]	; (800ba98 <check_fs+0xa4>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d101      	bne.n	800ba76 <check_fs+0x82>
 800ba72:	2300      	movs	r3, #0
 800ba74:	e00c      	b.n	800ba90 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	3330      	adds	r3, #48	; 0x30
 800ba7a:	3352      	adds	r3, #82	; 0x52
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7fe fe09 	bl	800a694 <ld_dword>
 800ba82:	4603      	mov	r3, r0
 800ba84:	4a05      	ldr	r2, [pc, #20]	; (800ba9c <check_fs+0xa8>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d101      	bne.n	800ba8e <check_fs+0x9a>
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	e000      	b.n	800ba90 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ba8e:	2302      	movs	r3, #2
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3708      	adds	r7, #8
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}
 800ba98:	00544146 	.word	0x00544146
 800ba9c:	33544146 	.word	0x33544146

0800baa0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b096      	sub	sp, #88	; 0x58
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	60f8      	str	r0, [r7, #12]
 800baa8:	60b9      	str	r1, [r7, #8]
 800baaa:	4613      	mov	r3, r2
 800baac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	2200      	movs	r2, #0
 800bab2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bab4:	68f8      	ldr	r0, [r7, #12]
 800bab6:	f7ff ff58 	bl	800b96a <get_ldnumber>
 800baba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800babc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800babe:	2b00      	cmp	r3, #0
 800bac0:	da01      	bge.n	800bac6 <find_volume+0x26>
 800bac2:	230b      	movs	r3, #11
 800bac4:	e22d      	b.n	800bf22 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bac6:	4aa1      	ldr	r2, [pc, #644]	; (800bd4c <find_volume+0x2ac>)
 800bac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800baca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bace:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d101      	bne.n	800bada <find_volume+0x3a>
 800bad6:	230c      	movs	r3, #12
 800bad8:	e223      	b.n	800bf22 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bade:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bae0:	79fb      	ldrb	r3, [r7, #7]
 800bae2:	f023 0301 	bic.w	r3, r3, #1
 800bae6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d01a      	beq.n	800bb26 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800baf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf2:	785b      	ldrb	r3, [r3, #1]
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7fe fd17 	bl	800a528 <disk_status>
 800bafa:	4603      	mov	r3, r0
 800bafc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bb00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bb04:	f003 0301 	and.w	r3, r3, #1
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d10c      	bne.n	800bb26 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bb0c:	79fb      	ldrb	r3, [r7, #7]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d007      	beq.n	800bb22 <find_volume+0x82>
 800bb12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bb16:	f003 0304 	and.w	r3, r3, #4
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d001      	beq.n	800bb22 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800bb1e:	230a      	movs	r3, #10
 800bb20:	e1ff      	b.n	800bf22 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800bb22:	2300      	movs	r3, #0
 800bb24:	e1fd      	b.n	800bf22 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bb26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb28:	2200      	movs	r2, #0
 800bb2a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bb2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb2e:	b2da      	uxtb	r2, r3
 800bb30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb32:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb36:	785b      	ldrb	r3, [r3, #1]
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7fe fd0f 	bl	800a55c <disk_initialize>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bb44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bb48:	f003 0301 	and.w	r3, r3, #1
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d001      	beq.n	800bb54 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bb50:	2303      	movs	r3, #3
 800bb52:	e1e6      	b.n	800bf22 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bb54:	79fb      	ldrb	r3, [r7, #7]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d007      	beq.n	800bb6a <find_volume+0xca>
 800bb5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bb5e:	f003 0304 	and.w	r3, r3, #4
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d001      	beq.n	800bb6a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800bb66:	230a      	movs	r3, #10
 800bb68:	e1db      	b.n	800bf22 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bb6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bb70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bb72:	f7ff ff3f 	bl	800b9f4 <check_fs>
 800bb76:	4603      	mov	r3, r0
 800bb78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bb7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bb80:	2b02      	cmp	r3, #2
 800bb82:	d149      	bne.n	800bc18 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bb84:	2300      	movs	r3, #0
 800bb86:	643b      	str	r3, [r7, #64]	; 0x40
 800bb88:	e01e      	b.n	800bbc8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bb8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb8c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bb90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb92:	011b      	lsls	r3, r3, #4
 800bb94:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800bb98:	4413      	add	r3, r2
 800bb9a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb9e:	3304      	adds	r3, #4
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d006      	beq.n	800bbb4 <find_volume+0x114>
 800bba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba8:	3308      	adds	r3, #8
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7fe fd72 	bl	800a694 <ld_dword>
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	e000      	b.n	800bbb6 <find_volume+0x116>
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	3358      	adds	r3, #88	; 0x58
 800bbbc:	443b      	add	r3, r7
 800bbbe:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bbc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	643b      	str	r3, [r7, #64]	; 0x40
 800bbc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbca:	2b03      	cmp	r3, #3
 800bbcc:	d9dd      	bls.n	800bb8a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bbce:	2300      	movs	r3, #0
 800bbd0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800bbd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d002      	beq.n	800bbde <find_volume+0x13e>
 800bbd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbda:	3b01      	subs	r3, #1
 800bbdc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bbde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	3358      	adds	r3, #88	; 0x58
 800bbe4:	443b      	add	r3, r7
 800bbe6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bbea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bbec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d005      	beq.n	800bbfe <find_volume+0x15e>
 800bbf2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bbf4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bbf6:	f7ff fefd 	bl	800b9f4 <check_fs>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	e000      	b.n	800bc00 <find_volume+0x160>
 800bbfe:	2303      	movs	r3, #3
 800bc00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bc04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	d905      	bls.n	800bc18 <find_volume+0x178>
 800bc0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc0e:	3301      	adds	r3, #1
 800bc10:	643b      	str	r3, [r7, #64]	; 0x40
 800bc12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc14:	2b03      	cmp	r3, #3
 800bc16:	d9e2      	bls.n	800bbde <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bc18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bc1c:	2b04      	cmp	r3, #4
 800bc1e:	d101      	bne.n	800bc24 <find_volume+0x184>
 800bc20:	2301      	movs	r3, #1
 800bc22:	e17e      	b.n	800bf22 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bc24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d901      	bls.n	800bc30 <find_volume+0x190>
 800bc2c:	230d      	movs	r3, #13
 800bc2e:	e178      	b.n	800bf22 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc32:	3330      	adds	r3, #48	; 0x30
 800bc34:	330b      	adds	r3, #11
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7fe fd14 	bl	800a664 <ld_word>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc42:	d001      	beq.n	800bc48 <find_volume+0x1a8>
 800bc44:	230d      	movs	r3, #13
 800bc46:	e16c      	b.n	800bf22 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc4a:	3330      	adds	r3, #48	; 0x30
 800bc4c:	3316      	adds	r3, #22
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7fe fd08 	bl	800a664 <ld_word>
 800bc54:	4603      	mov	r3, r0
 800bc56:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bc58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d106      	bne.n	800bc6c <find_volume+0x1cc>
 800bc5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc60:	3330      	adds	r3, #48	; 0x30
 800bc62:	3324      	adds	r3, #36	; 0x24
 800bc64:	4618      	mov	r0, r3
 800bc66:	f7fe fd15 	bl	800a694 <ld_dword>
 800bc6a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800bc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bc70:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bc72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc74:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800bc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc7a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc7e:	789b      	ldrb	r3, [r3, #2]
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d005      	beq.n	800bc90 <find_volume+0x1f0>
 800bc84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc86:	789b      	ldrb	r3, [r3, #2]
 800bc88:	2b02      	cmp	r3, #2
 800bc8a:	d001      	beq.n	800bc90 <find_volume+0x1f0>
 800bc8c:	230d      	movs	r3, #13
 800bc8e:	e148      	b.n	800bf22 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bc90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc92:	789b      	ldrb	r3, [r3, #2]
 800bc94:	461a      	mov	r2, r3
 800bc96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc98:	fb02 f303 	mul.w	r3, r2, r3
 800bc9c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bca4:	b29a      	uxth	r2, r3
 800bca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bcaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcac:	895b      	ldrh	r3, [r3, #10]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d008      	beq.n	800bcc4 <find_volume+0x224>
 800bcb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb4:	895b      	ldrh	r3, [r3, #10]
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcba:	895b      	ldrh	r3, [r3, #10]
 800bcbc:	3b01      	subs	r3, #1
 800bcbe:	4013      	ands	r3, r2
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d001      	beq.n	800bcc8 <find_volume+0x228>
 800bcc4:	230d      	movs	r3, #13
 800bcc6:	e12c      	b.n	800bf22 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bcc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcca:	3330      	adds	r3, #48	; 0x30
 800bccc:	3311      	adds	r3, #17
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f7fe fcc8 	bl	800a664 <ld_word>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcda:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bcdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcde:	891b      	ldrh	r3, [r3, #8]
 800bce0:	f003 030f 	and.w	r3, r3, #15
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d001      	beq.n	800bcee <find_volume+0x24e>
 800bcea:	230d      	movs	r3, #13
 800bcec:	e119      	b.n	800bf22 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bcee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf0:	3330      	adds	r3, #48	; 0x30
 800bcf2:	3313      	adds	r3, #19
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f7fe fcb5 	bl	800a664 <ld_word>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bcfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d106      	bne.n	800bd12 <find_volume+0x272>
 800bd04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd06:	3330      	adds	r3, #48	; 0x30
 800bd08:	3320      	adds	r3, #32
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7fe fcc2 	bl	800a694 <ld_dword>
 800bd10:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd14:	3330      	adds	r3, #48	; 0x30
 800bd16:	330e      	adds	r3, #14
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f7fe fca3 	bl	800a664 <ld_word>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bd22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d101      	bne.n	800bd2c <find_volume+0x28c>
 800bd28:	230d      	movs	r3, #13
 800bd2a:	e0fa      	b.n	800bf22 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bd2c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bd2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd30:	4413      	add	r3, r2
 800bd32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd34:	8912      	ldrh	r2, [r2, #8]
 800bd36:	0912      	lsrs	r2, r2, #4
 800bd38:	b292      	uxth	r2, r2
 800bd3a:	4413      	add	r3, r2
 800bd3c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bd3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d204      	bcs.n	800bd50 <find_volume+0x2b0>
 800bd46:	230d      	movs	r3, #13
 800bd48:	e0eb      	b.n	800bf22 <find_volume+0x482>
 800bd4a:	bf00      	nop
 800bd4c:	20000ea8 	.word	0x20000ea8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bd50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd54:	1ad3      	subs	r3, r2, r3
 800bd56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd58:	8952      	ldrh	r2, [r2, #10]
 800bd5a:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd5e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d101      	bne.n	800bd6a <find_volume+0x2ca>
 800bd66:	230d      	movs	r3, #13
 800bd68:	e0db      	b.n	800bf22 <find_volume+0x482>
		fmt = FS_FAT32;
 800bd6a:	2303      	movs	r3, #3
 800bd6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd72:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d802      	bhi.n	800bd80 <find_volume+0x2e0>
 800bd7a:	2302      	movs	r3, #2
 800bd7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd82:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d802      	bhi.n	800bd90 <find_volume+0x2f0>
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd92:	1c9a      	adds	r2, r3, #2
 800bd94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd96:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800bd98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bd9c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bd9e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bda0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bda2:	441a      	add	r2, r3
 800bda4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800bda8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bdaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdac:	441a      	add	r2, r3
 800bdae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb0:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800bdb2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bdb6:	2b03      	cmp	r3, #3
 800bdb8:	d11e      	bne.n	800bdf8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800bdba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdbc:	3330      	adds	r3, #48	; 0x30
 800bdbe:	332a      	adds	r3, #42	; 0x2a
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7fe fc4f 	bl	800a664 <ld_word>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d001      	beq.n	800bdd0 <find_volume+0x330>
 800bdcc:	230d      	movs	r3, #13
 800bdce:	e0a8      	b.n	800bf22 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bdd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd2:	891b      	ldrh	r3, [r3, #8]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d001      	beq.n	800bddc <find_volume+0x33c>
 800bdd8:	230d      	movs	r3, #13
 800bdda:	e0a2      	b.n	800bf22 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdde:	3330      	adds	r3, #48	; 0x30
 800bde0:	332c      	adds	r3, #44	; 0x2c
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7fe fc56 	bl	800a694 <ld_dword>
 800bde8:	4602      	mov	r2, r0
 800bdea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdec:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bdee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf0:	695b      	ldr	r3, [r3, #20]
 800bdf2:	009b      	lsls	r3, r3, #2
 800bdf4:	647b      	str	r3, [r7, #68]	; 0x44
 800bdf6:	e01f      	b.n	800be38 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdfa:	891b      	ldrh	r3, [r3, #8]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d101      	bne.n	800be04 <find_volume+0x364>
 800be00:	230d      	movs	r3, #13
 800be02:	e08e      	b.n	800bf22 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800be04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be06:	6a1a      	ldr	r2, [r3, #32]
 800be08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be0a:	441a      	add	r2, r3
 800be0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be0e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800be10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be14:	2b02      	cmp	r3, #2
 800be16:	d103      	bne.n	800be20 <find_volume+0x380>
 800be18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be1a:	695b      	ldr	r3, [r3, #20]
 800be1c:	005b      	lsls	r3, r3, #1
 800be1e:	e00a      	b.n	800be36 <find_volume+0x396>
 800be20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be22:	695a      	ldr	r2, [r3, #20]
 800be24:	4613      	mov	r3, r2
 800be26:	005b      	lsls	r3, r3, #1
 800be28:	4413      	add	r3, r2
 800be2a:	085a      	lsrs	r2, r3, #1
 800be2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be2e:	695b      	ldr	r3, [r3, #20]
 800be30:	f003 0301 	and.w	r3, r3, #1
 800be34:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800be36:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800be38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be3a:	699a      	ldr	r2, [r3, #24]
 800be3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be3e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800be42:	0a5b      	lsrs	r3, r3, #9
 800be44:	429a      	cmp	r2, r3
 800be46:	d201      	bcs.n	800be4c <find_volume+0x3ac>
 800be48:	230d      	movs	r3, #13
 800be4a:	e06a      	b.n	800bf22 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800be4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be52:	611a      	str	r2, [r3, #16]
 800be54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be56:	691a      	ldr	r2, [r3, #16]
 800be58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be5a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800be5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be5e:	2280      	movs	r2, #128	; 0x80
 800be60:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800be62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be66:	2b03      	cmp	r3, #3
 800be68:	d149      	bne.n	800befe <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800be6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be6c:	3330      	adds	r3, #48	; 0x30
 800be6e:	3330      	adds	r3, #48	; 0x30
 800be70:	4618      	mov	r0, r3
 800be72:	f7fe fbf7 	bl	800a664 <ld_word>
 800be76:	4603      	mov	r3, r0
 800be78:	2b01      	cmp	r3, #1
 800be7a:	d140      	bne.n	800befe <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800be7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be7e:	3301      	adds	r3, #1
 800be80:	4619      	mov	r1, r3
 800be82:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800be84:	f7fe fe9e 	bl	800abc4 <move_window>
 800be88:	4603      	mov	r3, r0
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d137      	bne.n	800befe <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800be8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be90:	2200      	movs	r2, #0
 800be92:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800be94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be96:	3330      	adds	r3, #48	; 0x30
 800be98:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7fe fbe1 	bl	800a664 <ld_word>
 800bea2:	4603      	mov	r3, r0
 800bea4:	461a      	mov	r2, r3
 800bea6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800beaa:	429a      	cmp	r2, r3
 800beac:	d127      	bne.n	800befe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800beae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb0:	3330      	adds	r3, #48	; 0x30
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7fe fbee 	bl	800a694 <ld_dword>
 800beb8:	4603      	mov	r3, r0
 800beba:	4a1c      	ldr	r2, [pc, #112]	; (800bf2c <find_volume+0x48c>)
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d11e      	bne.n	800befe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec2:	3330      	adds	r3, #48	; 0x30
 800bec4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bec8:	4618      	mov	r0, r3
 800beca:	f7fe fbe3 	bl	800a694 <ld_dword>
 800bece:	4603      	mov	r3, r0
 800bed0:	4a17      	ldr	r2, [pc, #92]	; (800bf30 <find_volume+0x490>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d113      	bne.n	800befe <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed8:	3330      	adds	r3, #48	; 0x30
 800beda:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800bede:	4618      	mov	r0, r3
 800bee0:	f7fe fbd8 	bl	800a694 <ld_dword>
 800bee4:	4602      	mov	r2, r0
 800bee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800beea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beec:	3330      	adds	r3, #48	; 0x30
 800beee:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800bef2:	4618      	mov	r0, r3
 800bef4:	f7fe fbce 	bl	800a694 <ld_dword>
 800bef8:	4602      	mov	r2, r0
 800befa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800befc:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800befe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf00:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bf04:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bf06:	4b0b      	ldr	r3, [pc, #44]	; (800bf34 <find_volume+0x494>)
 800bf08:	881b      	ldrh	r3, [r3, #0]
 800bf0a:	3301      	adds	r3, #1
 800bf0c:	b29a      	uxth	r2, r3
 800bf0e:	4b09      	ldr	r3, [pc, #36]	; (800bf34 <find_volume+0x494>)
 800bf10:	801a      	strh	r2, [r3, #0]
 800bf12:	4b08      	ldr	r3, [pc, #32]	; (800bf34 <find_volume+0x494>)
 800bf14:	881a      	ldrh	r2, [r3, #0]
 800bf16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf18:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bf1a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bf1c:	f7fe fdea 	bl	800aaf4 <clear_lock>
#endif
	return FR_OK;
 800bf20:	2300      	movs	r3, #0
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3758      	adds	r7, #88	; 0x58
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	41615252 	.word	0x41615252
 800bf30:	61417272 	.word	0x61417272
 800bf34:	20000eac 	.word	0x20000eac

0800bf38 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b084      	sub	sp, #16
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bf42:	2309      	movs	r3, #9
 800bf44:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d01c      	beq.n	800bf86 <validate+0x4e>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d018      	beq.n	800bf86 <validate+0x4e>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d013      	beq.n	800bf86 <validate+0x4e>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	889a      	ldrh	r2, [r3, #4]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	88db      	ldrh	r3, [r3, #6]
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d10c      	bne.n	800bf86 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	785b      	ldrb	r3, [r3, #1]
 800bf72:	4618      	mov	r0, r3
 800bf74:	f7fe fad8 	bl	800a528 <disk_status>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	f003 0301 	and.w	r3, r3, #1
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d101      	bne.n	800bf86 <validate+0x4e>
			res = FR_OK;
 800bf82:	2300      	movs	r3, #0
 800bf84:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bf86:	7bfb      	ldrb	r3, [r7, #15]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d102      	bne.n	800bf92 <validate+0x5a>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	e000      	b.n	800bf94 <validate+0x5c>
 800bf92:	2300      	movs	r3, #0
 800bf94:	683a      	ldr	r2, [r7, #0]
 800bf96:	6013      	str	r3, [r2, #0]
	return res;
 800bf98:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3710      	adds	r7, #16
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
	...

0800bfa4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b088      	sub	sp, #32
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	60b9      	str	r1, [r7, #8]
 800bfae:	4613      	mov	r3, r2
 800bfb0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bfb6:	f107 0310 	add.w	r3, r7, #16
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f7ff fcd5 	bl	800b96a <get_ldnumber>
 800bfc0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bfc2:	69fb      	ldr	r3, [r7, #28]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	da01      	bge.n	800bfcc <f_mount+0x28>
 800bfc8:	230b      	movs	r3, #11
 800bfca:	e02b      	b.n	800c024 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bfcc:	4a17      	ldr	r2, [pc, #92]	; (800c02c <f_mount+0x88>)
 800bfce:	69fb      	ldr	r3, [r7, #28]
 800bfd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfd4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bfd6:	69bb      	ldr	r3, [r7, #24]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d005      	beq.n	800bfe8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bfdc:	69b8      	ldr	r0, [r7, #24]
 800bfde:	f7fe fd89 	bl	800aaf4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bfe2:	69bb      	ldr	r3, [r7, #24]
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d002      	beq.n	800bff4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2200      	movs	r2, #0
 800bff2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bff4:	68fa      	ldr	r2, [r7, #12]
 800bff6:	490d      	ldr	r1, [pc, #52]	; (800c02c <f_mount+0x88>)
 800bff8:	69fb      	ldr	r3, [r7, #28]
 800bffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d002      	beq.n	800c00a <f_mount+0x66>
 800c004:	79fb      	ldrb	r3, [r7, #7]
 800c006:	2b01      	cmp	r3, #1
 800c008:	d001      	beq.n	800c00e <f_mount+0x6a>
 800c00a:	2300      	movs	r3, #0
 800c00c:	e00a      	b.n	800c024 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c00e:	f107 010c 	add.w	r1, r7, #12
 800c012:	f107 0308 	add.w	r3, r7, #8
 800c016:	2200      	movs	r2, #0
 800c018:	4618      	mov	r0, r3
 800c01a:	f7ff fd41 	bl	800baa0 <find_volume>
 800c01e:	4603      	mov	r3, r0
 800c020:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c022:	7dfb      	ldrb	r3, [r7, #23]
}
 800c024:	4618      	mov	r0, r3
 800c026:	3720      	adds	r7, #32
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	20000ea8 	.word	0x20000ea8

0800c030 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b098      	sub	sp, #96	; 0x60
 800c034:	af00      	add	r7, sp, #0
 800c036:	60f8      	str	r0, [r7, #12]
 800c038:	60b9      	str	r1, [r7, #8]
 800c03a:	4613      	mov	r3, r2
 800c03c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d101      	bne.n	800c048 <f_open+0x18>
 800c044:	2309      	movs	r3, #9
 800c046:	e1ad      	b.n	800c3a4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c048:	79fb      	ldrb	r3, [r7, #7]
 800c04a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c04e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c050:	79fa      	ldrb	r2, [r7, #7]
 800c052:	f107 0110 	add.w	r1, r7, #16
 800c056:	f107 0308 	add.w	r3, r7, #8
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7ff fd20 	bl	800baa0 <find_volume>
 800c060:	4603      	mov	r3, r0
 800c062:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800c066:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	f040 8191 	bne.w	800c392 <f_open+0x362>
		dj.obj.fs = fs;
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c074:	68ba      	ldr	r2, [r7, #8]
 800c076:	f107 0314 	add.w	r3, r7, #20
 800c07a:	4611      	mov	r1, r2
 800c07c:	4618      	mov	r0, r3
 800c07e:	f7ff fc03 	bl	800b888 <follow_path>
 800c082:	4603      	mov	r3, r0
 800c084:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c088:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d11a      	bne.n	800c0c6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c090:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c094:	b25b      	sxtb	r3, r3
 800c096:	2b00      	cmp	r3, #0
 800c098:	da03      	bge.n	800c0a2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800c09a:	2306      	movs	r3, #6
 800c09c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c0a0:	e011      	b.n	800c0c6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c0a2:	79fb      	ldrb	r3, [r7, #7]
 800c0a4:	f023 0301 	bic.w	r3, r3, #1
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	bf14      	ite	ne
 800c0ac:	2301      	movne	r3, #1
 800c0ae:	2300      	moveq	r3, #0
 800c0b0:	b2db      	uxtb	r3, r3
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	f107 0314 	add.w	r3, r7, #20
 800c0b8:	4611      	mov	r1, r2
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f7fe fbd2 	bl	800a864 <chk_lock>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c0c6:	79fb      	ldrb	r3, [r7, #7]
 800c0c8:	f003 031c 	and.w	r3, r3, #28
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d07f      	beq.n	800c1d0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c0d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d017      	beq.n	800c108 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c0d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0dc:	2b04      	cmp	r3, #4
 800c0de:	d10e      	bne.n	800c0fe <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c0e0:	f7fe fc1c 	bl	800a91c <enq_lock>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d006      	beq.n	800c0f8 <f_open+0xc8>
 800c0ea:	f107 0314 	add.w	r3, r7, #20
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7ff fb03 	bl	800b6fa <dir_register>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	e000      	b.n	800c0fa <f_open+0xca>
 800c0f8:	2312      	movs	r3, #18
 800c0fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c0fe:	79fb      	ldrb	r3, [r7, #7]
 800c100:	f043 0308 	orr.w	r3, r3, #8
 800c104:	71fb      	strb	r3, [r7, #7]
 800c106:	e010      	b.n	800c12a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c108:	7ebb      	ldrb	r3, [r7, #26]
 800c10a:	f003 0311 	and.w	r3, r3, #17
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d003      	beq.n	800c11a <f_open+0xea>
					res = FR_DENIED;
 800c112:	2307      	movs	r3, #7
 800c114:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c118:	e007      	b.n	800c12a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c11a:	79fb      	ldrb	r3, [r7, #7]
 800c11c:	f003 0304 	and.w	r3, r3, #4
 800c120:	2b00      	cmp	r3, #0
 800c122:	d002      	beq.n	800c12a <f_open+0xfa>
 800c124:	2308      	movs	r3, #8
 800c126:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c12a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d168      	bne.n	800c204 <f_open+0x1d4>
 800c132:	79fb      	ldrb	r3, [r7, #7]
 800c134:	f003 0308 	and.w	r3, r3, #8
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d063      	beq.n	800c204 <f_open+0x1d4>
				dw = GET_FATTIME();
 800c13c:	f7fe f82e 	bl	800a19c <get_fattime>
 800c140:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c144:	330e      	adds	r3, #14
 800c146:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c148:	4618      	mov	r0, r3
 800c14a:	f7fe fae1 	bl	800a710 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c150:	3316      	adds	r3, #22
 800c152:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c154:	4618      	mov	r0, r3
 800c156:	f7fe fadb 	bl	800a710 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c15a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c15c:	330b      	adds	r3, #11
 800c15e:	2220      	movs	r2, #32
 800c160:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c166:	4611      	mov	r1, r2
 800c168:	4618      	mov	r0, r3
 800c16a:	f7ff fa32 	bl	800b5d2 <ld_clust>
 800c16e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c174:	2200      	movs	r2, #0
 800c176:	4618      	mov	r0, r3
 800c178:	f7ff fa4a 	bl	800b610 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c17c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c17e:	331c      	adds	r3, #28
 800c180:	2100      	movs	r1, #0
 800c182:	4618      	mov	r0, r3
 800c184:	f7fe fac4 	bl	800a710 <st_dword>
					fs->wflag = 1;
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	2201      	movs	r2, #1
 800c18c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c18e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c190:	2b00      	cmp	r3, #0
 800c192:	d037      	beq.n	800c204 <f_open+0x1d4>
						dw = fs->winsect;
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c198:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c19a:	f107 0314 	add.w	r3, r7, #20
 800c19e:	2200      	movs	r2, #0
 800c1a0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f7fe ff5d 	bl	800b062 <remove_chain>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800c1ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d126      	bne.n	800c204 <f_open+0x1d4>
							res = move_window(fs, dw);
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7fe fd02 	bl	800abc4 <move_window>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c1ca:	3a01      	subs	r2, #1
 800c1cc:	60da      	str	r2, [r3, #12]
 800c1ce:	e019      	b.n	800c204 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c1d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d115      	bne.n	800c204 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c1d8:	7ebb      	ldrb	r3, [r7, #26]
 800c1da:	f003 0310 	and.w	r3, r3, #16
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d003      	beq.n	800c1ea <f_open+0x1ba>
					res = FR_NO_FILE;
 800c1e2:	2304      	movs	r3, #4
 800c1e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c1e8:	e00c      	b.n	800c204 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c1ea:	79fb      	ldrb	r3, [r7, #7]
 800c1ec:	f003 0302 	and.w	r3, r3, #2
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d007      	beq.n	800c204 <f_open+0x1d4>
 800c1f4:	7ebb      	ldrb	r3, [r7, #26]
 800c1f6:	f003 0301 	and.w	r3, r3, #1
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d002      	beq.n	800c204 <f_open+0x1d4>
						res = FR_DENIED;
 800c1fe:	2307      	movs	r3, #7
 800c200:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c204:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d128      	bne.n	800c25e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c20c:	79fb      	ldrb	r3, [r7, #7]
 800c20e:	f003 0308 	and.w	r3, r3, #8
 800c212:	2b00      	cmp	r3, #0
 800c214:	d003      	beq.n	800c21e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c216:	79fb      	ldrb	r3, [r7, #7]
 800c218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c21c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c226:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c22c:	79fb      	ldrb	r3, [r7, #7]
 800c22e:	f023 0301 	bic.w	r3, r3, #1
 800c232:	2b00      	cmp	r3, #0
 800c234:	bf14      	ite	ne
 800c236:	2301      	movne	r3, #1
 800c238:	2300      	moveq	r3, #0
 800c23a:	b2db      	uxtb	r3, r3
 800c23c:	461a      	mov	r2, r3
 800c23e:	f107 0314 	add.w	r3, r7, #20
 800c242:	4611      	mov	r1, r2
 800c244:	4618      	mov	r0, r3
 800c246:	f7fe fb8b 	bl	800a960 <inc_lock>
 800c24a:	4602      	mov	r2, r0
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	691b      	ldr	r3, [r3, #16]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d102      	bne.n	800c25e <f_open+0x22e>
 800c258:	2302      	movs	r3, #2
 800c25a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c25e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c262:	2b00      	cmp	r3, #0
 800c264:	f040 8095 	bne.w	800c392 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c26c:	4611      	mov	r1, r2
 800c26e:	4618      	mov	r0, r3
 800c270:	f7ff f9af 	bl	800b5d2 <ld_clust>
 800c274:	4602      	mov	r2, r0
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c27a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c27c:	331c      	adds	r3, #28
 800c27e:	4618      	mov	r0, r3
 800c280:	f7fe fa08 	bl	800a694 <ld_dword>
 800c284:	4602      	mov	r2, r0
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2200      	movs	r2, #0
 800c28e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c290:	693a      	ldr	r2, [r7, #16]
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	88da      	ldrh	r2, [r3, #6]
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	79fa      	ldrb	r2, [r7, #7]
 800c2a2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	3330      	adds	r3, #48	; 0x30
 800c2ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c2be:	2100      	movs	r1, #0
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f7fe fa72 	bl	800a7aa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c2c6:	79fb      	ldrb	r3, [r7, #7]
 800c2c8:	f003 0320 	and.w	r3, r3, #32
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d060      	beq.n	800c392 <f_open+0x362>
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	68db      	ldr	r3, [r3, #12]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d05c      	beq.n	800c392 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	68da      	ldr	r2, [r3, #12]
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	895b      	ldrh	r3, [r3, #10]
 800c2e4:	025b      	lsls	r3, r3, #9
 800c2e6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	689b      	ldr	r3, [r3, #8]
 800c2ec:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	68db      	ldr	r3, [r3, #12]
 800c2f2:	657b      	str	r3, [r7, #84]	; 0x54
 800c2f4:	e016      	b.n	800c324 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f7fe fd1d 	bl	800ad3a <get_fat>
 800c300:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c302:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c304:	2b01      	cmp	r3, #1
 800c306:	d802      	bhi.n	800c30e <f_open+0x2de>
 800c308:	2302      	movs	r3, #2
 800c30a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c30e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c310:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c314:	d102      	bne.n	800c31c <f_open+0x2ec>
 800c316:	2301      	movs	r3, #1
 800c318:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c31c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c31e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c320:	1ad3      	subs	r3, r2, r3
 800c322:	657b      	str	r3, [r7, #84]	; 0x54
 800c324:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d103      	bne.n	800c334 <f_open+0x304>
 800c32c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c32e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c330:	429a      	cmp	r2, r3
 800c332:	d8e0      	bhi.n	800c2f6 <f_open+0x2c6>
				}
				fp->clust = clst;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c338:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c33a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d127      	bne.n	800c392 <f_open+0x362>
 800c342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d022      	beq.n	800c392 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c350:	4618      	mov	r0, r3
 800c352:	f7fe fcd3 	bl	800acfc <clust2sect>
 800c356:	6478      	str	r0, [r7, #68]	; 0x44
 800c358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d103      	bne.n	800c366 <f_open+0x336>
						res = FR_INT_ERR;
 800c35e:	2302      	movs	r3, #2
 800c360:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c364:	e015      	b.n	800c392 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c368:	0a5a      	lsrs	r2, r3, #9
 800c36a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c36c:	441a      	add	r2, r3
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	7858      	ldrb	r0, [r3, #1]
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	6a1a      	ldr	r2, [r3, #32]
 800c380:	2301      	movs	r3, #1
 800c382:	f7fe f911 	bl	800a5a8 <disk_read>
 800c386:	4603      	mov	r3, r0
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d002      	beq.n	800c392 <f_open+0x362>
 800c38c:	2301      	movs	r3, #1
 800c38e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c392:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c396:	2b00      	cmp	r3, #0
 800c398:	d002      	beq.n	800c3a0 <f_open+0x370>
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	2200      	movs	r2, #0
 800c39e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c3a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3760      	adds	r7, #96	; 0x60
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}

0800c3ac <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b08c      	sub	sp, #48	; 0x30
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	60f8      	str	r0, [r7, #12]
 800c3b4:	60b9      	str	r1, [r7, #8]
 800c3b6:	607a      	str	r2, [r7, #4]
 800c3b8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f107 0210 	add.w	r2, r7, #16
 800c3ca:	4611      	mov	r1, r2
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7ff fdb3 	bl	800bf38 <validate>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c3d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d107      	bne.n	800c3f0 <f_write+0x44>
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	7d5b      	ldrb	r3, [r3, #21]
 800c3e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c3e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d002      	beq.n	800c3f6 <f_write+0x4a>
 800c3f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3f4:	e14b      	b.n	800c68e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	7d1b      	ldrb	r3, [r3, #20]
 800c3fa:	f003 0302 	and.w	r3, r3, #2
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d101      	bne.n	800c406 <f_write+0x5a>
 800c402:	2307      	movs	r3, #7
 800c404:	e143      	b.n	800c68e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	699a      	ldr	r2, [r3, #24]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	441a      	add	r2, r3
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	699b      	ldr	r3, [r3, #24]
 800c412:	429a      	cmp	r2, r3
 800c414:	f080 812d 	bcs.w	800c672 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	699b      	ldr	r3, [r3, #24]
 800c41c:	43db      	mvns	r3, r3
 800c41e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c420:	e127      	b.n	800c672 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	699b      	ldr	r3, [r3, #24]
 800c426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	f040 80e3 	bne.w	800c5f6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	699b      	ldr	r3, [r3, #24]
 800c434:	0a5b      	lsrs	r3, r3, #9
 800c436:	693a      	ldr	r2, [r7, #16]
 800c438:	8952      	ldrh	r2, [r2, #10]
 800c43a:	3a01      	subs	r2, #1
 800c43c:	4013      	ands	r3, r2
 800c43e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c440:	69bb      	ldr	r3, [r7, #24]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d143      	bne.n	800c4ce <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	699b      	ldr	r3, [r3, #24]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d10c      	bne.n	800c468 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	689b      	ldr	r3, [r3, #8]
 800c452:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c456:	2b00      	cmp	r3, #0
 800c458:	d11a      	bne.n	800c490 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	2100      	movs	r1, #0
 800c45e:	4618      	mov	r0, r3
 800c460:	f7fe fe64 	bl	800b12c <create_chain>
 800c464:	62b8      	str	r0, [r7, #40]	; 0x28
 800c466:	e013      	b.n	800c490 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d007      	beq.n	800c480 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	699b      	ldr	r3, [r3, #24]
 800c474:	4619      	mov	r1, r3
 800c476:	68f8      	ldr	r0, [r7, #12]
 800c478:	f7fe fef0 	bl	800b25c <clmt_clust>
 800c47c:	62b8      	str	r0, [r7, #40]	; 0x28
 800c47e:	e007      	b.n	800c490 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c480:	68fa      	ldr	r2, [r7, #12]
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	69db      	ldr	r3, [r3, #28]
 800c486:	4619      	mov	r1, r3
 800c488:	4610      	mov	r0, r2
 800c48a:	f7fe fe4f 	bl	800b12c <create_chain>
 800c48e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c492:	2b00      	cmp	r3, #0
 800c494:	f000 80f2 	beq.w	800c67c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49a:	2b01      	cmp	r3, #1
 800c49c:	d104      	bne.n	800c4a8 <f_write+0xfc>
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	2202      	movs	r2, #2
 800c4a2:	755a      	strb	r2, [r3, #21]
 800c4a4:	2302      	movs	r3, #2
 800c4a6:	e0f2      	b.n	800c68e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4ae:	d104      	bne.n	800c4ba <f_write+0x10e>
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	755a      	strb	r2, [r3, #21]
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	e0e9      	b.n	800c68e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4be:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	689b      	ldr	r3, [r3, #8]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d102      	bne.n	800c4ce <f_write+0x122>
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4cc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	7d1b      	ldrb	r3, [r3, #20]
 800c4d2:	b25b      	sxtb	r3, r3
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	da18      	bge.n	800c50a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	7858      	ldrb	r0, [r3, #1]
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	6a1a      	ldr	r2, [r3, #32]
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	f7fe f87e 	bl	800a5e8 <disk_write>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d004      	beq.n	800c4fc <f_write+0x150>
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	755a      	strb	r2, [r3, #21]
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	e0c8      	b.n	800c68e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	7d1b      	ldrb	r3, [r3, #20]
 800c500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c504:	b2da      	uxtb	r2, r3
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c50a:	693a      	ldr	r2, [r7, #16]
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	69db      	ldr	r3, [r3, #28]
 800c510:	4619      	mov	r1, r3
 800c512:	4610      	mov	r0, r2
 800c514:	f7fe fbf2 	bl	800acfc <clust2sect>
 800c518:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d104      	bne.n	800c52a <f_write+0x17e>
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	2202      	movs	r2, #2
 800c524:	755a      	strb	r2, [r3, #21]
 800c526:	2302      	movs	r3, #2
 800c528:	e0b1      	b.n	800c68e <f_write+0x2e2>
			sect += csect;
 800c52a:	697a      	ldr	r2, [r7, #20]
 800c52c:	69bb      	ldr	r3, [r7, #24]
 800c52e:	4413      	add	r3, r2
 800c530:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	0a5b      	lsrs	r3, r3, #9
 800c536:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c538:	6a3b      	ldr	r3, [r7, #32]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d03c      	beq.n	800c5b8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c53e:	69ba      	ldr	r2, [r7, #24]
 800c540:	6a3b      	ldr	r3, [r7, #32]
 800c542:	4413      	add	r3, r2
 800c544:	693a      	ldr	r2, [r7, #16]
 800c546:	8952      	ldrh	r2, [r2, #10]
 800c548:	4293      	cmp	r3, r2
 800c54a:	d905      	bls.n	800c558 <f_write+0x1ac>
					cc = fs->csize - csect;
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	895b      	ldrh	r3, [r3, #10]
 800c550:	461a      	mov	r2, r3
 800c552:	69bb      	ldr	r3, [r7, #24]
 800c554:	1ad3      	subs	r3, r2, r3
 800c556:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	7858      	ldrb	r0, [r3, #1]
 800c55c:	6a3b      	ldr	r3, [r7, #32]
 800c55e:	697a      	ldr	r2, [r7, #20]
 800c560:	69f9      	ldr	r1, [r7, #28]
 800c562:	f7fe f841 	bl	800a5e8 <disk_write>
 800c566:	4603      	mov	r3, r0
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d004      	beq.n	800c576 <f_write+0x1ca>
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	2201      	movs	r2, #1
 800c570:	755a      	strb	r2, [r3, #21]
 800c572:	2301      	movs	r3, #1
 800c574:	e08b      	b.n	800c68e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	6a1a      	ldr	r2, [r3, #32]
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	1ad3      	subs	r3, r2, r3
 800c57e:	6a3a      	ldr	r2, [r7, #32]
 800c580:	429a      	cmp	r2, r3
 800c582:	d915      	bls.n	800c5b0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	6a1a      	ldr	r2, [r3, #32]
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	1ad3      	subs	r3, r2, r3
 800c592:	025b      	lsls	r3, r3, #9
 800c594:	69fa      	ldr	r2, [r7, #28]
 800c596:	4413      	add	r3, r2
 800c598:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c59c:	4619      	mov	r1, r3
 800c59e:	f7fe f8e3 	bl	800a768 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	7d1b      	ldrb	r3, [r3, #20]
 800c5a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5aa:	b2da      	uxtb	r2, r3
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c5b0:	6a3b      	ldr	r3, [r7, #32]
 800c5b2:	025b      	lsls	r3, r3, #9
 800c5b4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c5b6:	e03f      	b.n	800c638 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	6a1b      	ldr	r3, [r3, #32]
 800c5bc:	697a      	ldr	r2, [r7, #20]
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d016      	beq.n	800c5f0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	699a      	ldr	r2, [r3, #24]
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d210      	bcs.n	800c5f0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	7858      	ldrb	r0, [r3, #1]
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c5d8:	2301      	movs	r3, #1
 800c5da:	697a      	ldr	r2, [r7, #20]
 800c5dc:	f7fd ffe4 	bl	800a5a8 <disk_read>
 800c5e0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d004      	beq.n	800c5f0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	2201      	movs	r2, #1
 800c5ea:	755a      	strb	r2, [r3, #21]
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	e04e      	b.n	800c68e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	697a      	ldr	r2, [r7, #20]
 800c5f4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	699b      	ldr	r3, [r3, #24]
 800c5fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5fe:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c602:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	429a      	cmp	r2, r3
 800c60a:	d901      	bls.n	800c610 <f_write+0x264>
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	699b      	ldr	r3, [r3, #24]
 800c61a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c61e:	4413      	add	r3, r2
 800c620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c622:	69f9      	ldr	r1, [r7, #28]
 800c624:	4618      	mov	r0, r3
 800c626:	f7fe f89f 	bl	800a768 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	7d1b      	ldrb	r3, [r3, #20]
 800c62e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c632:	b2da      	uxtb	r2, r3
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c638:	69fa      	ldr	r2, [r7, #28]
 800c63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63c:	4413      	add	r3, r2
 800c63e:	61fb      	str	r3, [r7, #28]
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	699a      	ldr	r2, [r3, #24]
 800c644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c646:	441a      	add	r2, r3
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	619a      	str	r2, [r3, #24]
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	68da      	ldr	r2, [r3, #12]
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	699b      	ldr	r3, [r3, #24]
 800c654:	429a      	cmp	r2, r3
 800c656:	bf38      	it	cc
 800c658:	461a      	movcc	r2, r3
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	60da      	str	r2, [r3, #12]
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	681a      	ldr	r2, [r3, #0]
 800c662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c664:	441a      	add	r2, r3
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	601a      	str	r2, [r3, #0]
 800c66a:	687a      	ldr	r2, [r7, #4]
 800c66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66e:	1ad3      	subs	r3, r2, r3
 800c670:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2b00      	cmp	r3, #0
 800c676:	f47f aed4 	bne.w	800c422 <f_write+0x76>
 800c67a:	e000      	b.n	800c67e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c67c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	7d1b      	ldrb	r3, [r3, #20]
 800c682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c686:	b2da      	uxtb	r2, r3
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c68c:	2300      	movs	r3, #0
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3730      	adds	r7, #48	; 0x30
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}

0800c696 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c696:	b580      	push	{r7, lr}
 800c698:	b086      	sub	sp, #24
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f107 0208 	add.w	r2, r7, #8
 800c6a4:	4611      	mov	r1, r2
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7ff fc46 	bl	800bf38 <validate>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c6b0:	7dfb      	ldrb	r3, [r7, #23]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d168      	bne.n	800c788 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	7d1b      	ldrb	r3, [r3, #20]
 800c6ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d062      	beq.n	800c788 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	7d1b      	ldrb	r3, [r3, #20]
 800c6c6:	b25b      	sxtb	r3, r3
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	da15      	bge.n	800c6f8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	7858      	ldrb	r0, [r3, #1]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6a1a      	ldr	r2, [r3, #32]
 800c6da:	2301      	movs	r3, #1
 800c6dc:	f7fd ff84 	bl	800a5e8 <disk_write>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d001      	beq.n	800c6ea <f_sync+0x54>
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	e04f      	b.n	800c78a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	7d1b      	ldrb	r3, [r3, #20]
 800c6ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6f2:	b2da      	uxtb	r2, r3
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c6f8:	f7fd fd50 	bl	800a19c <get_fattime>
 800c6fc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c6fe:	68ba      	ldr	r2, [r7, #8]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c704:	4619      	mov	r1, r3
 800c706:	4610      	mov	r0, r2
 800c708:	f7fe fa5c 	bl	800abc4 <move_window>
 800c70c:	4603      	mov	r3, r0
 800c70e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c710:	7dfb      	ldrb	r3, [r7, #23]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d138      	bne.n	800c788 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c71a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	330b      	adds	r3, #11
 800c720:	781a      	ldrb	r2, [r3, #0]
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	330b      	adds	r3, #11
 800c726:	f042 0220 	orr.w	r2, r2, #32
 800c72a:	b2d2      	uxtb	r2, r2
 800c72c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6818      	ldr	r0, [r3, #0]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	689b      	ldr	r3, [r3, #8]
 800c736:	461a      	mov	r2, r3
 800c738:	68f9      	ldr	r1, [r7, #12]
 800c73a:	f7fe ff69 	bl	800b610 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	f103 021c 	add.w	r2, r3, #28
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	68db      	ldr	r3, [r3, #12]
 800c748:	4619      	mov	r1, r3
 800c74a:	4610      	mov	r0, r2
 800c74c:	f7fd ffe0 	bl	800a710 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	3316      	adds	r3, #22
 800c754:	6939      	ldr	r1, [r7, #16]
 800c756:	4618      	mov	r0, r3
 800c758:	f7fd ffda 	bl	800a710 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	3312      	adds	r3, #18
 800c760:	2100      	movs	r1, #0
 800c762:	4618      	mov	r0, r3
 800c764:	f7fd ffb9 	bl	800a6da <st_word>
					fs->wflag = 1;
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	2201      	movs	r2, #1
 800c76c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	4618      	mov	r0, r3
 800c772:	f7fe fa55 	bl	800ac20 <sync_fs>
 800c776:	4603      	mov	r3, r0
 800c778:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	7d1b      	ldrb	r3, [r3, #20]
 800c77e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c782:	b2da      	uxtb	r2, r3
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c788:	7dfb      	ldrb	r3, [r7, #23]
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	3718      	adds	r7, #24
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}

0800c792 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c792:	b580      	push	{r7, lr}
 800c794:	b084      	sub	sp, #16
 800c796:	af00      	add	r7, sp, #0
 800c798:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f7ff ff7b 	bl	800c696 <f_sync>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c7a4:	7bfb      	ldrb	r3, [r7, #15]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d118      	bne.n	800c7dc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f107 0208 	add.w	r2, r7, #8
 800c7b0:	4611      	mov	r1, r2
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7ff fbc0 	bl	800bf38 <validate>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c7bc:	7bfb      	ldrb	r3, [r7, #15]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d10c      	bne.n	800c7dc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	691b      	ldr	r3, [r3, #16]
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f7fe f958 	bl	800aa7c <dec_lock>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c7d0:	7bfb      	ldrb	r3, [r7, #15]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d102      	bne.n	800c7dc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c7dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3710      	adds	r7, #16
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}
	...

0800c7e8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b087      	sub	sp, #28
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	60f8      	str	r0, [r7, #12]
 800c7f0:	60b9      	str	r1, [r7, #8]
 800c7f2:	4613      	mov	r3, r2
 800c7f4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c7fe:	4b1f      	ldr	r3, [pc, #124]	; (800c87c <FATFS_LinkDriverEx+0x94>)
 800c800:	7a5b      	ldrb	r3, [r3, #9]
 800c802:	b2db      	uxtb	r3, r3
 800c804:	2b00      	cmp	r3, #0
 800c806:	d131      	bne.n	800c86c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c808:	4b1c      	ldr	r3, [pc, #112]	; (800c87c <FATFS_LinkDriverEx+0x94>)
 800c80a:	7a5b      	ldrb	r3, [r3, #9]
 800c80c:	b2db      	uxtb	r3, r3
 800c80e:	461a      	mov	r2, r3
 800c810:	4b1a      	ldr	r3, [pc, #104]	; (800c87c <FATFS_LinkDriverEx+0x94>)
 800c812:	2100      	movs	r1, #0
 800c814:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c816:	4b19      	ldr	r3, [pc, #100]	; (800c87c <FATFS_LinkDriverEx+0x94>)
 800c818:	7a5b      	ldrb	r3, [r3, #9]
 800c81a:	b2db      	uxtb	r3, r3
 800c81c:	4a17      	ldr	r2, [pc, #92]	; (800c87c <FATFS_LinkDriverEx+0x94>)
 800c81e:	009b      	lsls	r3, r3, #2
 800c820:	4413      	add	r3, r2
 800c822:	68fa      	ldr	r2, [r7, #12]
 800c824:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c826:	4b15      	ldr	r3, [pc, #84]	; (800c87c <FATFS_LinkDriverEx+0x94>)
 800c828:	7a5b      	ldrb	r3, [r3, #9]
 800c82a:	b2db      	uxtb	r3, r3
 800c82c:	461a      	mov	r2, r3
 800c82e:	4b13      	ldr	r3, [pc, #76]	; (800c87c <FATFS_LinkDriverEx+0x94>)
 800c830:	4413      	add	r3, r2
 800c832:	79fa      	ldrb	r2, [r7, #7]
 800c834:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c836:	4b11      	ldr	r3, [pc, #68]	; (800c87c <FATFS_LinkDriverEx+0x94>)
 800c838:	7a5b      	ldrb	r3, [r3, #9]
 800c83a:	b2db      	uxtb	r3, r3
 800c83c:	1c5a      	adds	r2, r3, #1
 800c83e:	b2d1      	uxtb	r1, r2
 800c840:	4a0e      	ldr	r2, [pc, #56]	; (800c87c <FATFS_LinkDriverEx+0x94>)
 800c842:	7251      	strb	r1, [r2, #9]
 800c844:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c846:	7dbb      	ldrb	r3, [r7, #22]
 800c848:	3330      	adds	r3, #48	; 0x30
 800c84a:	b2da      	uxtb	r2, r3
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	3301      	adds	r3, #1
 800c854:	223a      	movs	r2, #58	; 0x3a
 800c856:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	3302      	adds	r3, #2
 800c85c:	222f      	movs	r2, #47	; 0x2f
 800c85e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	3303      	adds	r3, #3
 800c864:	2200      	movs	r2, #0
 800c866:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c868:	2300      	movs	r3, #0
 800c86a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c86c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c86e:	4618      	mov	r0, r3
 800c870:	371c      	adds	r7, #28
 800c872:	46bd      	mov	sp, r7
 800c874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c878:	4770      	bx	lr
 800c87a:	bf00      	nop
 800c87c:	20000ed0 	.word	0x20000ed0

0800c880 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b082      	sub	sp, #8
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c88a:	2200      	movs	r2, #0
 800c88c:	6839      	ldr	r1, [r7, #0]
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f7ff ffaa 	bl	800c7e8 <FATFS_LinkDriverEx>
 800c894:	4603      	mov	r3, r0
}
 800c896:	4618      	mov	r0, r3
 800c898:	3708      	adds	r7, #8
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}
	...

0800c8a0 <__errno>:
 800c8a0:	4b01      	ldr	r3, [pc, #4]	; (800c8a8 <__errno+0x8>)
 800c8a2:	6818      	ldr	r0, [r3, #0]
 800c8a4:	4770      	bx	lr
 800c8a6:	bf00      	nop
 800c8a8:	20000118 	.word	0x20000118

0800c8ac <__libc_init_array>:
 800c8ac:	b570      	push	{r4, r5, r6, lr}
 800c8ae:	4d0d      	ldr	r5, [pc, #52]	; (800c8e4 <__libc_init_array+0x38>)
 800c8b0:	4c0d      	ldr	r4, [pc, #52]	; (800c8e8 <__libc_init_array+0x3c>)
 800c8b2:	1b64      	subs	r4, r4, r5
 800c8b4:	10a4      	asrs	r4, r4, #2
 800c8b6:	2600      	movs	r6, #0
 800c8b8:	42a6      	cmp	r6, r4
 800c8ba:	d109      	bne.n	800c8d0 <__libc_init_array+0x24>
 800c8bc:	4d0b      	ldr	r5, [pc, #44]	; (800c8ec <__libc_init_array+0x40>)
 800c8be:	4c0c      	ldr	r4, [pc, #48]	; (800c8f0 <__libc_init_array+0x44>)
 800c8c0:	f002 ffc4 	bl	800f84c <_init>
 800c8c4:	1b64      	subs	r4, r4, r5
 800c8c6:	10a4      	asrs	r4, r4, #2
 800c8c8:	2600      	movs	r6, #0
 800c8ca:	42a6      	cmp	r6, r4
 800c8cc:	d105      	bne.n	800c8da <__libc_init_array+0x2e>
 800c8ce:	bd70      	pop	{r4, r5, r6, pc}
 800c8d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8d4:	4798      	blx	r3
 800c8d6:	3601      	adds	r6, #1
 800c8d8:	e7ee      	b.n	800c8b8 <__libc_init_array+0xc>
 800c8da:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8de:	4798      	blx	r3
 800c8e0:	3601      	adds	r6, #1
 800c8e2:	e7f2      	b.n	800c8ca <__libc_init_array+0x1e>
 800c8e4:	080101b4 	.word	0x080101b4
 800c8e8:	080101b4 	.word	0x080101b4
 800c8ec:	080101b4 	.word	0x080101b4
 800c8f0:	080101b8 	.word	0x080101b8

0800c8f4 <memcpy>:
 800c8f4:	440a      	add	r2, r1
 800c8f6:	4291      	cmp	r1, r2
 800c8f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c8fc:	d100      	bne.n	800c900 <memcpy+0xc>
 800c8fe:	4770      	bx	lr
 800c900:	b510      	push	{r4, lr}
 800c902:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c906:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c90a:	4291      	cmp	r1, r2
 800c90c:	d1f9      	bne.n	800c902 <memcpy+0xe>
 800c90e:	bd10      	pop	{r4, pc}

0800c910 <memset>:
 800c910:	4402      	add	r2, r0
 800c912:	4603      	mov	r3, r0
 800c914:	4293      	cmp	r3, r2
 800c916:	d100      	bne.n	800c91a <memset+0xa>
 800c918:	4770      	bx	lr
 800c91a:	f803 1b01 	strb.w	r1, [r3], #1
 800c91e:	e7f9      	b.n	800c914 <memset+0x4>

0800c920 <__cvt>:
 800c920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c924:	ec55 4b10 	vmov	r4, r5, d0
 800c928:	2d00      	cmp	r5, #0
 800c92a:	460e      	mov	r6, r1
 800c92c:	4619      	mov	r1, r3
 800c92e:	462b      	mov	r3, r5
 800c930:	bfbb      	ittet	lt
 800c932:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c936:	461d      	movlt	r5, r3
 800c938:	2300      	movge	r3, #0
 800c93a:	232d      	movlt	r3, #45	; 0x2d
 800c93c:	700b      	strb	r3, [r1, #0]
 800c93e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c940:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c944:	4691      	mov	r9, r2
 800c946:	f023 0820 	bic.w	r8, r3, #32
 800c94a:	bfbc      	itt	lt
 800c94c:	4622      	movlt	r2, r4
 800c94e:	4614      	movlt	r4, r2
 800c950:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c954:	d005      	beq.n	800c962 <__cvt+0x42>
 800c956:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c95a:	d100      	bne.n	800c95e <__cvt+0x3e>
 800c95c:	3601      	adds	r6, #1
 800c95e:	2102      	movs	r1, #2
 800c960:	e000      	b.n	800c964 <__cvt+0x44>
 800c962:	2103      	movs	r1, #3
 800c964:	ab03      	add	r3, sp, #12
 800c966:	9301      	str	r3, [sp, #4]
 800c968:	ab02      	add	r3, sp, #8
 800c96a:	9300      	str	r3, [sp, #0]
 800c96c:	ec45 4b10 	vmov	d0, r4, r5
 800c970:	4653      	mov	r3, sl
 800c972:	4632      	mov	r2, r6
 800c974:	f000 fe6c 	bl	800d650 <_dtoa_r>
 800c978:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c97c:	4607      	mov	r7, r0
 800c97e:	d102      	bne.n	800c986 <__cvt+0x66>
 800c980:	f019 0f01 	tst.w	r9, #1
 800c984:	d022      	beq.n	800c9cc <__cvt+0xac>
 800c986:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c98a:	eb07 0906 	add.w	r9, r7, r6
 800c98e:	d110      	bne.n	800c9b2 <__cvt+0x92>
 800c990:	783b      	ldrb	r3, [r7, #0]
 800c992:	2b30      	cmp	r3, #48	; 0x30
 800c994:	d10a      	bne.n	800c9ac <__cvt+0x8c>
 800c996:	2200      	movs	r2, #0
 800c998:	2300      	movs	r3, #0
 800c99a:	4620      	mov	r0, r4
 800c99c:	4629      	mov	r1, r5
 800c99e:	f7f4 f893 	bl	8000ac8 <__aeabi_dcmpeq>
 800c9a2:	b918      	cbnz	r0, 800c9ac <__cvt+0x8c>
 800c9a4:	f1c6 0601 	rsb	r6, r6, #1
 800c9a8:	f8ca 6000 	str.w	r6, [sl]
 800c9ac:	f8da 3000 	ldr.w	r3, [sl]
 800c9b0:	4499      	add	r9, r3
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	4620      	mov	r0, r4
 800c9b8:	4629      	mov	r1, r5
 800c9ba:	f7f4 f885 	bl	8000ac8 <__aeabi_dcmpeq>
 800c9be:	b108      	cbz	r0, 800c9c4 <__cvt+0xa4>
 800c9c0:	f8cd 900c 	str.w	r9, [sp, #12]
 800c9c4:	2230      	movs	r2, #48	; 0x30
 800c9c6:	9b03      	ldr	r3, [sp, #12]
 800c9c8:	454b      	cmp	r3, r9
 800c9ca:	d307      	bcc.n	800c9dc <__cvt+0xbc>
 800c9cc:	9b03      	ldr	r3, [sp, #12]
 800c9ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c9d0:	1bdb      	subs	r3, r3, r7
 800c9d2:	4638      	mov	r0, r7
 800c9d4:	6013      	str	r3, [r2, #0]
 800c9d6:	b004      	add	sp, #16
 800c9d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9dc:	1c59      	adds	r1, r3, #1
 800c9de:	9103      	str	r1, [sp, #12]
 800c9e0:	701a      	strb	r2, [r3, #0]
 800c9e2:	e7f0      	b.n	800c9c6 <__cvt+0xa6>

0800c9e4 <__exponent>:
 800c9e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	2900      	cmp	r1, #0
 800c9ea:	bfb8      	it	lt
 800c9ec:	4249      	neglt	r1, r1
 800c9ee:	f803 2b02 	strb.w	r2, [r3], #2
 800c9f2:	bfb4      	ite	lt
 800c9f4:	222d      	movlt	r2, #45	; 0x2d
 800c9f6:	222b      	movge	r2, #43	; 0x2b
 800c9f8:	2909      	cmp	r1, #9
 800c9fa:	7042      	strb	r2, [r0, #1]
 800c9fc:	dd2a      	ble.n	800ca54 <__exponent+0x70>
 800c9fe:	f10d 0407 	add.w	r4, sp, #7
 800ca02:	46a4      	mov	ip, r4
 800ca04:	270a      	movs	r7, #10
 800ca06:	46a6      	mov	lr, r4
 800ca08:	460a      	mov	r2, r1
 800ca0a:	fb91 f6f7 	sdiv	r6, r1, r7
 800ca0e:	fb07 1516 	mls	r5, r7, r6, r1
 800ca12:	3530      	adds	r5, #48	; 0x30
 800ca14:	2a63      	cmp	r2, #99	; 0x63
 800ca16:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800ca1a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ca1e:	4631      	mov	r1, r6
 800ca20:	dcf1      	bgt.n	800ca06 <__exponent+0x22>
 800ca22:	3130      	adds	r1, #48	; 0x30
 800ca24:	f1ae 0502 	sub.w	r5, lr, #2
 800ca28:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ca2c:	1c44      	adds	r4, r0, #1
 800ca2e:	4629      	mov	r1, r5
 800ca30:	4561      	cmp	r1, ip
 800ca32:	d30a      	bcc.n	800ca4a <__exponent+0x66>
 800ca34:	f10d 0209 	add.w	r2, sp, #9
 800ca38:	eba2 020e 	sub.w	r2, r2, lr
 800ca3c:	4565      	cmp	r5, ip
 800ca3e:	bf88      	it	hi
 800ca40:	2200      	movhi	r2, #0
 800ca42:	4413      	add	r3, r2
 800ca44:	1a18      	subs	r0, r3, r0
 800ca46:	b003      	add	sp, #12
 800ca48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca4e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ca52:	e7ed      	b.n	800ca30 <__exponent+0x4c>
 800ca54:	2330      	movs	r3, #48	; 0x30
 800ca56:	3130      	adds	r1, #48	; 0x30
 800ca58:	7083      	strb	r3, [r0, #2]
 800ca5a:	70c1      	strb	r1, [r0, #3]
 800ca5c:	1d03      	adds	r3, r0, #4
 800ca5e:	e7f1      	b.n	800ca44 <__exponent+0x60>

0800ca60 <_printf_float>:
 800ca60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca64:	ed2d 8b02 	vpush	{d8}
 800ca68:	b08d      	sub	sp, #52	; 0x34
 800ca6a:	460c      	mov	r4, r1
 800ca6c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ca70:	4616      	mov	r6, r2
 800ca72:	461f      	mov	r7, r3
 800ca74:	4605      	mov	r5, r0
 800ca76:	f001 fd91 	bl	800e59c <_localeconv_r>
 800ca7a:	f8d0 a000 	ldr.w	sl, [r0]
 800ca7e:	4650      	mov	r0, sl
 800ca80:	f7f3 fba6 	bl	80001d0 <strlen>
 800ca84:	2300      	movs	r3, #0
 800ca86:	930a      	str	r3, [sp, #40]	; 0x28
 800ca88:	6823      	ldr	r3, [r4, #0]
 800ca8a:	9305      	str	r3, [sp, #20]
 800ca8c:	f8d8 3000 	ldr.w	r3, [r8]
 800ca90:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ca94:	3307      	adds	r3, #7
 800ca96:	f023 0307 	bic.w	r3, r3, #7
 800ca9a:	f103 0208 	add.w	r2, r3, #8
 800ca9e:	f8c8 2000 	str.w	r2, [r8]
 800caa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800caaa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800caae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cab2:	9307      	str	r3, [sp, #28]
 800cab4:	f8cd 8018 	str.w	r8, [sp, #24]
 800cab8:	ee08 0a10 	vmov	s16, r0
 800cabc:	4b9f      	ldr	r3, [pc, #636]	; (800cd3c <_printf_float+0x2dc>)
 800cabe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cac2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cac6:	f7f4 f831 	bl	8000b2c <__aeabi_dcmpun>
 800caca:	bb88      	cbnz	r0, 800cb30 <_printf_float+0xd0>
 800cacc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cad0:	4b9a      	ldr	r3, [pc, #616]	; (800cd3c <_printf_float+0x2dc>)
 800cad2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cad6:	f7f4 f80b 	bl	8000af0 <__aeabi_dcmple>
 800cada:	bb48      	cbnz	r0, 800cb30 <_printf_float+0xd0>
 800cadc:	2200      	movs	r2, #0
 800cade:	2300      	movs	r3, #0
 800cae0:	4640      	mov	r0, r8
 800cae2:	4649      	mov	r1, r9
 800cae4:	f7f3 fffa 	bl	8000adc <__aeabi_dcmplt>
 800cae8:	b110      	cbz	r0, 800caf0 <_printf_float+0x90>
 800caea:	232d      	movs	r3, #45	; 0x2d
 800caec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800caf0:	4b93      	ldr	r3, [pc, #588]	; (800cd40 <_printf_float+0x2e0>)
 800caf2:	4894      	ldr	r0, [pc, #592]	; (800cd44 <_printf_float+0x2e4>)
 800caf4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800caf8:	bf94      	ite	ls
 800cafa:	4698      	movls	r8, r3
 800cafc:	4680      	movhi	r8, r0
 800cafe:	2303      	movs	r3, #3
 800cb00:	6123      	str	r3, [r4, #16]
 800cb02:	9b05      	ldr	r3, [sp, #20]
 800cb04:	f023 0204 	bic.w	r2, r3, #4
 800cb08:	6022      	str	r2, [r4, #0]
 800cb0a:	f04f 0900 	mov.w	r9, #0
 800cb0e:	9700      	str	r7, [sp, #0]
 800cb10:	4633      	mov	r3, r6
 800cb12:	aa0b      	add	r2, sp, #44	; 0x2c
 800cb14:	4621      	mov	r1, r4
 800cb16:	4628      	mov	r0, r5
 800cb18:	f000 f9d8 	bl	800cecc <_printf_common>
 800cb1c:	3001      	adds	r0, #1
 800cb1e:	f040 8090 	bne.w	800cc42 <_printf_float+0x1e2>
 800cb22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb26:	b00d      	add	sp, #52	; 0x34
 800cb28:	ecbd 8b02 	vpop	{d8}
 800cb2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb30:	4642      	mov	r2, r8
 800cb32:	464b      	mov	r3, r9
 800cb34:	4640      	mov	r0, r8
 800cb36:	4649      	mov	r1, r9
 800cb38:	f7f3 fff8 	bl	8000b2c <__aeabi_dcmpun>
 800cb3c:	b140      	cbz	r0, 800cb50 <_printf_float+0xf0>
 800cb3e:	464b      	mov	r3, r9
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	bfbc      	itt	lt
 800cb44:	232d      	movlt	r3, #45	; 0x2d
 800cb46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cb4a:	487f      	ldr	r0, [pc, #508]	; (800cd48 <_printf_float+0x2e8>)
 800cb4c:	4b7f      	ldr	r3, [pc, #508]	; (800cd4c <_printf_float+0x2ec>)
 800cb4e:	e7d1      	b.n	800caf4 <_printf_float+0x94>
 800cb50:	6863      	ldr	r3, [r4, #4]
 800cb52:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cb56:	9206      	str	r2, [sp, #24]
 800cb58:	1c5a      	adds	r2, r3, #1
 800cb5a:	d13f      	bne.n	800cbdc <_printf_float+0x17c>
 800cb5c:	2306      	movs	r3, #6
 800cb5e:	6063      	str	r3, [r4, #4]
 800cb60:	9b05      	ldr	r3, [sp, #20]
 800cb62:	6861      	ldr	r1, [r4, #4]
 800cb64:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cb68:	2300      	movs	r3, #0
 800cb6a:	9303      	str	r3, [sp, #12]
 800cb6c:	ab0a      	add	r3, sp, #40	; 0x28
 800cb6e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cb72:	ab09      	add	r3, sp, #36	; 0x24
 800cb74:	ec49 8b10 	vmov	d0, r8, r9
 800cb78:	9300      	str	r3, [sp, #0]
 800cb7a:	6022      	str	r2, [r4, #0]
 800cb7c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cb80:	4628      	mov	r0, r5
 800cb82:	f7ff fecd 	bl	800c920 <__cvt>
 800cb86:	9b06      	ldr	r3, [sp, #24]
 800cb88:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb8a:	2b47      	cmp	r3, #71	; 0x47
 800cb8c:	4680      	mov	r8, r0
 800cb8e:	d108      	bne.n	800cba2 <_printf_float+0x142>
 800cb90:	1cc8      	adds	r0, r1, #3
 800cb92:	db02      	blt.n	800cb9a <_printf_float+0x13a>
 800cb94:	6863      	ldr	r3, [r4, #4]
 800cb96:	4299      	cmp	r1, r3
 800cb98:	dd41      	ble.n	800cc1e <_printf_float+0x1be>
 800cb9a:	f1ab 0b02 	sub.w	fp, fp, #2
 800cb9e:	fa5f fb8b 	uxtb.w	fp, fp
 800cba2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cba6:	d820      	bhi.n	800cbea <_printf_float+0x18a>
 800cba8:	3901      	subs	r1, #1
 800cbaa:	465a      	mov	r2, fp
 800cbac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cbb0:	9109      	str	r1, [sp, #36]	; 0x24
 800cbb2:	f7ff ff17 	bl	800c9e4 <__exponent>
 800cbb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cbb8:	1813      	adds	r3, r2, r0
 800cbba:	2a01      	cmp	r2, #1
 800cbbc:	4681      	mov	r9, r0
 800cbbe:	6123      	str	r3, [r4, #16]
 800cbc0:	dc02      	bgt.n	800cbc8 <_printf_float+0x168>
 800cbc2:	6822      	ldr	r2, [r4, #0]
 800cbc4:	07d2      	lsls	r2, r2, #31
 800cbc6:	d501      	bpl.n	800cbcc <_printf_float+0x16c>
 800cbc8:	3301      	adds	r3, #1
 800cbca:	6123      	str	r3, [r4, #16]
 800cbcc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d09c      	beq.n	800cb0e <_printf_float+0xae>
 800cbd4:	232d      	movs	r3, #45	; 0x2d
 800cbd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbda:	e798      	b.n	800cb0e <_printf_float+0xae>
 800cbdc:	9a06      	ldr	r2, [sp, #24]
 800cbde:	2a47      	cmp	r2, #71	; 0x47
 800cbe0:	d1be      	bne.n	800cb60 <_printf_float+0x100>
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d1bc      	bne.n	800cb60 <_printf_float+0x100>
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	e7b9      	b.n	800cb5e <_printf_float+0xfe>
 800cbea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cbee:	d118      	bne.n	800cc22 <_printf_float+0x1c2>
 800cbf0:	2900      	cmp	r1, #0
 800cbf2:	6863      	ldr	r3, [r4, #4]
 800cbf4:	dd0b      	ble.n	800cc0e <_printf_float+0x1ae>
 800cbf6:	6121      	str	r1, [r4, #16]
 800cbf8:	b913      	cbnz	r3, 800cc00 <_printf_float+0x1a0>
 800cbfa:	6822      	ldr	r2, [r4, #0]
 800cbfc:	07d0      	lsls	r0, r2, #31
 800cbfe:	d502      	bpl.n	800cc06 <_printf_float+0x1a6>
 800cc00:	3301      	adds	r3, #1
 800cc02:	440b      	add	r3, r1
 800cc04:	6123      	str	r3, [r4, #16]
 800cc06:	65a1      	str	r1, [r4, #88]	; 0x58
 800cc08:	f04f 0900 	mov.w	r9, #0
 800cc0c:	e7de      	b.n	800cbcc <_printf_float+0x16c>
 800cc0e:	b913      	cbnz	r3, 800cc16 <_printf_float+0x1b6>
 800cc10:	6822      	ldr	r2, [r4, #0]
 800cc12:	07d2      	lsls	r2, r2, #31
 800cc14:	d501      	bpl.n	800cc1a <_printf_float+0x1ba>
 800cc16:	3302      	adds	r3, #2
 800cc18:	e7f4      	b.n	800cc04 <_printf_float+0x1a4>
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	e7f2      	b.n	800cc04 <_printf_float+0x1a4>
 800cc1e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cc22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc24:	4299      	cmp	r1, r3
 800cc26:	db05      	blt.n	800cc34 <_printf_float+0x1d4>
 800cc28:	6823      	ldr	r3, [r4, #0]
 800cc2a:	6121      	str	r1, [r4, #16]
 800cc2c:	07d8      	lsls	r0, r3, #31
 800cc2e:	d5ea      	bpl.n	800cc06 <_printf_float+0x1a6>
 800cc30:	1c4b      	adds	r3, r1, #1
 800cc32:	e7e7      	b.n	800cc04 <_printf_float+0x1a4>
 800cc34:	2900      	cmp	r1, #0
 800cc36:	bfd4      	ite	le
 800cc38:	f1c1 0202 	rsble	r2, r1, #2
 800cc3c:	2201      	movgt	r2, #1
 800cc3e:	4413      	add	r3, r2
 800cc40:	e7e0      	b.n	800cc04 <_printf_float+0x1a4>
 800cc42:	6823      	ldr	r3, [r4, #0]
 800cc44:	055a      	lsls	r2, r3, #21
 800cc46:	d407      	bmi.n	800cc58 <_printf_float+0x1f8>
 800cc48:	6923      	ldr	r3, [r4, #16]
 800cc4a:	4642      	mov	r2, r8
 800cc4c:	4631      	mov	r1, r6
 800cc4e:	4628      	mov	r0, r5
 800cc50:	47b8      	blx	r7
 800cc52:	3001      	adds	r0, #1
 800cc54:	d12c      	bne.n	800ccb0 <_printf_float+0x250>
 800cc56:	e764      	b.n	800cb22 <_printf_float+0xc2>
 800cc58:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cc5c:	f240 80e0 	bls.w	800ce20 <_printf_float+0x3c0>
 800cc60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cc64:	2200      	movs	r2, #0
 800cc66:	2300      	movs	r3, #0
 800cc68:	f7f3 ff2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc6c:	2800      	cmp	r0, #0
 800cc6e:	d034      	beq.n	800ccda <_printf_float+0x27a>
 800cc70:	4a37      	ldr	r2, [pc, #220]	; (800cd50 <_printf_float+0x2f0>)
 800cc72:	2301      	movs	r3, #1
 800cc74:	4631      	mov	r1, r6
 800cc76:	4628      	mov	r0, r5
 800cc78:	47b8      	blx	r7
 800cc7a:	3001      	adds	r0, #1
 800cc7c:	f43f af51 	beq.w	800cb22 <_printf_float+0xc2>
 800cc80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc84:	429a      	cmp	r2, r3
 800cc86:	db02      	blt.n	800cc8e <_printf_float+0x22e>
 800cc88:	6823      	ldr	r3, [r4, #0]
 800cc8a:	07d8      	lsls	r0, r3, #31
 800cc8c:	d510      	bpl.n	800ccb0 <_printf_float+0x250>
 800cc8e:	ee18 3a10 	vmov	r3, s16
 800cc92:	4652      	mov	r2, sl
 800cc94:	4631      	mov	r1, r6
 800cc96:	4628      	mov	r0, r5
 800cc98:	47b8      	blx	r7
 800cc9a:	3001      	adds	r0, #1
 800cc9c:	f43f af41 	beq.w	800cb22 <_printf_float+0xc2>
 800cca0:	f04f 0800 	mov.w	r8, #0
 800cca4:	f104 091a 	add.w	r9, r4, #26
 800cca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccaa:	3b01      	subs	r3, #1
 800ccac:	4543      	cmp	r3, r8
 800ccae:	dc09      	bgt.n	800ccc4 <_printf_float+0x264>
 800ccb0:	6823      	ldr	r3, [r4, #0]
 800ccb2:	079b      	lsls	r3, r3, #30
 800ccb4:	f100 8105 	bmi.w	800cec2 <_printf_float+0x462>
 800ccb8:	68e0      	ldr	r0, [r4, #12]
 800ccba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccbc:	4298      	cmp	r0, r3
 800ccbe:	bfb8      	it	lt
 800ccc0:	4618      	movlt	r0, r3
 800ccc2:	e730      	b.n	800cb26 <_printf_float+0xc6>
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	464a      	mov	r2, r9
 800ccc8:	4631      	mov	r1, r6
 800ccca:	4628      	mov	r0, r5
 800cccc:	47b8      	blx	r7
 800ccce:	3001      	adds	r0, #1
 800ccd0:	f43f af27 	beq.w	800cb22 <_printf_float+0xc2>
 800ccd4:	f108 0801 	add.w	r8, r8, #1
 800ccd8:	e7e6      	b.n	800cca8 <_printf_float+0x248>
 800ccda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	dc39      	bgt.n	800cd54 <_printf_float+0x2f4>
 800cce0:	4a1b      	ldr	r2, [pc, #108]	; (800cd50 <_printf_float+0x2f0>)
 800cce2:	2301      	movs	r3, #1
 800cce4:	4631      	mov	r1, r6
 800cce6:	4628      	mov	r0, r5
 800cce8:	47b8      	blx	r7
 800ccea:	3001      	adds	r0, #1
 800ccec:	f43f af19 	beq.w	800cb22 <_printf_float+0xc2>
 800ccf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ccf4:	4313      	orrs	r3, r2
 800ccf6:	d102      	bne.n	800ccfe <_printf_float+0x29e>
 800ccf8:	6823      	ldr	r3, [r4, #0]
 800ccfa:	07d9      	lsls	r1, r3, #31
 800ccfc:	d5d8      	bpl.n	800ccb0 <_printf_float+0x250>
 800ccfe:	ee18 3a10 	vmov	r3, s16
 800cd02:	4652      	mov	r2, sl
 800cd04:	4631      	mov	r1, r6
 800cd06:	4628      	mov	r0, r5
 800cd08:	47b8      	blx	r7
 800cd0a:	3001      	adds	r0, #1
 800cd0c:	f43f af09 	beq.w	800cb22 <_printf_float+0xc2>
 800cd10:	f04f 0900 	mov.w	r9, #0
 800cd14:	f104 0a1a 	add.w	sl, r4, #26
 800cd18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd1a:	425b      	negs	r3, r3
 800cd1c:	454b      	cmp	r3, r9
 800cd1e:	dc01      	bgt.n	800cd24 <_printf_float+0x2c4>
 800cd20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd22:	e792      	b.n	800cc4a <_printf_float+0x1ea>
 800cd24:	2301      	movs	r3, #1
 800cd26:	4652      	mov	r2, sl
 800cd28:	4631      	mov	r1, r6
 800cd2a:	4628      	mov	r0, r5
 800cd2c:	47b8      	blx	r7
 800cd2e:	3001      	adds	r0, #1
 800cd30:	f43f aef7 	beq.w	800cb22 <_printf_float+0xc2>
 800cd34:	f109 0901 	add.w	r9, r9, #1
 800cd38:	e7ee      	b.n	800cd18 <_printf_float+0x2b8>
 800cd3a:	bf00      	nop
 800cd3c:	7fefffff 	.word	0x7fefffff
 800cd40:	0800fdd4 	.word	0x0800fdd4
 800cd44:	0800fdd8 	.word	0x0800fdd8
 800cd48:	0800fde0 	.word	0x0800fde0
 800cd4c:	0800fddc 	.word	0x0800fddc
 800cd50:	0800fde4 	.word	0x0800fde4
 800cd54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd58:	429a      	cmp	r2, r3
 800cd5a:	bfa8      	it	ge
 800cd5c:	461a      	movge	r2, r3
 800cd5e:	2a00      	cmp	r2, #0
 800cd60:	4691      	mov	r9, r2
 800cd62:	dc37      	bgt.n	800cdd4 <_printf_float+0x374>
 800cd64:	f04f 0b00 	mov.w	fp, #0
 800cd68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd6c:	f104 021a 	add.w	r2, r4, #26
 800cd70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd72:	9305      	str	r3, [sp, #20]
 800cd74:	eba3 0309 	sub.w	r3, r3, r9
 800cd78:	455b      	cmp	r3, fp
 800cd7a:	dc33      	bgt.n	800cde4 <_printf_float+0x384>
 800cd7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd80:	429a      	cmp	r2, r3
 800cd82:	db3b      	blt.n	800cdfc <_printf_float+0x39c>
 800cd84:	6823      	ldr	r3, [r4, #0]
 800cd86:	07da      	lsls	r2, r3, #31
 800cd88:	d438      	bmi.n	800cdfc <_printf_float+0x39c>
 800cd8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd8c:	9a05      	ldr	r2, [sp, #20]
 800cd8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd90:	1a9a      	subs	r2, r3, r2
 800cd92:	eba3 0901 	sub.w	r9, r3, r1
 800cd96:	4591      	cmp	r9, r2
 800cd98:	bfa8      	it	ge
 800cd9a:	4691      	movge	r9, r2
 800cd9c:	f1b9 0f00 	cmp.w	r9, #0
 800cda0:	dc35      	bgt.n	800ce0e <_printf_float+0x3ae>
 800cda2:	f04f 0800 	mov.w	r8, #0
 800cda6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cdaa:	f104 0a1a 	add.w	sl, r4, #26
 800cdae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cdb2:	1a9b      	subs	r3, r3, r2
 800cdb4:	eba3 0309 	sub.w	r3, r3, r9
 800cdb8:	4543      	cmp	r3, r8
 800cdba:	f77f af79 	ble.w	800ccb0 <_printf_float+0x250>
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	4652      	mov	r2, sl
 800cdc2:	4631      	mov	r1, r6
 800cdc4:	4628      	mov	r0, r5
 800cdc6:	47b8      	blx	r7
 800cdc8:	3001      	adds	r0, #1
 800cdca:	f43f aeaa 	beq.w	800cb22 <_printf_float+0xc2>
 800cdce:	f108 0801 	add.w	r8, r8, #1
 800cdd2:	e7ec      	b.n	800cdae <_printf_float+0x34e>
 800cdd4:	4613      	mov	r3, r2
 800cdd6:	4631      	mov	r1, r6
 800cdd8:	4642      	mov	r2, r8
 800cdda:	4628      	mov	r0, r5
 800cddc:	47b8      	blx	r7
 800cdde:	3001      	adds	r0, #1
 800cde0:	d1c0      	bne.n	800cd64 <_printf_float+0x304>
 800cde2:	e69e      	b.n	800cb22 <_printf_float+0xc2>
 800cde4:	2301      	movs	r3, #1
 800cde6:	4631      	mov	r1, r6
 800cde8:	4628      	mov	r0, r5
 800cdea:	9205      	str	r2, [sp, #20]
 800cdec:	47b8      	blx	r7
 800cdee:	3001      	adds	r0, #1
 800cdf0:	f43f ae97 	beq.w	800cb22 <_printf_float+0xc2>
 800cdf4:	9a05      	ldr	r2, [sp, #20]
 800cdf6:	f10b 0b01 	add.w	fp, fp, #1
 800cdfa:	e7b9      	b.n	800cd70 <_printf_float+0x310>
 800cdfc:	ee18 3a10 	vmov	r3, s16
 800ce00:	4652      	mov	r2, sl
 800ce02:	4631      	mov	r1, r6
 800ce04:	4628      	mov	r0, r5
 800ce06:	47b8      	blx	r7
 800ce08:	3001      	adds	r0, #1
 800ce0a:	d1be      	bne.n	800cd8a <_printf_float+0x32a>
 800ce0c:	e689      	b.n	800cb22 <_printf_float+0xc2>
 800ce0e:	9a05      	ldr	r2, [sp, #20]
 800ce10:	464b      	mov	r3, r9
 800ce12:	4442      	add	r2, r8
 800ce14:	4631      	mov	r1, r6
 800ce16:	4628      	mov	r0, r5
 800ce18:	47b8      	blx	r7
 800ce1a:	3001      	adds	r0, #1
 800ce1c:	d1c1      	bne.n	800cda2 <_printf_float+0x342>
 800ce1e:	e680      	b.n	800cb22 <_printf_float+0xc2>
 800ce20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce22:	2a01      	cmp	r2, #1
 800ce24:	dc01      	bgt.n	800ce2a <_printf_float+0x3ca>
 800ce26:	07db      	lsls	r3, r3, #31
 800ce28:	d538      	bpl.n	800ce9c <_printf_float+0x43c>
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	4642      	mov	r2, r8
 800ce2e:	4631      	mov	r1, r6
 800ce30:	4628      	mov	r0, r5
 800ce32:	47b8      	blx	r7
 800ce34:	3001      	adds	r0, #1
 800ce36:	f43f ae74 	beq.w	800cb22 <_printf_float+0xc2>
 800ce3a:	ee18 3a10 	vmov	r3, s16
 800ce3e:	4652      	mov	r2, sl
 800ce40:	4631      	mov	r1, r6
 800ce42:	4628      	mov	r0, r5
 800ce44:	47b8      	blx	r7
 800ce46:	3001      	adds	r0, #1
 800ce48:	f43f ae6b 	beq.w	800cb22 <_printf_float+0xc2>
 800ce4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ce50:	2200      	movs	r2, #0
 800ce52:	2300      	movs	r3, #0
 800ce54:	f7f3 fe38 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce58:	b9d8      	cbnz	r0, 800ce92 <_printf_float+0x432>
 800ce5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce5c:	f108 0201 	add.w	r2, r8, #1
 800ce60:	3b01      	subs	r3, #1
 800ce62:	4631      	mov	r1, r6
 800ce64:	4628      	mov	r0, r5
 800ce66:	47b8      	blx	r7
 800ce68:	3001      	adds	r0, #1
 800ce6a:	d10e      	bne.n	800ce8a <_printf_float+0x42a>
 800ce6c:	e659      	b.n	800cb22 <_printf_float+0xc2>
 800ce6e:	2301      	movs	r3, #1
 800ce70:	4652      	mov	r2, sl
 800ce72:	4631      	mov	r1, r6
 800ce74:	4628      	mov	r0, r5
 800ce76:	47b8      	blx	r7
 800ce78:	3001      	adds	r0, #1
 800ce7a:	f43f ae52 	beq.w	800cb22 <_printf_float+0xc2>
 800ce7e:	f108 0801 	add.w	r8, r8, #1
 800ce82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce84:	3b01      	subs	r3, #1
 800ce86:	4543      	cmp	r3, r8
 800ce88:	dcf1      	bgt.n	800ce6e <_printf_float+0x40e>
 800ce8a:	464b      	mov	r3, r9
 800ce8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ce90:	e6dc      	b.n	800cc4c <_printf_float+0x1ec>
 800ce92:	f04f 0800 	mov.w	r8, #0
 800ce96:	f104 0a1a 	add.w	sl, r4, #26
 800ce9a:	e7f2      	b.n	800ce82 <_printf_float+0x422>
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	4642      	mov	r2, r8
 800cea0:	e7df      	b.n	800ce62 <_printf_float+0x402>
 800cea2:	2301      	movs	r3, #1
 800cea4:	464a      	mov	r2, r9
 800cea6:	4631      	mov	r1, r6
 800cea8:	4628      	mov	r0, r5
 800ceaa:	47b8      	blx	r7
 800ceac:	3001      	adds	r0, #1
 800ceae:	f43f ae38 	beq.w	800cb22 <_printf_float+0xc2>
 800ceb2:	f108 0801 	add.w	r8, r8, #1
 800ceb6:	68e3      	ldr	r3, [r4, #12]
 800ceb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ceba:	1a5b      	subs	r3, r3, r1
 800cebc:	4543      	cmp	r3, r8
 800cebe:	dcf0      	bgt.n	800cea2 <_printf_float+0x442>
 800cec0:	e6fa      	b.n	800ccb8 <_printf_float+0x258>
 800cec2:	f04f 0800 	mov.w	r8, #0
 800cec6:	f104 0919 	add.w	r9, r4, #25
 800ceca:	e7f4      	b.n	800ceb6 <_printf_float+0x456>

0800cecc <_printf_common>:
 800cecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ced0:	4616      	mov	r6, r2
 800ced2:	4699      	mov	r9, r3
 800ced4:	688a      	ldr	r2, [r1, #8]
 800ced6:	690b      	ldr	r3, [r1, #16]
 800ced8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cedc:	4293      	cmp	r3, r2
 800cede:	bfb8      	it	lt
 800cee0:	4613      	movlt	r3, r2
 800cee2:	6033      	str	r3, [r6, #0]
 800cee4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cee8:	4607      	mov	r7, r0
 800ceea:	460c      	mov	r4, r1
 800ceec:	b10a      	cbz	r2, 800cef2 <_printf_common+0x26>
 800ceee:	3301      	adds	r3, #1
 800cef0:	6033      	str	r3, [r6, #0]
 800cef2:	6823      	ldr	r3, [r4, #0]
 800cef4:	0699      	lsls	r1, r3, #26
 800cef6:	bf42      	ittt	mi
 800cef8:	6833      	ldrmi	r3, [r6, #0]
 800cefa:	3302      	addmi	r3, #2
 800cefc:	6033      	strmi	r3, [r6, #0]
 800cefe:	6825      	ldr	r5, [r4, #0]
 800cf00:	f015 0506 	ands.w	r5, r5, #6
 800cf04:	d106      	bne.n	800cf14 <_printf_common+0x48>
 800cf06:	f104 0a19 	add.w	sl, r4, #25
 800cf0a:	68e3      	ldr	r3, [r4, #12]
 800cf0c:	6832      	ldr	r2, [r6, #0]
 800cf0e:	1a9b      	subs	r3, r3, r2
 800cf10:	42ab      	cmp	r3, r5
 800cf12:	dc26      	bgt.n	800cf62 <_printf_common+0x96>
 800cf14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cf18:	1e13      	subs	r3, r2, #0
 800cf1a:	6822      	ldr	r2, [r4, #0]
 800cf1c:	bf18      	it	ne
 800cf1e:	2301      	movne	r3, #1
 800cf20:	0692      	lsls	r2, r2, #26
 800cf22:	d42b      	bmi.n	800cf7c <_printf_common+0xb0>
 800cf24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf28:	4649      	mov	r1, r9
 800cf2a:	4638      	mov	r0, r7
 800cf2c:	47c0      	blx	r8
 800cf2e:	3001      	adds	r0, #1
 800cf30:	d01e      	beq.n	800cf70 <_printf_common+0xa4>
 800cf32:	6823      	ldr	r3, [r4, #0]
 800cf34:	68e5      	ldr	r5, [r4, #12]
 800cf36:	6832      	ldr	r2, [r6, #0]
 800cf38:	f003 0306 	and.w	r3, r3, #6
 800cf3c:	2b04      	cmp	r3, #4
 800cf3e:	bf08      	it	eq
 800cf40:	1aad      	subeq	r5, r5, r2
 800cf42:	68a3      	ldr	r3, [r4, #8]
 800cf44:	6922      	ldr	r2, [r4, #16]
 800cf46:	bf0c      	ite	eq
 800cf48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf4c:	2500      	movne	r5, #0
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	bfc4      	itt	gt
 800cf52:	1a9b      	subgt	r3, r3, r2
 800cf54:	18ed      	addgt	r5, r5, r3
 800cf56:	2600      	movs	r6, #0
 800cf58:	341a      	adds	r4, #26
 800cf5a:	42b5      	cmp	r5, r6
 800cf5c:	d11a      	bne.n	800cf94 <_printf_common+0xc8>
 800cf5e:	2000      	movs	r0, #0
 800cf60:	e008      	b.n	800cf74 <_printf_common+0xa8>
 800cf62:	2301      	movs	r3, #1
 800cf64:	4652      	mov	r2, sl
 800cf66:	4649      	mov	r1, r9
 800cf68:	4638      	mov	r0, r7
 800cf6a:	47c0      	blx	r8
 800cf6c:	3001      	adds	r0, #1
 800cf6e:	d103      	bne.n	800cf78 <_printf_common+0xac>
 800cf70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf78:	3501      	adds	r5, #1
 800cf7a:	e7c6      	b.n	800cf0a <_printf_common+0x3e>
 800cf7c:	18e1      	adds	r1, r4, r3
 800cf7e:	1c5a      	adds	r2, r3, #1
 800cf80:	2030      	movs	r0, #48	; 0x30
 800cf82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cf86:	4422      	add	r2, r4
 800cf88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cf8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cf90:	3302      	adds	r3, #2
 800cf92:	e7c7      	b.n	800cf24 <_printf_common+0x58>
 800cf94:	2301      	movs	r3, #1
 800cf96:	4622      	mov	r2, r4
 800cf98:	4649      	mov	r1, r9
 800cf9a:	4638      	mov	r0, r7
 800cf9c:	47c0      	blx	r8
 800cf9e:	3001      	adds	r0, #1
 800cfa0:	d0e6      	beq.n	800cf70 <_printf_common+0xa4>
 800cfa2:	3601      	adds	r6, #1
 800cfa4:	e7d9      	b.n	800cf5a <_printf_common+0x8e>
	...

0800cfa8 <_printf_i>:
 800cfa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cfac:	7e0f      	ldrb	r7, [r1, #24]
 800cfae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cfb0:	2f78      	cmp	r7, #120	; 0x78
 800cfb2:	4691      	mov	r9, r2
 800cfb4:	4680      	mov	r8, r0
 800cfb6:	460c      	mov	r4, r1
 800cfb8:	469a      	mov	sl, r3
 800cfba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cfbe:	d807      	bhi.n	800cfd0 <_printf_i+0x28>
 800cfc0:	2f62      	cmp	r7, #98	; 0x62
 800cfc2:	d80a      	bhi.n	800cfda <_printf_i+0x32>
 800cfc4:	2f00      	cmp	r7, #0
 800cfc6:	f000 80d8 	beq.w	800d17a <_printf_i+0x1d2>
 800cfca:	2f58      	cmp	r7, #88	; 0x58
 800cfcc:	f000 80a3 	beq.w	800d116 <_printf_i+0x16e>
 800cfd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cfd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cfd8:	e03a      	b.n	800d050 <_printf_i+0xa8>
 800cfda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cfde:	2b15      	cmp	r3, #21
 800cfe0:	d8f6      	bhi.n	800cfd0 <_printf_i+0x28>
 800cfe2:	a101      	add	r1, pc, #4	; (adr r1, 800cfe8 <_printf_i+0x40>)
 800cfe4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cfe8:	0800d041 	.word	0x0800d041
 800cfec:	0800d055 	.word	0x0800d055
 800cff0:	0800cfd1 	.word	0x0800cfd1
 800cff4:	0800cfd1 	.word	0x0800cfd1
 800cff8:	0800cfd1 	.word	0x0800cfd1
 800cffc:	0800cfd1 	.word	0x0800cfd1
 800d000:	0800d055 	.word	0x0800d055
 800d004:	0800cfd1 	.word	0x0800cfd1
 800d008:	0800cfd1 	.word	0x0800cfd1
 800d00c:	0800cfd1 	.word	0x0800cfd1
 800d010:	0800cfd1 	.word	0x0800cfd1
 800d014:	0800d161 	.word	0x0800d161
 800d018:	0800d085 	.word	0x0800d085
 800d01c:	0800d143 	.word	0x0800d143
 800d020:	0800cfd1 	.word	0x0800cfd1
 800d024:	0800cfd1 	.word	0x0800cfd1
 800d028:	0800d183 	.word	0x0800d183
 800d02c:	0800cfd1 	.word	0x0800cfd1
 800d030:	0800d085 	.word	0x0800d085
 800d034:	0800cfd1 	.word	0x0800cfd1
 800d038:	0800cfd1 	.word	0x0800cfd1
 800d03c:	0800d14b 	.word	0x0800d14b
 800d040:	682b      	ldr	r3, [r5, #0]
 800d042:	1d1a      	adds	r2, r3, #4
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	602a      	str	r2, [r5, #0]
 800d048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d04c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d050:	2301      	movs	r3, #1
 800d052:	e0a3      	b.n	800d19c <_printf_i+0x1f4>
 800d054:	6820      	ldr	r0, [r4, #0]
 800d056:	6829      	ldr	r1, [r5, #0]
 800d058:	0606      	lsls	r6, r0, #24
 800d05a:	f101 0304 	add.w	r3, r1, #4
 800d05e:	d50a      	bpl.n	800d076 <_printf_i+0xce>
 800d060:	680e      	ldr	r6, [r1, #0]
 800d062:	602b      	str	r3, [r5, #0]
 800d064:	2e00      	cmp	r6, #0
 800d066:	da03      	bge.n	800d070 <_printf_i+0xc8>
 800d068:	232d      	movs	r3, #45	; 0x2d
 800d06a:	4276      	negs	r6, r6
 800d06c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d070:	485e      	ldr	r0, [pc, #376]	; (800d1ec <_printf_i+0x244>)
 800d072:	230a      	movs	r3, #10
 800d074:	e019      	b.n	800d0aa <_printf_i+0x102>
 800d076:	680e      	ldr	r6, [r1, #0]
 800d078:	602b      	str	r3, [r5, #0]
 800d07a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d07e:	bf18      	it	ne
 800d080:	b236      	sxthne	r6, r6
 800d082:	e7ef      	b.n	800d064 <_printf_i+0xbc>
 800d084:	682b      	ldr	r3, [r5, #0]
 800d086:	6820      	ldr	r0, [r4, #0]
 800d088:	1d19      	adds	r1, r3, #4
 800d08a:	6029      	str	r1, [r5, #0]
 800d08c:	0601      	lsls	r1, r0, #24
 800d08e:	d501      	bpl.n	800d094 <_printf_i+0xec>
 800d090:	681e      	ldr	r6, [r3, #0]
 800d092:	e002      	b.n	800d09a <_printf_i+0xf2>
 800d094:	0646      	lsls	r6, r0, #25
 800d096:	d5fb      	bpl.n	800d090 <_printf_i+0xe8>
 800d098:	881e      	ldrh	r6, [r3, #0]
 800d09a:	4854      	ldr	r0, [pc, #336]	; (800d1ec <_printf_i+0x244>)
 800d09c:	2f6f      	cmp	r7, #111	; 0x6f
 800d09e:	bf0c      	ite	eq
 800d0a0:	2308      	moveq	r3, #8
 800d0a2:	230a      	movne	r3, #10
 800d0a4:	2100      	movs	r1, #0
 800d0a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d0aa:	6865      	ldr	r5, [r4, #4]
 800d0ac:	60a5      	str	r5, [r4, #8]
 800d0ae:	2d00      	cmp	r5, #0
 800d0b0:	bfa2      	ittt	ge
 800d0b2:	6821      	ldrge	r1, [r4, #0]
 800d0b4:	f021 0104 	bicge.w	r1, r1, #4
 800d0b8:	6021      	strge	r1, [r4, #0]
 800d0ba:	b90e      	cbnz	r6, 800d0c0 <_printf_i+0x118>
 800d0bc:	2d00      	cmp	r5, #0
 800d0be:	d04d      	beq.n	800d15c <_printf_i+0x1b4>
 800d0c0:	4615      	mov	r5, r2
 800d0c2:	fbb6 f1f3 	udiv	r1, r6, r3
 800d0c6:	fb03 6711 	mls	r7, r3, r1, r6
 800d0ca:	5dc7      	ldrb	r7, [r0, r7]
 800d0cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d0d0:	4637      	mov	r7, r6
 800d0d2:	42bb      	cmp	r3, r7
 800d0d4:	460e      	mov	r6, r1
 800d0d6:	d9f4      	bls.n	800d0c2 <_printf_i+0x11a>
 800d0d8:	2b08      	cmp	r3, #8
 800d0da:	d10b      	bne.n	800d0f4 <_printf_i+0x14c>
 800d0dc:	6823      	ldr	r3, [r4, #0]
 800d0de:	07de      	lsls	r6, r3, #31
 800d0e0:	d508      	bpl.n	800d0f4 <_printf_i+0x14c>
 800d0e2:	6923      	ldr	r3, [r4, #16]
 800d0e4:	6861      	ldr	r1, [r4, #4]
 800d0e6:	4299      	cmp	r1, r3
 800d0e8:	bfde      	ittt	le
 800d0ea:	2330      	movle	r3, #48	; 0x30
 800d0ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d0f0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d0f4:	1b52      	subs	r2, r2, r5
 800d0f6:	6122      	str	r2, [r4, #16]
 800d0f8:	f8cd a000 	str.w	sl, [sp]
 800d0fc:	464b      	mov	r3, r9
 800d0fe:	aa03      	add	r2, sp, #12
 800d100:	4621      	mov	r1, r4
 800d102:	4640      	mov	r0, r8
 800d104:	f7ff fee2 	bl	800cecc <_printf_common>
 800d108:	3001      	adds	r0, #1
 800d10a:	d14c      	bne.n	800d1a6 <_printf_i+0x1fe>
 800d10c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d110:	b004      	add	sp, #16
 800d112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d116:	4835      	ldr	r0, [pc, #212]	; (800d1ec <_printf_i+0x244>)
 800d118:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d11c:	6829      	ldr	r1, [r5, #0]
 800d11e:	6823      	ldr	r3, [r4, #0]
 800d120:	f851 6b04 	ldr.w	r6, [r1], #4
 800d124:	6029      	str	r1, [r5, #0]
 800d126:	061d      	lsls	r5, r3, #24
 800d128:	d514      	bpl.n	800d154 <_printf_i+0x1ac>
 800d12a:	07df      	lsls	r7, r3, #31
 800d12c:	bf44      	itt	mi
 800d12e:	f043 0320 	orrmi.w	r3, r3, #32
 800d132:	6023      	strmi	r3, [r4, #0]
 800d134:	b91e      	cbnz	r6, 800d13e <_printf_i+0x196>
 800d136:	6823      	ldr	r3, [r4, #0]
 800d138:	f023 0320 	bic.w	r3, r3, #32
 800d13c:	6023      	str	r3, [r4, #0]
 800d13e:	2310      	movs	r3, #16
 800d140:	e7b0      	b.n	800d0a4 <_printf_i+0xfc>
 800d142:	6823      	ldr	r3, [r4, #0]
 800d144:	f043 0320 	orr.w	r3, r3, #32
 800d148:	6023      	str	r3, [r4, #0]
 800d14a:	2378      	movs	r3, #120	; 0x78
 800d14c:	4828      	ldr	r0, [pc, #160]	; (800d1f0 <_printf_i+0x248>)
 800d14e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d152:	e7e3      	b.n	800d11c <_printf_i+0x174>
 800d154:	0659      	lsls	r1, r3, #25
 800d156:	bf48      	it	mi
 800d158:	b2b6      	uxthmi	r6, r6
 800d15a:	e7e6      	b.n	800d12a <_printf_i+0x182>
 800d15c:	4615      	mov	r5, r2
 800d15e:	e7bb      	b.n	800d0d8 <_printf_i+0x130>
 800d160:	682b      	ldr	r3, [r5, #0]
 800d162:	6826      	ldr	r6, [r4, #0]
 800d164:	6961      	ldr	r1, [r4, #20]
 800d166:	1d18      	adds	r0, r3, #4
 800d168:	6028      	str	r0, [r5, #0]
 800d16a:	0635      	lsls	r5, r6, #24
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	d501      	bpl.n	800d174 <_printf_i+0x1cc>
 800d170:	6019      	str	r1, [r3, #0]
 800d172:	e002      	b.n	800d17a <_printf_i+0x1d2>
 800d174:	0670      	lsls	r0, r6, #25
 800d176:	d5fb      	bpl.n	800d170 <_printf_i+0x1c8>
 800d178:	8019      	strh	r1, [r3, #0]
 800d17a:	2300      	movs	r3, #0
 800d17c:	6123      	str	r3, [r4, #16]
 800d17e:	4615      	mov	r5, r2
 800d180:	e7ba      	b.n	800d0f8 <_printf_i+0x150>
 800d182:	682b      	ldr	r3, [r5, #0]
 800d184:	1d1a      	adds	r2, r3, #4
 800d186:	602a      	str	r2, [r5, #0]
 800d188:	681d      	ldr	r5, [r3, #0]
 800d18a:	6862      	ldr	r2, [r4, #4]
 800d18c:	2100      	movs	r1, #0
 800d18e:	4628      	mov	r0, r5
 800d190:	f7f3 f826 	bl	80001e0 <memchr>
 800d194:	b108      	cbz	r0, 800d19a <_printf_i+0x1f2>
 800d196:	1b40      	subs	r0, r0, r5
 800d198:	6060      	str	r0, [r4, #4]
 800d19a:	6863      	ldr	r3, [r4, #4]
 800d19c:	6123      	str	r3, [r4, #16]
 800d19e:	2300      	movs	r3, #0
 800d1a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1a4:	e7a8      	b.n	800d0f8 <_printf_i+0x150>
 800d1a6:	6923      	ldr	r3, [r4, #16]
 800d1a8:	462a      	mov	r2, r5
 800d1aa:	4649      	mov	r1, r9
 800d1ac:	4640      	mov	r0, r8
 800d1ae:	47d0      	blx	sl
 800d1b0:	3001      	adds	r0, #1
 800d1b2:	d0ab      	beq.n	800d10c <_printf_i+0x164>
 800d1b4:	6823      	ldr	r3, [r4, #0]
 800d1b6:	079b      	lsls	r3, r3, #30
 800d1b8:	d413      	bmi.n	800d1e2 <_printf_i+0x23a>
 800d1ba:	68e0      	ldr	r0, [r4, #12]
 800d1bc:	9b03      	ldr	r3, [sp, #12]
 800d1be:	4298      	cmp	r0, r3
 800d1c0:	bfb8      	it	lt
 800d1c2:	4618      	movlt	r0, r3
 800d1c4:	e7a4      	b.n	800d110 <_printf_i+0x168>
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	4632      	mov	r2, r6
 800d1ca:	4649      	mov	r1, r9
 800d1cc:	4640      	mov	r0, r8
 800d1ce:	47d0      	blx	sl
 800d1d0:	3001      	adds	r0, #1
 800d1d2:	d09b      	beq.n	800d10c <_printf_i+0x164>
 800d1d4:	3501      	adds	r5, #1
 800d1d6:	68e3      	ldr	r3, [r4, #12]
 800d1d8:	9903      	ldr	r1, [sp, #12]
 800d1da:	1a5b      	subs	r3, r3, r1
 800d1dc:	42ab      	cmp	r3, r5
 800d1de:	dcf2      	bgt.n	800d1c6 <_printf_i+0x21e>
 800d1e0:	e7eb      	b.n	800d1ba <_printf_i+0x212>
 800d1e2:	2500      	movs	r5, #0
 800d1e4:	f104 0619 	add.w	r6, r4, #25
 800d1e8:	e7f5      	b.n	800d1d6 <_printf_i+0x22e>
 800d1ea:	bf00      	nop
 800d1ec:	0800fde6 	.word	0x0800fde6
 800d1f0:	0800fdf7 	.word	0x0800fdf7

0800d1f4 <iprintf>:
 800d1f4:	b40f      	push	{r0, r1, r2, r3}
 800d1f6:	4b0a      	ldr	r3, [pc, #40]	; (800d220 <iprintf+0x2c>)
 800d1f8:	b513      	push	{r0, r1, r4, lr}
 800d1fa:	681c      	ldr	r4, [r3, #0]
 800d1fc:	b124      	cbz	r4, 800d208 <iprintf+0x14>
 800d1fe:	69a3      	ldr	r3, [r4, #24]
 800d200:	b913      	cbnz	r3, 800d208 <iprintf+0x14>
 800d202:	4620      	mov	r0, r4
 800d204:	f001 f92c 	bl	800e460 <__sinit>
 800d208:	ab05      	add	r3, sp, #20
 800d20a:	9a04      	ldr	r2, [sp, #16]
 800d20c:	68a1      	ldr	r1, [r4, #8]
 800d20e:	9301      	str	r3, [sp, #4]
 800d210:	4620      	mov	r0, r4
 800d212:	f002 f837 	bl	800f284 <_vfiprintf_r>
 800d216:	b002      	add	sp, #8
 800d218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d21c:	b004      	add	sp, #16
 800d21e:	4770      	bx	lr
 800d220:	20000118 	.word	0x20000118

0800d224 <_puts_r>:
 800d224:	b570      	push	{r4, r5, r6, lr}
 800d226:	460e      	mov	r6, r1
 800d228:	4605      	mov	r5, r0
 800d22a:	b118      	cbz	r0, 800d234 <_puts_r+0x10>
 800d22c:	6983      	ldr	r3, [r0, #24]
 800d22e:	b90b      	cbnz	r3, 800d234 <_puts_r+0x10>
 800d230:	f001 f916 	bl	800e460 <__sinit>
 800d234:	69ab      	ldr	r3, [r5, #24]
 800d236:	68ac      	ldr	r4, [r5, #8]
 800d238:	b913      	cbnz	r3, 800d240 <_puts_r+0x1c>
 800d23a:	4628      	mov	r0, r5
 800d23c:	f001 f910 	bl	800e460 <__sinit>
 800d240:	4b2c      	ldr	r3, [pc, #176]	; (800d2f4 <_puts_r+0xd0>)
 800d242:	429c      	cmp	r4, r3
 800d244:	d120      	bne.n	800d288 <_puts_r+0x64>
 800d246:	686c      	ldr	r4, [r5, #4]
 800d248:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d24a:	07db      	lsls	r3, r3, #31
 800d24c:	d405      	bmi.n	800d25a <_puts_r+0x36>
 800d24e:	89a3      	ldrh	r3, [r4, #12]
 800d250:	0598      	lsls	r0, r3, #22
 800d252:	d402      	bmi.n	800d25a <_puts_r+0x36>
 800d254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d256:	f001 f9a6 	bl	800e5a6 <__retarget_lock_acquire_recursive>
 800d25a:	89a3      	ldrh	r3, [r4, #12]
 800d25c:	0719      	lsls	r1, r3, #28
 800d25e:	d51d      	bpl.n	800d29c <_puts_r+0x78>
 800d260:	6923      	ldr	r3, [r4, #16]
 800d262:	b1db      	cbz	r3, 800d29c <_puts_r+0x78>
 800d264:	3e01      	subs	r6, #1
 800d266:	68a3      	ldr	r3, [r4, #8]
 800d268:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d26c:	3b01      	subs	r3, #1
 800d26e:	60a3      	str	r3, [r4, #8]
 800d270:	bb39      	cbnz	r1, 800d2c2 <_puts_r+0x9e>
 800d272:	2b00      	cmp	r3, #0
 800d274:	da38      	bge.n	800d2e8 <_puts_r+0xc4>
 800d276:	4622      	mov	r2, r4
 800d278:	210a      	movs	r1, #10
 800d27a:	4628      	mov	r0, r5
 800d27c:	f000 f89c 	bl	800d3b8 <__swbuf_r>
 800d280:	3001      	adds	r0, #1
 800d282:	d011      	beq.n	800d2a8 <_puts_r+0x84>
 800d284:	250a      	movs	r5, #10
 800d286:	e011      	b.n	800d2ac <_puts_r+0x88>
 800d288:	4b1b      	ldr	r3, [pc, #108]	; (800d2f8 <_puts_r+0xd4>)
 800d28a:	429c      	cmp	r4, r3
 800d28c:	d101      	bne.n	800d292 <_puts_r+0x6e>
 800d28e:	68ac      	ldr	r4, [r5, #8]
 800d290:	e7da      	b.n	800d248 <_puts_r+0x24>
 800d292:	4b1a      	ldr	r3, [pc, #104]	; (800d2fc <_puts_r+0xd8>)
 800d294:	429c      	cmp	r4, r3
 800d296:	bf08      	it	eq
 800d298:	68ec      	ldreq	r4, [r5, #12]
 800d29a:	e7d5      	b.n	800d248 <_puts_r+0x24>
 800d29c:	4621      	mov	r1, r4
 800d29e:	4628      	mov	r0, r5
 800d2a0:	f000 f8dc 	bl	800d45c <__swsetup_r>
 800d2a4:	2800      	cmp	r0, #0
 800d2a6:	d0dd      	beq.n	800d264 <_puts_r+0x40>
 800d2a8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d2ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d2ae:	07da      	lsls	r2, r3, #31
 800d2b0:	d405      	bmi.n	800d2be <_puts_r+0x9a>
 800d2b2:	89a3      	ldrh	r3, [r4, #12]
 800d2b4:	059b      	lsls	r3, r3, #22
 800d2b6:	d402      	bmi.n	800d2be <_puts_r+0x9a>
 800d2b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2ba:	f001 f975 	bl	800e5a8 <__retarget_lock_release_recursive>
 800d2be:	4628      	mov	r0, r5
 800d2c0:	bd70      	pop	{r4, r5, r6, pc}
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	da04      	bge.n	800d2d0 <_puts_r+0xac>
 800d2c6:	69a2      	ldr	r2, [r4, #24]
 800d2c8:	429a      	cmp	r2, r3
 800d2ca:	dc06      	bgt.n	800d2da <_puts_r+0xb6>
 800d2cc:	290a      	cmp	r1, #10
 800d2ce:	d004      	beq.n	800d2da <_puts_r+0xb6>
 800d2d0:	6823      	ldr	r3, [r4, #0]
 800d2d2:	1c5a      	adds	r2, r3, #1
 800d2d4:	6022      	str	r2, [r4, #0]
 800d2d6:	7019      	strb	r1, [r3, #0]
 800d2d8:	e7c5      	b.n	800d266 <_puts_r+0x42>
 800d2da:	4622      	mov	r2, r4
 800d2dc:	4628      	mov	r0, r5
 800d2de:	f000 f86b 	bl	800d3b8 <__swbuf_r>
 800d2e2:	3001      	adds	r0, #1
 800d2e4:	d1bf      	bne.n	800d266 <_puts_r+0x42>
 800d2e6:	e7df      	b.n	800d2a8 <_puts_r+0x84>
 800d2e8:	6823      	ldr	r3, [r4, #0]
 800d2ea:	250a      	movs	r5, #10
 800d2ec:	1c5a      	adds	r2, r3, #1
 800d2ee:	6022      	str	r2, [r4, #0]
 800d2f0:	701d      	strb	r5, [r3, #0]
 800d2f2:	e7db      	b.n	800d2ac <_puts_r+0x88>
 800d2f4:	0800feb8 	.word	0x0800feb8
 800d2f8:	0800fed8 	.word	0x0800fed8
 800d2fc:	0800fe98 	.word	0x0800fe98

0800d300 <puts>:
 800d300:	4b02      	ldr	r3, [pc, #8]	; (800d30c <puts+0xc>)
 800d302:	4601      	mov	r1, r0
 800d304:	6818      	ldr	r0, [r3, #0]
 800d306:	f7ff bf8d 	b.w	800d224 <_puts_r>
 800d30a:	bf00      	nop
 800d30c:	20000118 	.word	0x20000118

0800d310 <sniprintf>:
 800d310:	b40c      	push	{r2, r3}
 800d312:	b530      	push	{r4, r5, lr}
 800d314:	4b17      	ldr	r3, [pc, #92]	; (800d374 <sniprintf+0x64>)
 800d316:	1e0c      	subs	r4, r1, #0
 800d318:	681d      	ldr	r5, [r3, #0]
 800d31a:	b09d      	sub	sp, #116	; 0x74
 800d31c:	da08      	bge.n	800d330 <sniprintf+0x20>
 800d31e:	238b      	movs	r3, #139	; 0x8b
 800d320:	602b      	str	r3, [r5, #0]
 800d322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d326:	b01d      	add	sp, #116	; 0x74
 800d328:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d32c:	b002      	add	sp, #8
 800d32e:	4770      	bx	lr
 800d330:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d334:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d338:	bf14      	ite	ne
 800d33a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800d33e:	4623      	moveq	r3, r4
 800d340:	9304      	str	r3, [sp, #16]
 800d342:	9307      	str	r3, [sp, #28]
 800d344:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d348:	9002      	str	r0, [sp, #8]
 800d34a:	9006      	str	r0, [sp, #24]
 800d34c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d350:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d352:	ab21      	add	r3, sp, #132	; 0x84
 800d354:	a902      	add	r1, sp, #8
 800d356:	4628      	mov	r0, r5
 800d358:	9301      	str	r3, [sp, #4]
 800d35a:	f001 fe69 	bl	800f030 <_svfiprintf_r>
 800d35e:	1c43      	adds	r3, r0, #1
 800d360:	bfbc      	itt	lt
 800d362:	238b      	movlt	r3, #139	; 0x8b
 800d364:	602b      	strlt	r3, [r5, #0]
 800d366:	2c00      	cmp	r4, #0
 800d368:	d0dd      	beq.n	800d326 <sniprintf+0x16>
 800d36a:	9b02      	ldr	r3, [sp, #8]
 800d36c:	2200      	movs	r2, #0
 800d36e:	701a      	strb	r2, [r3, #0]
 800d370:	e7d9      	b.n	800d326 <sniprintf+0x16>
 800d372:	bf00      	nop
 800d374:	20000118 	.word	0x20000118

0800d378 <siprintf>:
 800d378:	b40e      	push	{r1, r2, r3}
 800d37a:	b500      	push	{lr}
 800d37c:	b09c      	sub	sp, #112	; 0x70
 800d37e:	ab1d      	add	r3, sp, #116	; 0x74
 800d380:	9002      	str	r0, [sp, #8]
 800d382:	9006      	str	r0, [sp, #24]
 800d384:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d388:	4809      	ldr	r0, [pc, #36]	; (800d3b0 <siprintf+0x38>)
 800d38a:	9107      	str	r1, [sp, #28]
 800d38c:	9104      	str	r1, [sp, #16]
 800d38e:	4909      	ldr	r1, [pc, #36]	; (800d3b4 <siprintf+0x3c>)
 800d390:	f853 2b04 	ldr.w	r2, [r3], #4
 800d394:	9105      	str	r1, [sp, #20]
 800d396:	6800      	ldr	r0, [r0, #0]
 800d398:	9301      	str	r3, [sp, #4]
 800d39a:	a902      	add	r1, sp, #8
 800d39c:	f001 fe48 	bl	800f030 <_svfiprintf_r>
 800d3a0:	9b02      	ldr	r3, [sp, #8]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	701a      	strb	r2, [r3, #0]
 800d3a6:	b01c      	add	sp, #112	; 0x70
 800d3a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3ac:	b003      	add	sp, #12
 800d3ae:	4770      	bx	lr
 800d3b0:	20000118 	.word	0x20000118
 800d3b4:	ffff0208 	.word	0xffff0208

0800d3b8 <__swbuf_r>:
 800d3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ba:	460e      	mov	r6, r1
 800d3bc:	4614      	mov	r4, r2
 800d3be:	4605      	mov	r5, r0
 800d3c0:	b118      	cbz	r0, 800d3ca <__swbuf_r+0x12>
 800d3c2:	6983      	ldr	r3, [r0, #24]
 800d3c4:	b90b      	cbnz	r3, 800d3ca <__swbuf_r+0x12>
 800d3c6:	f001 f84b 	bl	800e460 <__sinit>
 800d3ca:	4b21      	ldr	r3, [pc, #132]	; (800d450 <__swbuf_r+0x98>)
 800d3cc:	429c      	cmp	r4, r3
 800d3ce:	d12b      	bne.n	800d428 <__swbuf_r+0x70>
 800d3d0:	686c      	ldr	r4, [r5, #4]
 800d3d2:	69a3      	ldr	r3, [r4, #24]
 800d3d4:	60a3      	str	r3, [r4, #8]
 800d3d6:	89a3      	ldrh	r3, [r4, #12]
 800d3d8:	071a      	lsls	r2, r3, #28
 800d3da:	d52f      	bpl.n	800d43c <__swbuf_r+0x84>
 800d3dc:	6923      	ldr	r3, [r4, #16]
 800d3de:	b36b      	cbz	r3, 800d43c <__swbuf_r+0x84>
 800d3e0:	6923      	ldr	r3, [r4, #16]
 800d3e2:	6820      	ldr	r0, [r4, #0]
 800d3e4:	1ac0      	subs	r0, r0, r3
 800d3e6:	6963      	ldr	r3, [r4, #20]
 800d3e8:	b2f6      	uxtb	r6, r6
 800d3ea:	4283      	cmp	r3, r0
 800d3ec:	4637      	mov	r7, r6
 800d3ee:	dc04      	bgt.n	800d3fa <__swbuf_r+0x42>
 800d3f0:	4621      	mov	r1, r4
 800d3f2:	4628      	mov	r0, r5
 800d3f4:	f000 ffa0 	bl	800e338 <_fflush_r>
 800d3f8:	bb30      	cbnz	r0, 800d448 <__swbuf_r+0x90>
 800d3fa:	68a3      	ldr	r3, [r4, #8]
 800d3fc:	3b01      	subs	r3, #1
 800d3fe:	60a3      	str	r3, [r4, #8]
 800d400:	6823      	ldr	r3, [r4, #0]
 800d402:	1c5a      	adds	r2, r3, #1
 800d404:	6022      	str	r2, [r4, #0]
 800d406:	701e      	strb	r6, [r3, #0]
 800d408:	6963      	ldr	r3, [r4, #20]
 800d40a:	3001      	adds	r0, #1
 800d40c:	4283      	cmp	r3, r0
 800d40e:	d004      	beq.n	800d41a <__swbuf_r+0x62>
 800d410:	89a3      	ldrh	r3, [r4, #12]
 800d412:	07db      	lsls	r3, r3, #31
 800d414:	d506      	bpl.n	800d424 <__swbuf_r+0x6c>
 800d416:	2e0a      	cmp	r6, #10
 800d418:	d104      	bne.n	800d424 <__swbuf_r+0x6c>
 800d41a:	4621      	mov	r1, r4
 800d41c:	4628      	mov	r0, r5
 800d41e:	f000 ff8b 	bl	800e338 <_fflush_r>
 800d422:	b988      	cbnz	r0, 800d448 <__swbuf_r+0x90>
 800d424:	4638      	mov	r0, r7
 800d426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d428:	4b0a      	ldr	r3, [pc, #40]	; (800d454 <__swbuf_r+0x9c>)
 800d42a:	429c      	cmp	r4, r3
 800d42c:	d101      	bne.n	800d432 <__swbuf_r+0x7a>
 800d42e:	68ac      	ldr	r4, [r5, #8]
 800d430:	e7cf      	b.n	800d3d2 <__swbuf_r+0x1a>
 800d432:	4b09      	ldr	r3, [pc, #36]	; (800d458 <__swbuf_r+0xa0>)
 800d434:	429c      	cmp	r4, r3
 800d436:	bf08      	it	eq
 800d438:	68ec      	ldreq	r4, [r5, #12]
 800d43a:	e7ca      	b.n	800d3d2 <__swbuf_r+0x1a>
 800d43c:	4621      	mov	r1, r4
 800d43e:	4628      	mov	r0, r5
 800d440:	f000 f80c 	bl	800d45c <__swsetup_r>
 800d444:	2800      	cmp	r0, #0
 800d446:	d0cb      	beq.n	800d3e0 <__swbuf_r+0x28>
 800d448:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d44c:	e7ea      	b.n	800d424 <__swbuf_r+0x6c>
 800d44e:	bf00      	nop
 800d450:	0800feb8 	.word	0x0800feb8
 800d454:	0800fed8 	.word	0x0800fed8
 800d458:	0800fe98 	.word	0x0800fe98

0800d45c <__swsetup_r>:
 800d45c:	4b32      	ldr	r3, [pc, #200]	; (800d528 <__swsetup_r+0xcc>)
 800d45e:	b570      	push	{r4, r5, r6, lr}
 800d460:	681d      	ldr	r5, [r3, #0]
 800d462:	4606      	mov	r6, r0
 800d464:	460c      	mov	r4, r1
 800d466:	b125      	cbz	r5, 800d472 <__swsetup_r+0x16>
 800d468:	69ab      	ldr	r3, [r5, #24]
 800d46a:	b913      	cbnz	r3, 800d472 <__swsetup_r+0x16>
 800d46c:	4628      	mov	r0, r5
 800d46e:	f000 fff7 	bl	800e460 <__sinit>
 800d472:	4b2e      	ldr	r3, [pc, #184]	; (800d52c <__swsetup_r+0xd0>)
 800d474:	429c      	cmp	r4, r3
 800d476:	d10f      	bne.n	800d498 <__swsetup_r+0x3c>
 800d478:	686c      	ldr	r4, [r5, #4]
 800d47a:	89a3      	ldrh	r3, [r4, #12]
 800d47c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d480:	0719      	lsls	r1, r3, #28
 800d482:	d42c      	bmi.n	800d4de <__swsetup_r+0x82>
 800d484:	06dd      	lsls	r5, r3, #27
 800d486:	d411      	bmi.n	800d4ac <__swsetup_r+0x50>
 800d488:	2309      	movs	r3, #9
 800d48a:	6033      	str	r3, [r6, #0]
 800d48c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d490:	81a3      	strh	r3, [r4, #12]
 800d492:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d496:	e03e      	b.n	800d516 <__swsetup_r+0xba>
 800d498:	4b25      	ldr	r3, [pc, #148]	; (800d530 <__swsetup_r+0xd4>)
 800d49a:	429c      	cmp	r4, r3
 800d49c:	d101      	bne.n	800d4a2 <__swsetup_r+0x46>
 800d49e:	68ac      	ldr	r4, [r5, #8]
 800d4a0:	e7eb      	b.n	800d47a <__swsetup_r+0x1e>
 800d4a2:	4b24      	ldr	r3, [pc, #144]	; (800d534 <__swsetup_r+0xd8>)
 800d4a4:	429c      	cmp	r4, r3
 800d4a6:	bf08      	it	eq
 800d4a8:	68ec      	ldreq	r4, [r5, #12]
 800d4aa:	e7e6      	b.n	800d47a <__swsetup_r+0x1e>
 800d4ac:	0758      	lsls	r0, r3, #29
 800d4ae:	d512      	bpl.n	800d4d6 <__swsetup_r+0x7a>
 800d4b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d4b2:	b141      	cbz	r1, 800d4c6 <__swsetup_r+0x6a>
 800d4b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d4b8:	4299      	cmp	r1, r3
 800d4ba:	d002      	beq.n	800d4c2 <__swsetup_r+0x66>
 800d4bc:	4630      	mov	r0, r6
 800d4be:	f001 fc7b 	bl	800edb8 <_free_r>
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	6363      	str	r3, [r4, #52]	; 0x34
 800d4c6:	89a3      	ldrh	r3, [r4, #12]
 800d4c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d4cc:	81a3      	strh	r3, [r4, #12]
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	6063      	str	r3, [r4, #4]
 800d4d2:	6923      	ldr	r3, [r4, #16]
 800d4d4:	6023      	str	r3, [r4, #0]
 800d4d6:	89a3      	ldrh	r3, [r4, #12]
 800d4d8:	f043 0308 	orr.w	r3, r3, #8
 800d4dc:	81a3      	strh	r3, [r4, #12]
 800d4de:	6923      	ldr	r3, [r4, #16]
 800d4e0:	b94b      	cbnz	r3, 800d4f6 <__swsetup_r+0x9a>
 800d4e2:	89a3      	ldrh	r3, [r4, #12]
 800d4e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d4e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4ec:	d003      	beq.n	800d4f6 <__swsetup_r+0x9a>
 800d4ee:	4621      	mov	r1, r4
 800d4f0:	4630      	mov	r0, r6
 800d4f2:	f001 f87f 	bl	800e5f4 <__smakebuf_r>
 800d4f6:	89a0      	ldrh	r0, [r4, #12]
 800d4f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4fc:	f010 0301 	ands.w	r3, r0, #1
 800d500:	d00a      	beq.n	800d518 <__swsetup_r+0xbc>
 800d502:	2300      	movs	r3, #0
 800d504:	60a3      	str	r3, [r4, #8]
 800d506:	6963      	ldr	r3, [r4, #20]
 800d508:	425b      	negs	r3, r3
 800d50a:	61a3      	str	r3, [r4, #24]
 800d50c:	6923      	ldr	r3, [r4, #16]
 800d50e:	b943      	cbnz	r3, 800d522 <__swsetup_r+0xc6>
 800d510:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d514:	d1ba      	bne.n	800d48c <__swsetup_r+0x30>
 800d516:	bd70      	pop	{r4, r5, r6, pc}
 800d518:	0781      	lsls	r1, r0, #30
 800d51a:	bf58      	it	pl
 800d51c:	6963      	ldrpl	r3, [r4, #20]
 800d51e:	60a3      	str	r3, [r4, #8]
 800d520:	e7f4      	b.n	800d50c <__swsetup_r+0xb0>
 800d522:	2000      	movs	r0, #0
 800d524:	e7f7      	b.n	800d516 <__swsetup_r+0xba>
 800d526:	bf00      	nop
 800d528:	20000118 	.word	0x20000118
 800d52c:	0800feb8 	.word	0x0800feb8
 800d530:	0800fed8 	.word	0x0800fed8
 800d534:	0800fe98 	.word	0x0800fe98

0800d538 <quorem>:
 800d538:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d53c:	6903      	ldr	r3, [r0, #16]
 800d53e:	690c      	ldr	r4, [r1, #16]
 800d540:	42a3      	cmp	r3, r4
 800d542:	4607      	mov	r7, r0
 800d544:	f2c0 8081 	blt.w	800d64a <quorem+0x112>
 800d548:	3c01      	subs	r4, #1
 800d54a:	f101 0814 	add.w	r8, r1, #20
 800d54e:	f100 0514 	add.w	r5, r0, #20
 800d552:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d556:	9301      	str	r3, [sp, #4]
 800d558:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d55c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d560:	3301      	adds	r3, #1
 800d562:	429a      	cmp	r2, r3
 800d564:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d568:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d56c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d570:	d331      	bcc.n	800d5d6 <quorem+0x9e>
 800d572:	f04f 0e00 	mov.w	lr, #0
 800d576:	4640      	mov	r0, r8
 800d578:	46ac      	mov	ip, r5
 800d57a:	46f2      	mov	sl, lr
 800d57c:	f850 2b04 	ldr.w	r2, [r0], #4
 800d580:	b293      	uxth	r3, r2
 800d582:	fb06 e303 	mla	r3, r6, r3, lr
 800d586:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d58a:	b29b      	uxth	r3, r3
 800d58c:	ebaa 0303 	sub.w	r3, sl, r3
 800d590:	f8dc a000 	ldr.w	sl, [ip]
 800d594:	0c12      	lsrs	r2, r2, #16
 800d596:	fa13 f38a 	uxtah	r3, r3, sl
 800d59a:	fb06 e202 	mla	r2, r6, r2, lr
 800d59e:	9300      	str	r3, [sp, #0]
 800d5a0:	9b00      	ldr	r3, [sp, #0]
 800d5a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d5a6:	b292      	uxth	r2, r2
 800d5a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d5ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d5b0:	f8bd 3000 	ldrh.w	r3, [sp]
 800d5b4:	4581      	cmp	r9, r0
 800d5b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d5ba:	f84c 3b04 	str.w	r3, [ip], #4
 800d5be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d5c2:	d2db      	bcs.n	800d57c <quorem+0x44>
 800d5c4:	f855 300b 	ldr.w	r3, [r5, fp]
 800d5c8:	b92b      	cbnz	r3, 800d5d6 <quorem+0x9e>
 800d5ca:	9b01      	ldr	r3, [sp, #4]
 800d5cc:	3b04      	subs	r3, #4
 800d5ce:	429d      	cmp	r5, r3
 800d5d0:	461a      	mov	r2, r3
 800d5d2:	d32e      	bcc.n	800d632 <quorem+0xfa>
 800d5d4:	613c      	str	r4, [r7, #16]
 800d5d6:	4638      	mov	r0, r7
 800d5d8:	f001 fad6 	bl	800eb88 <__mcmp>
 800d5dc:	2800      	cmp	r0, #0
 800d5de:	db24      	blt.n	800d62a <quorem+0xf2>
 800d5e0:	3601      	adds	r6, #1
 800d5e2:	4628      	mov	r0, r5
 800d5e4:	f04f 0c00 	mov.w	ip, #0
 800d5e8:	f858 2b04 	ldr.w	r2, [r8], #4
 800d5ec:	f8d0 e000 	ldr.w	lr, [r0]
 800d5f0:	b293      	uxth	r3, r2
 800d5f2:	ebac 0303 	sub.w	r3, ip, r3
 800d5f6:	0c12      	lsrs	r2, r2, #16
 800d5f8:	fa13 f38e 	uxtah	r3, r3, lr
 800d5fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d600:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d604:	b29b      	uxth	r3, r3
 800d606:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d60a:	45c1      	cmp	r9, r8
 800d60c:	f840 3b04 	str.w	r3, [r0], #4
 800d610:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d614:	d2e8      	bcs.n	800d5e8 <quorem+0xb0>
 800d616:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d61a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d61e:	b922      	cbnz	r2, 800d62a <quorem+0xf2>
 800d620:	3b04      	subs	r3, #4
 800d622:	429d      	cmp	r5, r3
 800d624:	461a      	mov	r2, r3
 800d626:	d30a      	bcc.n	800d63e <quorem+0x106>
 800d628:	613c      	str	r4, [r7, #16]
 800d62a:	4630      	mov	r0, r6
 800d62c:	b003      	add	sp, #12
 800d62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d632:	6812      	ldr	r2, [r2, #0]
 800d634:	3b04      	subs	r3, #4
 800d636:	2a00      	cmp	r2, #0
 800d638:	d1cc      	bne.n	800d5d4 <quorem+0x9c>
 800d63a:	3c01      	subs	r4, #1
 800d63c:	e7c7      	b.n	800d5ce <quorem+0x96>
 800d63e:	6812      	ldr	r2, [r2, #0]
 800d640:	3b04      	subs	r3, #4
 800d642:	2a00      	cmp	r2, #0
 800d644:	d1f0      	bne.n	800d628 <quorem+0xf0>
 800d646:	3c01      	subs	r4, #1
 800d648:	e7eb      	b.n	800d622 <quorem+0xea>
 800d64a:	2000      	movs	r0, #0
 800d64c:	e7ee      	b.n	800d62c <quorem+0xf4>
	...

0800d650 <_dtoa_r>:
 800d650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d654:	ed2d 8b04 	vpush	{d8-d9}
 800d658:	ec57 6b10 	vmov	r6, r7, d0
 800d65c:	b093      	sub	sp, #76	; 0x4c
 800d65e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d660:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d664:	9106      	str	r1, [sp, #24]
 800d666:	ee10 aa10 	vmov	sl, s0
 800d66a:	4604      	mov	r4, r0
 800d66c:	9209      	str	r2, [sp, #36]	; 0x24
 800d66e:	930c      	str	r3, [sp, #48]	; 0x30
 800d670:	46bb      	mov	fp, r7
 800d672:	b975      	cbnz	r5, 800d692 <_dtoa_r+0x42>
 800d674:	2010      	movs	r0, #16
 800d676:	f000 fffd 	bl	800e674 <malloc>
 800d67a:	4602      	mov	r2, r0
 800d67c:	6260      	str	r0, [r4, #36]	; 0x24
 800d67e:	b920      	cbnz	r0, 800d68a <_dtoa_r+0x3a>
 800d680:	4ba7      	ldr	r3, [pc, #668]	; (800d920 <_dtoa_r+0x2d0>)
 800d682:	21ea      	movs	r1, #234	; 0xea
 800d684:	48a7      	ldr	r0, [pc, #668]	; (800d924 <_dtoa_r+0x2d4>)
 800d686:	f001 ff93 	bl	800f5b0 <__assert_func>
 800d68a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d68e:	6005      	str	r5, [r0, #0]
 800d690:	60c5      	str	r5, [r0, #12]
 800d692:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d694:	6819      	ldr	r1, [r3, #0]
 800d696:	b151      	cbz	r1, 800d6ae <_dtoa_r+0x5e>
 800d698:	685a      	ldr	r2, [r3, #4]
 800d69a:	604a      	str	r2, [r1, #4]
 800d69c:	2301      	movs	r3, #1
 800d69e:	4093      	lsls	r3, r2
 800d6a0:	608b      	str	r3, [r1, #8]
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	f001 f82e 	bl	800e704 <_Bfree>
 800d6a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	601a      	str	r2, [r3, #0]
 800d6ae:	1e3b      	subs	r3, r7, #0
 800d6b0:	bfaa      	itet	ge
 800d6b2:	2300      	movge	r3, #0
 800d6b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d6b8:	f8c8 3000 	strge.w	r3, [r8]
 800d6bc:	4b9a      	ldr	r3, [pc, #616]	; (800d928 <_dtoa_r+0x2d8>)
 800d6be:	bfbc      	itt	lt
 800d6c0:	2201      	movlt	r2, #1
 800d6c2:	f8c8 2000 	strlt.w	r2, [r8]
 800d6c6:	ea33 030b 	bics.w	r3, r3, fp
 800d6ca:	d11b      	bne.n	800d704 <_dtoa_r+0xb4>
 800d6cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d6ce:	f242 730f 	movw	r3, #9999	; 0x270f
 800d6d2:	6013      	str	r3, [r2, #0]
 800d6d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d6d8:	4333      	orrs	r3, r6
 800d6da:	f000 8592 	beq.w	800e202 <_dtoa_r+0xbb2>
 800d6de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6e0:	b963      	cbnz	r3, 800d6fc <_dtoa_r+0xac>
 800d6e2:	4b92      	ldr	r3, [pc, #584]	; (800d92c <_dtoa_r+0x2dc>)
 800d6e4:	e022      	b.n	800d72c <_dtoa_r+0xdc>
 800d6e6:	4b92      	ldr	r3, [pc, #584]	; (800d930 <_dtoa_r+0x2e0>)
 800d6e8:	9301      	str	r3, [sp, #4]
 800d6ea:	3308      	adds	r3, #8
 800d6ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d6ee:	6013      	str	r3, [r2, #0]
 800d6f0:	9801      	ldr	r0, [sp, #4]
 800d6f2:	b013      	add	sp, #76	; 0x4c
 800d6f4:	ecbd 8b04 	vpop	{d8-d9}
 800d6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6fc:	4b8b      	ldr	r3, [pc, #556]	; (800d92c <_dtoa_r+0x2dc>)
 800d6fe:	9301      	str	r3, [sp, #4]
 800d700:	3303      	adds	r3, #3
 800d702:	e7f3      	b.n	800d6ec <_dtoa_r+0x9c>
 800d704:	2200      	movs	r2, #0
 800d706:	2300      	movs	r3, #0
 800d708:	4650      	mov	r0, sl
 800d70a:	4659      	mov	r1, fp
 800d70c:	f7f3 f9dc 	bl	8000ac8 <__aeabi_dcmpeq>
 800d710:	ec4b ab19 	vmov	d9, sl, fp
 800d714:	4680      	mov	r8, r0
 800d716:	b158      	cbz	r0, 800d730 <_dtoa_r+0xe0>
 800d718:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d71a:	2301      	movs	r3, #1
 800d71c:	6013      	str	r3, [r2, #0]
 800d71e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d720:	2b00      	cmp	r3, #0
 800d722:	f000 856b 	beq.w	800e1fc <_dtoa_r+0xbac>
 800d726:	4883      	ldr	r0, [pc, #524]	; (800d934 <_dtoa_r+0x2e4>)
 800d728:	6018      	str	r0, [r3, #0]
 800d72a:	1e43      	subs	r3, r0, #1
 800d72c:	9301      	str	r3, [sp, #4]
 800d72e:	e7df      	b.n	800d6f0 <_dtoa_r+0xa0>
 800d730:	ec4b ab10 	vmov	d0, sl, fp
 800d734:	aa10      	add	r2, sp, #64	; 0x40
 800d736:	a911      	add	r1, sp, #68	; 0x44
 800d738:	4620      	mov	r0, r4
 800d73a:	f001 facb 	bl	800ecd4 <__d2b>
 800d73e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d742:	ee08 0a10 	vmov	s16, r0
 800d746:	2d00      	cmp	r5, #0
 800d748:	f000 8084 	beq.w	800d854 <_dtoa_r+0x204>
 800d74c:	ee19 3a90 	vmov	r3, s19
 800d750:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d754:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d758:	4656      	mov	r6, sl
 800d75a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d75e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d762:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d766:	4b74      	ldr	r3, [pc, #464]	; (800d938 <_dtoa_r+0x2e8>)
 800d768:	2200      	movs	r2, #0
 800d76a:	4630      	mov	r0, r6
 800d76c:	4639      	mov	r1, r7
 800d76e:	f7f2 fd8b 	bl	8000288 <__aeabi_dsub>
 800d772:	a365      	add	r3, pc, #404	; (adr r3, 800d908 <_dtoa_r+0x2b8>)
 800d774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d778:	f7f2 ff3e 	bl	80005f8 <__aeabi_dmul>
 800d77c:	a364      	add	r3, pc, #400	; (adr r3, 800d910 <_dtoa_r+0x2c0>)
 800d77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d782:	f7f2 fd83 	bl	800028c <__adddf3>
 800d786:	4606      	mov	r6, r0
 800d788:	4628      	mov	r0, r5
 800d78a:	460f      	mov	r7, r1
 800d78c:	f7f2 feca 	bl	8000524 <__aeabi_i2d>
 800d790:	a361      	add	r3, pc, #388	; (adr r3, 800d918 <_dtoa_r+0x2c8>)
 800d792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d796:	f7f2 ff2f 	bl	80005f8 <__aeabi_dmul>
 800d79a:	4602      	mov	r2, r0
 800d79c:	460b      	mov	r3, r1
 800d79e:	4630      	mov	r0, r6
 800d7a0:	4639      	mov	r1, r7
 800d7a2:	f7f2 fd73 	bl	800028c <__adddf3>
 800d7a6:	4606      	mov	r6, r0
 800d7a8:	460f      	mov	r7, r1
 800d7aa:	f7f3 f9d5 	bl	8000b58 <__aeabi_d2iz>
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	9000      	str	r0, [sp, #0]
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	4630      	mov	r0, r6
 800d7b6:	4639      	mov	r1, r7
 800d7b8:	f7f3 f990 	bl	8000adc <__aeabi_dcmplt>
 800d7bc:	b150      	cbz	r0, 800d7d4 <_dtoa_r+0x184>
 800d7be:	9800      	ldr	r0, [sp, #0]
 800d7c0:	f7f2 feb0 	bl	8000524 <__aeabi_i2d>
 800d7c4:	4632      	mov	r2, r6
 800d7c6:	463b      	mov	r3, r7
 800d7c8:	f7f3 f97e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7cc:	b910      	cbnz	r0, 800d7d4 <_dtoa_r+0x184>
 800d7ce:	9b00      	ldr	r3, [sp, #0]
 800d7d0:	3b01      	subs	r3, #1
 800d7d2:	9300      	str	r3, [sp, #0]
 800d7d4:	9b00      	ldr	r3, [sp, #0]
 800d7d6:	2b16      	cmp	r3, #22
 800d7d8:	d85a      	bhi.n	800d890 <_dtoa_r+0x240>
 800d7da:	9a00      	ldr	r2, [sp, #0]
 800d7dc:	4b57      	ldr	r3, [pc, #348]	; (800d93c <_dtoa_r+0x2ec>)
 800d7de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e6:	ec51 0b19 	vmov	r0, r1, d9
 800d7ea:	f7f3 f977 	bl	8000adc <__aeabi_dcmplt>
 800d7ee:	2800      	cmp	r0, #0
 800d7f0:	d050      	beq.n	800d894 <_dtoa_r+0x244>
 800d7f2:	9b00      	ldr	r3, [sp, #0]
 800d7f4:	3b01      	subs	r3, #1
 800d7f6:	9300      	str	r3, [sp, #0]
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800d7fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d7fe:	1b5d      	subs	r5, r3, r5
 800d800:	1e6b      	subs	r3, r5, #1
 800d802:	9305      	str	r3, [sp, #20]
 800d804:	bf45      	ittet	mi
 800d806:	f1c5 0301 	rsbmi	r3, r5, #1
 800d80a:	9304      	strmi	r3, [sp, #16]
 800d80c:	2300      	movpl	r3, #0
 800d80e:	2300      	movmi	r3, #0
 800d810:	bf4c      	ite	mi
 800d812:	9305      	strmi	r3, [sp, #20]
 800d814:	9304      	strpl	r3, [sp, #16]
 800d816:	9b00      	ldr	r3, [sp, #0]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	db3d      	blt.n	800d898 <_dtoa_r+0x248>
 800d81c:	9b05      	ldr	r3, [sp, #20]
 800d81e:	9a00      	ldr	r2, [sp, #0]
 800d820:	920a      	str	r2, [sp, #40]	; 0x28
 800d822:	4413      	add	r3, r2
 800d824:	9305      	str	r3, [sp, #20]
 800d826:	2300      	movs	r3, #0
 800d828:	9307      	str	r3, [sp, #28]
 800d82a:	9b06      	ldr	r3, [sp, #24]
 800d82c:	2b09      	cmp	r3, #9
 800d82e:	f200 8089 	bhi.w	800d944 <_dtoa_r+0x2f4>
 800d832:	2b05      	cmp	r3, #5
 800d834:	bfc4      	itt	gt
 800d836:	3b04      	subgt	r3, #4
 800d838:	9306      	strgt	r3, [sp, #24]
 800d83a:	9b06      	ldr	r3, [sp, #24]
 800d83c:	f1a3 0302 	sub.w	r3, r3, #2
 800d840:	bfcc      	ite	gt
 800d842:	2500      	movgt	r5, #0
 800d844:	2501      	movle	r5, #1
 800d846:	2b03      	cmp	r3, #3
 800d848:	f200 8087 	bhi.w	800d95a <_dtoa_r+0x30a>
 800d84c:	e8df f003 	tbb	[pc, r3]
 800d850:	59383a2d 	.word	0x59383a2d
 800d854:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d858:	441d      	add	r5, r3
 800d85a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d85e:	2b20      	cmp	r3, #32
 800d860:	bfc1      	itttt	gt
 800d862:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d866:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d86a:	fa0b f303 	lslgt.w	r3, fp, r3
 800d86e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d872:	bfda      	itte	le
 800d874:	f1c3 0320 	rsble	r3, r3, #32
 800d878:	fa06 f003 	lslle.w	r0, r6, r3
 800d87c:	4318      	orrgt	r0, r3
 800d87e:	f7f2 fe41 	bl	8000504 <__aeabi_ui2d>
 800d882:	2301      	movs	r3, #1
 800d884:	4606      	mov	r6, r0
 800d886:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d88a:	3d01      	subs	r5, #1
 800d88c:	930e      	str	r3, [sp, #56]	; 0x38
 800d88e:	e76a      	b.n	800d766 <_dtoa_r+0x116>
 800d890:	2301      	movs	r3, #1
 800d892:	e7b2      	b.n	800d7fa <_dtoa_r+0x1aa>
 800d894:	900b      	str	r0, [sp, #44]	; 0x2c
 800d896:	e7b1      	b.n	800d7fc <_dtoa_r+0x1ac>
 800d898:	9b04      	ldr	r3, [sp, #16]
 800d89a:	9a00      	ldr	r2, [sp, #0]
 800d89c:	1a9b      	subs	r3, r3, r2
 800d89e:	9304      	str	r3, [sp, #16]
 800d8a0:	4253      	negs	r3, r2
 800d8a2:	9307      	str	r3, [sp, #28]
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	930a      	str	r3, [sp, #40]	; 0x28
 800d8a8:	e7bf      	b.n	800d82a <_dtoa_r+0x1da>
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	9308      	str	r3, [sp, #32]
 800d8ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	dc55      	bgt.n	800d960 <_dtoa_r+0x310>
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d8ba:	461a      	mov	r2, r3
 800d8bc:	9209      	str	r2, [sp, #36]	; 0x24
 800d8be:	e00c      	b.n	800d8da <_dtoa_r+0x28a>
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	e7f3      	b.n	800d8ac <_dtoa_r+0x25c>
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8c8:	9308      	str	r3, [sp, #32]
 800d8ca:	9b00      	ldr	r3, [sp, #0]
 800d8cc:	4413      	add	r3, r2
 800d8ce:	9302      	str	r3, [sp, #8]
 800d8d0:	3301      	adds	r3, #1
 800d8d2:	2b01      	cmp	r3, #1
 800d8d4:	9303      	str	r3, [sp, #12]
 800d8d6:	bfb8      	it	lt
 800d8d8:	2301      	movlt	r3, #1
 800d8da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d8dc:	2200      	movs	r2, #0
 800d8de:	6042      	str	r2, [r0, #4]
 800d8e0:	2204      	movs	r2, #4
 800d8e2:	f102 0614 	add.w	r6, r2, #20
 800d8e6:	429e      	cmp	r6, r3
 800d8e8:	6841      	ldr	r1, [r0, #4]
 800d8ea:	d93d      	bls.n	800d968 <_dtoa_r+0x318>
 800d8ec:	4620      	mov	r0, r4
 800d8ee:	f000 fec9 	bl	800e684 <_Balloc>
 800d8f2:	9001      	str	r0, [sp, #4]
 800d8f4:	2800      	cmp	r0, #0
 800d8f6:	d13b      	bne.n	800d970 <_dtoa_r+0x320>
 800d8f8:	4b11      	ldr	r3, [pc, #68]	; (800d940 <_dtoa_r+0x2f0>)
 800d8fa:	4602      	mov	r2, r0
 800d8fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d900:	e6c0      	b.n	800d684 <_dtoa_r+0x34>
 800d902:	2301      	movs	r3, #1
 800d904:	e7df      	b.n	800d8c6 <_dtoa_r+0x276>
 800d906:	bf00      	nop
 800d908:	636f4361 	.word	0x636f4361
 800d90c:	3fd287a7 	.word	0x3fd287a7
 800d910:	8b60c8b3 	.word	0x8b60c8b3
 800d914:	3fc68a28 	.word	0x3fc68a28
 800d918:	509f79fb 	.word	0x509f79fb
 800d91c:	3fd34413 	.word	0x3fd34413
 800d920:	0800fe15 	.word	0x0800fe15
 800d924:	0800fe2c 	.word	0x0800fe2c
 800d928:	7ff00000 	.word	0x7ff00000
 800d92c:	0800fe11 	.word	0x0800fe11
 800d930:	0800fe08 	.word	0x0800fe08
 800d934:	0800fde5 	.word	0x0800fde5
 800d938:	3ff80000 	.word	0x3ff80000
 800d93c:	0800ff80 	.word	0x0800ff80
 800d940:	0800fe87 	.word	0x0800fe87
 800d944:	2501      	movs	r5, #1
 800d946:	2300      	movs	r3, #0
 800d948:	9306      	str	r3, [sp, #24]
 800d94a:	9508      	str	r5, [sp, #32]
 800d94c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d950:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d954:	2200      	movs	r2, #0
 800d956:	2312      	movs	r3, #18
 800d958:	e7b0      	b.n	800d8bc <_dtoa_r+0x26c>
 800d95a:	2301      	movs	r3, #1
 800d95c:	9308      	str	r3, [sp, #32]
 800d95e:	e7f5      	b.n	800d94c <_dtoa_r+0x2fc>
 800d960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d962:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d966:	e7b8      	b.n	800d8da <_dtoa_r+0x28a>
 800d968:	3101      	adds	r1, #1
 800d96a:	6041      	str	r1, [r0, #4]
 800d96c:	0052      	lsls	r2, r2, #1
 800d96e:	e7b8      	b.n	800d8e2 <_dtoa_r+0x292>
 800d970:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d972:	9a01      	ldr	r2, [sp, #4]
 800d974:	601a      	str	r2, [r3, #0]
 800d976:	9b03      	ldr	r3, [sp, #12]
 800d978:	2b0e      	cmp	r3, #14
 800d97a:	f200 809d 	bhi.w	800dab8 <_dtoa_r+0x468>
 800d97e:	2d00      	cmp	r5, #0
 800d980:	f000 809a 	beq.w	800dab8 <_dtoa_r+0x468>
 800d984:	9b00      	ldr	r3, [sp, #0]
 800d986:	2b00      	cmp	r3, #0
 800d988:	dd32      	ble.n	800d9f0 <_dtoa_r+0x3a0>
 800d98a:	4ab7      	ldr	r2, [pc, #732]	; (800dc68 <_dtoa_r+0x618>)
 800d98c:	f003 030f 	and.w	r3, r3, #15
 800d990:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d994:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d998:	9b00      	ldr	r3, [sp, #0]
 800d99a:	05d8      	lsls	r0, r3, #23
 800d99c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d9a0:	d516      	bpl.n	800d9d0 <_dtoa_r+0x380>
 800d9a2:	4bb2      	ldr	r3, [pc, #712]	; (800dc6c <_dtoa_r+0x61c>)
 800d9a4:	ec51 0b19 	vmov	r0, r1, d9
 800d9a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d9ac:	f7f2 ff4e 	bl	800084c <__aeabi_ddiv>
 800d9b0:	f007 070f 	and.w	r7, r7, #15
 800d9b4:	4682      	mov	sl, r0
 800d9b6:	468b      	mov	fp, r1
 800d9b8:	2503      	movs	r5, #3
 800d9ba:	4eac      	ldr	r6, [pc, #688]	; (800dc6c <_dtoa_r+0x61c>)
 800d9bc:	b957      	cbnz	r7, 800d9d4 <_dtoa_r+0x384>
 800d9be:	4642      	mov	r2, r8
 800d9c0:	464b      	mov	r3, r9
 800d9c2:	4650      	mov	r0, sl
 800d9c4:	4659      	mov	r1, fp
 800d9c6:	f7f2 ff41 	bl	800084c <__aeabi_ddiv>
 800d9ca:	4682      	mov	sl, r0
 800d9cc:	468b      	mov	fp, r1
 800d9ce:	e028      	b.n	800da22 <_dtoa_r+0x3d2>
 800d9d0:	2502      	movs	r5, #2
 800d9d2:	e7f2      	b.n	800d9ba <_dtoa_r+0x36a>
 800d9d4:	07f9      	lsls	r1, r7, #31
 800d9d6:	d508      	bpl.n	800d9ea <_dtoa_r+0x39a>
 800d9d8:	4640      	mov	r0, r8
 800d9da:	4649      	mov	r1, r9
 800d9dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d9e0:	f7f2 fe0a 	bl	80005f8 <__aeabi_dmul>
 800d9e4:	3501      	adds	r5, #1
 800d9e6:	4680      	mov	r8, r0
 800d9e8:	4689      	mov	r9, r1
 800d9ea:	107f      	asrs	r7, r7, #1
 800d9ec:	3608      	adds	r6, #8
 800d9ee:	e7e5      	b.n	800d9bc <_dtoa_r+0x36c>
 800d9f0:	f000 809b 	beq.w	800db2a <_dtoa_r+0x4da>
 800d9f4:	9b00      	ldr	r3, [sp, #0]
 800d9f6:	4f9d      	ldr	r7, [pc, #628]	; (800dc6c <_dtoa_r+0x61c>)
 800d9f8:	425e      	negs	r6, r3
 800d9fa:	4b9b      	ldr	r3, [pc, #620]	; (800dc68 <_dtoa_r+0x618>)
 800d9fc:	f006 020f 	and.w	r2, r6, #15
 800da00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da08:	ec51 0b19 	vmov	r0, r1, d9
 800da0c:	f7f2 fdf4 	bl	80005f8 <__aeabi_dmul>
 800da10:	1136      	asrs	r6, r6, #4
 800da12:	4682      	mov	sl, r0
 800da14:	468b      	mov	fp, r1
 800da16:	2300      	movs	r3, #0
 800da18:	2502      	movs	r5, #2
 800da1a:	2e00      	cmp	r6, #0
 800da1c:	d17a      	bne.n	800db14 <_dtoa_r+0x4c4>
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d1d3      	bne.n	800d9ca <_dtoa_r+0x37a>
 800da22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da24:	2b00      	cmp	r3, #0
 800da26:	f000 8082 	beq.w	800db2e <_dtoa_r+0x4de>
 800da2a:	4b91      	ldr	r3, [pc, #580]	; (800dc70 <_dtoa_r+0x620>)
 800da2c:	2200      	movs	r2, #0
 800da2e:	4650      	mov	r0, sl
 800da30:	4659      	mov	r1, fp
 800da32:	f7f3 f853 	bl	8000adc <__aeabi_dcmplt>
 800da36:	2800      	cmp	r0, #0
 800da38:	d079      	beq.n	800db2e <_dtoa_r+0x4de>
 800da3a:	9b03      	ldr	r3, [sp, #12]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d076      	beq.n	800db2e <_dtoa_r+0x4de>
 800da40:	9b02      	ldr	r3, [sp, #8]
 800da42:	2b00      	cmp	r3, #0
 800da44:	dd36      	ble.n	800dab4 <_dtoa_r+0x464>
 800da46:	9b00      	ldr	r3, [sp, #0]
 800da48:	4650      	mov	r0, sl
 800da4a:	4659      	mov	r1, fp
 800da4c:	1e5f      	subs	r7, r3, #1
 800da4e:	2200      	movs	r2, #0
 800da50:	4b88      	ldr	r3, [pc, #544]	; (800dc74 <_dtoa_r+0x624>)
 800da52:	f7f2 fdd1 	bl	80005f8 <__aeabi_dmul>
 800da56:	9e02      	ldr	r6, [sp, #8]
 800da58:	4682      	mov	sl, r0
 800da5a:	468b      	mov	fp, r1
 800da5c:	3501      	adds	r5, #1
 800da5e:	4628      	mov	r0, r5
 800da60:	f7f2 fd60 	bl	8000524 <__aeabi_i2d>
 800da64:	4652      	mov	r2, sl
 800da66:	465b      	mov	r3, fp
 800da68:	f7f2 fdc6 	bl	80005f8 <__aeabi_dmul>
 800da6c:	4b82      	ldr	r3, [pc, #520]	; (800dc78 <_dtoa_r+0x628>)
 800da6e:	2200      	movs	r2, #0
 800da70:	f7f2 fc0c 	bl	800028c <__adddf3>
 800da74:	46d0      	mov	r8, sl
 800da76:	46d9      	mov	r9, fp
 800da78:	4682      	mov	sl, r0
 800da7a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800da7e:	2e00      	cmp	r6, #0
 800da80:	d158      	bne.n	800db34 <_dtoa_r+0x4e4>
 800da82:	4b7e      	ldr	r3, [pc, #504]	; (800dc7c <_dtoa_r+0x62c>)
 800da84:	2200      	movs	r2, #0
 800da86:	4640      	mov	r0, r8
 800da88:	4649      	mov	r1, r9
 800da8a:	f7f2 fbfd 	bl	8000288 <__aeabi_dsub>
 800da8e:	4652      	mov	r2, sl
 800da90:	465b      	mov	r3, fp
 800da92:	4680      	mov	r8, r0
 800da94:	4689      	mov	r9, r1
 800da96:	f7f3 f83f 	bl	8000b18 <__aeabi_dcmpgt>
 800da9a:	2800      	cmp	r0, #0
 800da9c:	f040 8295 	bne.w	800dfca <_dtoa_r+0x97a>
 800daa0:	4652      	mov	r2, sl
 800daa2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800daa6:	4640      	mov	r0, r8
 800daa8:	4649      	mov	r1, r9
 800daaa:	f7f3 f817 	bl	8000adc <__aeabi_dcmplt>
 800daae:	2800      	cmp	r0, #0
 800dab0:	f040 8289 	bne.w	800dfc6 <_dtoa_r+0x976>
 800dab4:	ec5b ab19 	vmov	sl, fp, d9
 800dab8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800daba:	2b00      	cmp	r3, #0
 800dabc:	f2c0 8148 	blt.w	800dd50 <_dtoa_r+0x700>
 800dac0:	9a00      	ldr	r2, [sp, #0]
 800dac2:	2a0e      	cmp	r2, #14
 800dac4:	f300 8144 	bgt.w	800dd50 <_dtoa_r+0x700>
 800dac8:	4b67      	ldr	r3, [pc, #412]	; (800dc68 <_dtoa_r+0x618>)
 800daca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dace:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	f280 80d5 	bge.w	800dc84 <_dtoa_r+0x634>
 800dada:	9b03      	ldr	r3, [sp, #12]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	f300 80d1 	bgt.w	800dc84 <_dtoa_r+0x634>
 800dae2:	f040 826f 	bne.w	800dfc4 <_dtoa_r+0x974>
 800dae6:	4b65      	ldr	r3, [pc, #404]	; (800dc7c <_dtoa_r+0x62c>)
 800dae8:	2200      	movs	r2, #0
 800daea:	4640      	mov	r0, r8
 800daec:	4649      	mov	r1, r9
 800daee:	f7f2 fd83 	bl	80005f8 <__aeabi_dmul>
 800daf2:	4652      	mov	r2, sl
 800daf4:	465b      	mov	r3, fp
 800daf6:	f7f3 f805 	bl	8000b04 <__aeabi_dcmpge>
 800dafa:	9e03      	ldr	r6, [sp, #12]
 800dafc:	4637      	mov	r7, r6
 800dafe:	2800      	cmp	r0, #0
 800db00:	f040 8245 	bne.w	800df8e <_dtoa_r+0x93e>
 800db04:	9d01      	ldr	r5, [sp, #4]
 800db06:	2331      	movs	r3, #49	; 0x31
 800db08:	f805 3b01 	strb.w	r3, [r5], #1
 800db0c:	9b00      	ldr	r3, [sp, #0]
 800db0e:	3301      	adds	r3, #1
 800db10:	9300      	str	r3, [sp, #0]
 800db12:	e240      	b.n	800df96 <_dtoa_r+0x946>
 800db14:	07f2      	lsls	r2, r6, #31
 800db16:	d505      	bpl.n	800db24 <_dtoa_r+0x4d4>
 800db18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db1c:	f7f2 fd6c 	bl	80005f8 <__aeabi_dmul>
 800db20:	3501      	adds	r5, #1
 800db22:	2301      	movs	r3, #1
 800db24:	1076      	asrs	r6, r6, #1
 800db26:	3708      	adds	r7, #8
 800db28:	e777      	b.n	800da1a <_dtoa_r+0x3ca>
 800db2a:	2502      	movs	r5, #2
 800db2c:	e779      	b.n	800da22 <_dtoa_r+0x3d2>
 800db2e:	9f00      	ldr	r7, [sp, #0]
 800db30:	9e03      	ldr	r6, [sp, #12]
 800db32:	e794      	b.n	800da5e <_dtoa_r+0x40e>
 800db34:	9901      	ldr	r1, [sp, #4]
 800db36:	4b4c      	ldr	r3, [pc, #304]	; (800dc68 <_dtoa_r+0x618>)
 800db38:	4431      	add	r1, r6
 800db3a:	910d      	str	r1, [sp, #52]	; 0x34
 800db3c:	9908      	ldr	r1, [sp, #32]
 800db3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800db42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800db46:	2900      	cmp	r1, #0
 800db48:	d043      	beq.n	800dbd2 <_dtoa_r+0x582>
 800db4a:	494d      	ldr	r1, [pc, #308]	; (800dc80 <_dtoa_r+0x630>)
 800db4c:	2000      	movs	r0, #0
 800db4e:	f7f2 fe7d 	bl	800084c <__aeabi_ddiv>
 800db52:	4652      	mov	r2, sl
 800db54:	465b      	mov	r3, fp
 800db56:	f7f2 fb97 	bl	8000288 <__aeabi_dsub>
 800db5a:	9d01      	ldr	r5, [sp, #4]
 800db5c:	4682      	mov	sl, r0
 800db5e:	468b      	mov	fp, r1
 800db60:	4649      	mov	r1, r9
 800db62:	4640      	mov	r0, r8
 800db64:	f7f2 fff8 	bl	8000b58 <__aeabi_d2iz>
 800db68:	4606      	mov	r6, r0
 800db6a:	f7f2 fcdb 	bl	8000524 <__aeabi_i2d>
 800db6e:	4602      	mov	r2, r0
 800db70:	460b      	mov	r3, r1
 800db72:	4640      	mov	r0, r8
 800db74:	4649      	mov	r1, r9
 800db76:	f7f2 fb87 	bl	8000288 <__aeabi_dsub>
 800db7a:	3630      	adds	r6, #48	; 0x30
 800db7c:	f805 6b01 	strb.w	r6, [r5], #1
 800db80:	4652      	mov	r2, sl
 800db82:	465b      	mov	r3, fp
 800db84:	4680      	mov	r8, r0
 800db86:	4689      	mov	r9, r1
 800db88:	f7f2 ffa8 	bl	8000adc <__aeabi_dcmplt>
 800db8c:	2800      	cmp	r0, #0
 800db8e:	d163      	bne.n	800dc58 <_dtoa_r+0x608>
 800db90:	4642      	mov	r2, r8
 800db92:	464b      	mov	r3, r9
 800db94:	4936      	ldr	r1, [pc, #216]	; (800dc70 <_dtoa_r+0x620>)
 800db96:	2000      	movs	r0, #0
 800db98:	f7f2 fb76 	bl	8000288 <__aeabi_dsub>
 800db9c:	4652      	mov	r2, sl
 800db9e:	465b      	mov	r3, fp
 800dba0:	f7f2 ff9c 	bl	8000adc <__aeabi_dcmplt>
 800dba4:	2800      	cmp	r0, #0
 800dba6:	f040 80b5 	bne.w	800dd14 <_dtoa_r+0x6c4>
 800dbaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dbac:	429d      	cmp	r5, r3
 800dbae:	d081      	beq.n	800dab4 <_dtoa_r+0x464>
 800dbb0:	4b30      	ldr	r3, [pc, #192]	; (800dc74 <_dtoa_r+0x624>)
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	4650      	mov	r0, sl
 800dbb6:	4659      	mov	r1, fp
 800dbb8:	f7f2 fd1e 	bl	80005f8 <__aeabi_dmul>
 800dbbc:	4b2d      	ldr	r3, [pc, #180]	; (800dc74 <_dtoa_r+0x624>)
 800dbbe:	4682      	mov	sl, r0
 800dbc0:	468b      	mov	fp, r1
 800dbc2:	4640      	mov	r0, r8
 800dbc4:	4649      	mov	r1, r9
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	f7f2 fd16 	bl	80005f8 <__aeabi_dmul>
 800dbcc:	4680      	mov	r8, r0
 800dbce:	4689      	mov	r9, r1
 800dbd0:	e7c6      	b.n	800db60 <_dtoa_r+0x510>
 800dbd2:	4650      	mov	r0, sl
 800dbd4:	4659      	mov	r1, fp
 800dbd6:	f7f2 fd0f 	bl	80005f8 <__aeabi_dmul>
 800dbda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dbdc:	9d01      	ldr	r5, [sp, #4]
 800dbde:	930f      	str	r3, [sp, #60]	; 0x3c
 800dbe0:	4682      	mov	sl, r0
 800dbe2:	468b      	mov	fp, r1
 800dbe4:	4649      	mov	r1, r9
 800dbe6:	4640      	mov	r0, r8
 800dbe8:	f7f2 ffb6 	bl	8000b58 <__aeabi_d2iz>
 800dbec:	4606      	mov	r6, r0
 800dbee:	f7f2 fc99 	bl	8000524 <__aeabi_i2d>
 800dbf2:	3630      	adds	r6, #48	; 0x30
 800dbf4:	4602      	mov	r2, r0
 800dbf6:	460b      	mov	r3, r1
 800dbf8:	4640      	mov	r0, r8
 800dbfa:	4649      	mov	r1, r9
 800dbfc:	f7f2 fb44 	bl	8000288 <__aeabi_dsub>
 800dc00:	f805 6b01 	strb.w	r6, [r5], #1
 800dc04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc06:	429d      	cmp	r5, r3
 800dc08:	4680      	mov	r8, r0
 800dc0a:	4689      	mov	r9, r1
 800dc0c:	f04f 0200 	mov.w	r2, #0
 800dc10:	d124      	bne.n	800dc5c <_dtoa_r+0x60c>
 800dc12:	4b1b      	ldr	r3, [pc, #108]	; (800dc80 <_dtoa_r+0x630>)
 800dc14:	4650      	mov	r0, sl
 800dc16:	4659      	mov	r1, fp
 800dc18:	f7f2 fb38 	bl	800028c <__adddf3>
 800dc1c:	4602      	mov	r2, r0
 800dc1e:	460b      	mov	r3, r1
 800dc20:	4640      	mov	r0, r8
 800dc22:	4649      	mov	r1, r9
 800dc24:	f7f2 ff78 	bl	8000b18 <__aeabi_dcmpgt>
 800dc28:	2800      	cmp	r0, #0
 800dc2a:	d173      	bne.n	800dd14 <_dtoa_r+0x6c4>
 800dc2c:	4652      	mov	r2, sl
 800dc2e:	465b      	mov	r3, fp
 800dc30:	4913      	ldr	r1, [pc, #76]	; (800dc80 <_dtoa_r+0x630>)
 800dc32:	2000      	movs	r0, #0
 800dc34:	f7f2 fb28 	bl	8000288 <__aeabi_dsub>
 800dc38:	4602      	mov	r2, r0
 800dc3a:	460b      	mov	r3, r1
 800dc3c:	4640      	mov	r0, r8
 800dc3e:	4649      	mov	r1, r9
 800dc40:	f7f2 ff4c 	bl	8000adc <__aeabi_dcmplt>
 800dc44:	2800      	cmp	r0, #0
 800dc46:	f43f af35 	beq.w	800dab4 <_dtoa_r+0x464>
 800dc4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dc4c:	1e6b      	subs	r3, r5, #1
 800dc4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc50:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dc54:	2b30      	cmp	r3, #48	; 0x30
 800dc56:	d0f8      	beq.n	800dc4a <_dtoa_r+0x5fa>
 800dc58:	9700      	str	r7, [sp, #0]
 800dc5a:	e049      	b.n	800dcf0 <_dtoa_r+0x6a0>
 800dc5c:	4b05      	ldr	r3, [pc, #20]	; (800dc74 <_dtoa_r+0x624>)
 800dc5e:	f7f2 fccb 	bl	80005f8 <__aeabi_dmul>
 800dc62:	4680      	mov	r8, r0
 800dc64:	4689      	mov	r9, r1
 800dc66:	e7bd      	b.n	800dbe4 <_dtoa_r+0x594>
 800dc68:	0800ff80 	.word	0x0800ff80
 800dc6c:	0800ff58 	.word	0x0800ff58
 800dc70:	3ff00000 	.word	0x3ff00000
 800dc74:	40240000 	.word	0x40240000
 800dc78:	401c0000 	.word	0x401c0000
 800dc7c:	40140000 	.word	0x40140000
 800dc80:	3fe00000 	.word	0x3fe00000
 800dc84:	9d01      	ldr	r5, [sp, #4]
 800dc86:	4656      	mov	r6, sl
 800dc88:	465f      	mov	r7, fp
 800dc8a:	4642      	mov	r2, r8
 800dc8c:	464b      	mov	r3, r9
 800dc8e:	4630      	mov	r0, r6
 800dc90:	4639      	mov	r1, r7
 800dc92:	f7f2 fddb 	bl	800084c <__aeabi_ddiv>
 800dc96:	f7f2 ff5f 	bl	8000b58 <__aeabi_d2iz>
 800dc9a:	4682      	mov	sl, r0
 800dc9c:	f7f2 fc42 	bl	8000524 <__aeabi_i2d>
 800dca0:	4642      	mov	r2, r8
 800dca2:	464b      	mov	r3, r9
 800dca4:	f7f2 fca8 	bl	80005f8 <__aeabi_dmul>
 800dca8:	4602      	mov	r2, r0
 800dcaa:	460b      	mov	r3, r1
 800dcac:	4630      	mov	r0, r6
 800dcae:	4639      	mov	r1, r7
 800dcb0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800dcb4:	f7f2 fae8 	bl	8000288 <__aeabi_dsub>
 800dcb8:	f805 6b01 	strb.w	r6, [r5], #1
 800dcbc:	9e01      	ldr	r6, [sp, #4]
 800dcbe:	9f03      	ldr	r7, [sp, #12]
 800dcc0:	1bae      	subs	r6, r5, r6
 800dcc2:	42b7      	cmp	r7, r6
 800dcc4:	4602      	mov	r2, r0
 800dcc6:	460b      	mov	r3, r1
 800dcc8:	d135      	bne.n	800dd36 <_dtoa_r+0x6e6>
 800dcca:	f7f2 fadf 	bl	800028c <__adddf3>
 800dcce:	4642      	mov	r2, r8
 800dcd0:	464b      	mov	r3, r9
 800dcd2:	4606      	mov	r6, r0
 800dcd4:	460f      	mov	r7, r1
 800dcd6:	f7f2 ff1f 	bl	8000b18 <__aeabi_dcmpgt>
 800dcda:	b9d0      	cbnz	r0, 800dd12 <_dtoa_r+0x6c2>
 800dcdc:	4642      	mov	r2, r8
 800dcde:	464b      	mov	r3, r9
 800dce0:	4630      	mov	r0, r6
 800dce2:	4639      	mov	r1, r7
 800dce4:	f7f2 fef0 	bl	8000ac8 <__aeabi_dcmpeq>
 800dce8:	b110      	cbz	r0, 800dcf0 <_dtoa_r+0x6a0>
 800dcea:	f01a 0f01 	tst.w	sl, #1
 800dcee:	d110      	bne.n	800dd12 <_dtoa_r+0x6c2>
 800dcf0:	4620      	mov	r0, r4
 800dcf2:	ee18 1a10 	vmov	r1, s16
 800dcf6:	f000 fd05 	bl	800e704 <_Bfree>
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	9800      	ldr	r0, [sp, #0]
 800dcfe:	702b      	strb	r3, [r5, #0]
 800dd00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd02:	3001      	adds	r0, #1
 800dd04:	6018      	str	r0, [r3, #0]
 800dd06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	f43f acf1 	beq.w	800d6f0 <_dtoa_r+0xa0>
 800dd0e:	601d      	str	r5, [r3, #0]
 800dd10:	e4ee      	b.n	800d6f0 <_dtoa_r+0xa0>
 800dd12:	9f00      	ldr	r7, [sp, #0]
 800dd14:	462b      	mov	r3, r5
 800dd16:	461d      	mov	r5, r3
 800dd18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dd1c:	2a39      	cmp	r2, #57	; 0x39
 800dd1e:	d106      	bne.n	800dd2e <_dtoa_r+0x6de>
 800dd20:	9a01      	ldr	r2, [sp, #4]
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d1f7      	bne.n	800dd16 <_dtoa_r+0x6c6>
 800dd26:	9901      	ldr	r1, [sp, #4]
 800dd28:	2230      	movs	r2, #48	; 0x30
 800dd2a:	3701      	adds	r7, #1
 800dd2c:	700a      	strb	r2, [r1, #0]
 800dd2e:	781a      	ldrb	r2, [r3, #0]
 800dd30:	3201      	adds	r2, #1
 800dd32:	701a      	strb	r2, [r3, #0]
 800dd34:	e790      	b.n	800dc58 <_dtoa_r+0x608>
 800dd36:	4ba6      	ldr	r3, [pc, #664]	; (800dfd0 <_dtoa_r+0x980>)
 800dd38:	2200      	movs	r2, #0
 800dd3a:	f7f2 fc5d 	bl	80005f8 <__aeabi_dmul>
 800dd3e:	2200      	movs	r2, #0
 800dd40:	2300      	movs	r3, #0
 800dd42:	4606      	mov	r6, r0
 800dd44:	460f      	mov	r7, r1
 800dd46:	f7f2 febf 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd4a:	2800      	cmp	r0, #0
 800dd4c:	d09d      	beq.n	800dc8a <_dtoa_r+0x63a>
 800dd4e:	e7cf      	b.n	800dcf0 <_dtoa_r+0x6a0>
 800dd50:	9a08      	ldr	r2, [sp, #32]
 800dd52:	2a00      	cmp	r2, #0
 800dd54:	f000 80d7 	beq.w	800df06 <_dtoa_r+0x8b6>
 800dd58:	9a06      	ldr	r2, [sp, #24]
 800dd5a:	2a01      	cmp	r2, #1
 800dd5c:	f300 80ba 	bgt.w	800ded4 <_dtoa_r+0x884>
 800dd60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dd62:	2a00      	cmp	r2, #0
 800dd64:	f000 80b2 	beq.w	800decc <_dtoa_r+0x87c>
 800dd68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dd6c:	9e07      	ldr	r6, [sp, #28]
 800dd6e:	9d04      	ldr	r5, [sp, #16]
 800dd70:	9a04      	ldr	r2, [sp, #16]
 800dd72:	441a      	add	r2, r3
 800dd74:	9204      	str	r2, [sp, #16]
 800dd76:	9a05      	ldr	r2, [sp, #20]
 800dd78:	2101      	movs	r1, #1
 800dd7a:	441a      	add	r2, r3
 800dd7c:	4620      	mov	r0, r4
 800dd7e:	9205      	str	r2, [sp, #20]
 800dd80:	f000 fd78 	bl	800e874 <__i2b>
 800dd84:	4607      	mov	r7, r0
 800dd86:	2d00      	cmp	r5, #0
 800dd88:	dd0c      	ble.n	800dda4 <_dtoa_r+0x754>
 800dd8a:	9b05      	ldr	r3, [sp, #20]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	dd09      	ble.n	800dda4 <_dtoa_r+0x754>
 800dd90:	42ab      	cmp	r3, r5
 800dd92:	9a04      	ldr	r2, [sp, #16]
 800dd94:	bfa8      	it	ge
 800dd96:	462b      	movge	r3, r5
 800dd98:	1ad2      	subs	r2, r2, r3
 800dd9a:	9204      	str	r2, [sp, #16]
 800dd9c:	9a05      	ldr	r2, [sp, #20]
 800dd9e:	1aed      	subs	r5, r5, r3
 800dda0:	1ad3      	subs	r3, r2, r3
 800dda2:	9305      	str	r3, [sp, #20]
 800dda4:	9b07      	ldr	r3, [sp, #28]
 800dda6:	b31b      	cbz	r3, 800ddf0 <_dtoa_r+0x7a0>
 800dda8:	9b08      	ldr	r3, [sp, #32]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	f000 80af 	beq.w	800df0e <_dtoa_r+0x8be>
 800ddb0:	2e00      	cmp	r6, #0
 800ddb2:	dd13      	ble.n	800dddc <_dtoa_r+0x78c>
 800ddb4:	4639      	mov	r1, r7
 800ddb6:	4632      	mov	r2, r6
 800ddb8:	4620      	mov	r0, r4
 800ddba:	f000 fe1b 	bl	800e9f4 <__pow5mult>
 800ddbe:	ee18 2a10 	vmov	r2, s16
 800ddc2:	4601      	mov	r1, r0
 800ddc4:	4607      	mov	r7, r0
 800ddc6:	4620      	mov	r0, r4
 800ddc8:	f000 fd6a 	bl	800e8a0 <__multiply>
 800ddcc:	ee18 1a10 	vmov	r1, s16
 800ddd0:	4680      	mov	r8, r0
 800ddd2:	4620      	mov	r0, r4
 800ddd4:	f000 fc96 	bl	800e704 <_Bfree>
 800ddd8:	ee08 8a10 	vmov	s16, r8
 800dddc:	9b07      	ldr	r3, [sp, #28]
 800ddde:	1b9a      	subs	r2, r3, r6
 800dde0:	d006      	beq.n	800ddf0 <_dtoa_r+0x7a0>
 800dde2:	ee18 1a10 	vmov	r1, s16
 800dde6:	4620      	mov	r0, r4
 800dde8:	f000 fe04 	bl	800e9f4 <__pow5mult>
 800ddec:	ee08 0a10 	vmov	s16, r0
 800ddf0:	2101      	movs	r1, #1
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	f000 fd3e 	bl	800e874 <__i2b>
 800ddf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	4606      	mov	r6, r0
 800ddfe:	f340 8088 	ble.w	800df12 <_dtoa_r+0x8c2>
 800de02:	461a      	mov	r2, r3
 800de04:	4601      	mov	r1, r0
 800de06:	4620      	mov	r0, r4
 800de08:	f000 fdf4 	bl	800e9f4 <__pow5mult>
 800de0c:	9b06      	ldr	r3, [sp, #24]
 800de0e:	2b01      	cmp	r3, #1
 800de10:	4606      	mov	r6, r0
 800de12:	f340 8081 	ble.w	800df18 <_dtoa_r+0x8c8>
 800de16:	f04f 0800 	mov.w	r8, #0
 800de1a:	6933      	ldr	r3, [r6, #16]
 800de1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800de20:	6918      	ldr	r0, [r3, #16]
 800de22:	f000 fcd7 	bl	800e7d4 <__hi0bits>
 800de26:	f1c0 0020 	rsb	r0, r0, #32
 800de2a:	9b05      	ldr	r3, [sp, #20]
 800de2c:	4418      	add	r0, r3
 800de2e:	f010 001f 	ands.w	r0, r0, #31
 800de32:	f000 8092 	beq.w	800df5a <_dtoa_r+0x90a>
 800de36:	f1c0 0320 	rsb	r3, r0, #32
 800de3a:	2b04      	cmp	r3, #4
 800de3c:	f340 808a 	ble.w	800df54 <_dtoa_r+0x904>
 800de40:	f1c0 001c 	rsb	r0, r0, #28
 800de44:	9b04      	ldr	r3, [sp, #16]
 800de46:	4403      	add	r3, r0
 800de48:	9304      	str	r3, [sp, #16]
 800de4a:	9b05      	ldr	r3, [sp, #20]
 800de4c:	4403      	add	r3, r0
 800de4e:	4405      	add	r5, r0
 800de50:	9305      	str	r3, [sp, #20]
 800de52:	9b04      	ldr	r3, [sp, #16]
 800de54:	2b00      	cmp	r3, #0
 800de56:	dd07      	ble.n	800de68 <_dtoa_r+0x818>
 800de58:	ee18 1a10 	vmov	r1, s16
 800de5c:	461a      	mov	r2, r3
 800de5e:	4620      	mov	r0, r4
 800de60:	f000 fe22 	bl	800eaa8 <__lshift>
 800de64:	ee08 0a10 	vmov	s16, r0
 800de68:	9b05      	ldr	r3, [sp, #20]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	dd05      	ble.n	800de7a <_dtoa_r+0x82a>
 800de6e:	4631      	mov	r1, r6
 800de70:	461a      	mov	r2, r3
 800de72:	4620      	mov	r0, r4
 800de74:	f000 fe18 	bl	800eaa8 <__lshift>
 800de78:	4606      	mov	r6, r0
 800de7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d06e      	beq.n	800df5e <_dtoa_r+0x90e>
 800de80:	ee18 0a10 	vmov	r0, s16
 800de84:	4631      	mov	r1, r6
 800de86:	f000 fe7f 	bl	800eb88 <__mcmp>
 800de8a:	2800      	cmp	r0, #0
 800de8c:	da67      	bge.n	800df5e <_dtoa_r+0x90e>
 800de8e:	9b00      	ldr	r3, [sp, #0]
 800de90:	3b01      	subs	r3, #1
 800de92:	ee18 1a10 	vmov	r1, s16
 800de96:	9300      	str	r3, [sp, #0]
 800de98:	220a      	movs	r2, #10
 800de9a:	2300      	movs	r3, #0
 800de9c:	4620      	mov	r0, r4
 800de9e:	f000 fc53 	bl	800e748 <__multadd>
 800dea2:	9b08      	ldr	r3, [sp, #32]
 800dea4:	ee08 0a10 	vmov	s16, r0
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	f000 81b1 	beq.w	800e210 <_dtoa_r+0xbc0>
 800deae:	2300      	movs	r3, #0
 800deb0:	4639      	mov	r1, r7
 800deb2:	220a      	movs	r2, #10
 800deb4:	4620      	mov	r0, r4
 800deb6:	f000 fc47 	bl	800e748 <__multadd>
 800deba:	9b02      	ldr	r3, [sp, #8]
 800debc:	2b00      	cmp	r3, #0
 800debe:	4607      	mov	r7, r0
 800dec0:	f300 808e 	bgt.w	800dfe0 <_dtoa_r+0x990>
 800dec4:	9b06      	ldr	r3, [sp, #24]
 800dec6:	2b02      	cmp	r3, #2
 800dec8:	dc51      	bgt.n	800df6e <_dtoa_r+0x91e>
 800deca:	e089      	b.n	800dfe0 <_dtoa_r+0x990>
 800decc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dece:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ded2:	e74b      	b.n	800dd6c <_dtoa_r+0x71c>
 800ded4:	9b03      	ldr	r3, [sp, #12]
 800ded6:	1e5e      	subs	r6, r3, #1
 800ded8:	9b07      	ldr	r3, [sp, #28]
 800deda:	42b3      	cmp	r3, r6
 800dedc:	bfbf      	itttt	lt
 800dede:	9b07      	ldrlt	r3, [sp, #28]
 800dee0:	9607      	strlt	r6, [sp, #28]
 800dee2:	1af2      	sublt	r2, r6, r3
 800dee4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800dee6:	bfb6      	itet	lt
 800dee8:	189b      	addlt	r3, r3, r2
 800deea:	1b9e      	subge	r6, r3, r6
 800deec:	930a      	strlt	r3, [sp, #40]	; 0x28
 800deee:	9b03      	ldr	r3, [sp, #12]
 800def0:	bfb8      	it	lt
 800def2:	2600      	movlt	r6, #0
 800def4:	2b00      	cmp	r3, #0
 800def6:	bfb7      	itett	lt
 800def8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800defc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800df00:	1a9d      	sublt	r5, r3, r2
 800df02:	2300      	movlt	r3, #0
 800df04:	e734      	b.n	800dd70 <_dtoa_r+0x720>
 800df06:	9e07      	ldr	r6, [sp, #28]
 800df08:	9d04      	ldr	r5, [sp, #16]
 800df0a:	9f08      	ldr	r7, [sp, #32]
 800df0c:	e73b      	b.n	800dd86 <_dtoa_r+0x736>
 800df0e:	9a07      	ldr	r2, [sp, #28]
 800df10:	e767      	b.n	800dde2 <_dtoa_r+0x792>
 800df12:	9b06      	ldr	r3, [sp, #24]
 800df14:	2b01      	cmp	r3, #1
 800df16:	dc18      	bgt.n	800df4a <_dtoa_r+0x8fa>
 800df18:	f1ba 0f00 	cmp.w	sl, #0
 800df1c:	d115      	bne.n	800df4a <_dtoa_r+0x8fa>
 800df1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800df22:	b993      	cbnz	r3, 800df4a <_dtoa_r+0x8fa>
 800df24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800df28:	0d1b      	lsrs	r3, r3, #20
 800df2a:	051b      	lsls	r3, r3, #20
 800df2c:	b183      	cbz	r3, 800df50 <_dtoa_r+0x900>
 800df2e:	9b04      	ldr	r3, [sp, #16]
 800df30:	3301      	adds	r3, #1
 800df32:	9304      	str	r3, [sp, #16]
 800df34:	9b05      	ldr	r3, [sp, #20]
 800df36:	3301      	adds	r3, #1
 800df38:	9305      	str	r3, [sp, #20]
 800df3a:	f04f 0801 	mov.w	r8, #1
 800df3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df40:	2b00      	cmp	r3, #0
 800df42:	f47f af6a 	bne.w	800de1a <_dtoa_r+0x7ca>
 800df46:	2001      	movs	r0, #1
 800df48:	e76f      	b.n	800de2a <_dtoa_r+0x7da>
 800df4a:	f04f 0800 	mov.w	r8, #0
 800df4e:	e7f6      	b.n	800df3e <_dtoa_r+0x8ee>
 800df50:	4698      	mov	r8, r3
 800df52:	e7f4      	b.n	800df3e <_dtoa_r+0x8ee>
 800df54:	f43f af7d 	beq.w	800de52 <_dtoa_r+0x802>
 800df58:	4618      	mov	r0, r3
 800df5a:	301c      	adds	r0, #28
 800df5c:	e772      	b.n	800de44 <_dtoa_r+0x7f4>
 800df5e:	9b03      	ldr	r3, [sp, #12]
 800df60:	2b00      	cmp	r3, #0
 800df62:	dc37      	bgt.n	800dfd4 <_dtoa_r+0x984>
 800df64:	9b06      	ldr	r3, [sp, #24]
 800df66:	2b02      	cmp	r3, #2
 800df68:	dd34      	ble.n	800dfd4 <_dtoa_r+0x984>
 800df6a:	9b03      	ldr	r3, [sp, #12]
 800df6c:	9302      	str	r3, [sp, #8]
 800df6e:	9b02      	ldr	r3, [sp, #8]
 800df70:	b96b      	cbnz	r3, 800df8e <_dtoa_r+0x93e>
 800df72:	4631      	mov	r1, r6
 800df74:	2205      	movs	r2, #5
 800df76:	4620      	mov	r0, r4
 800df78:	f000 fbe6 	bl	800e748 <__multadd>
 800df7c:	4601      	mov	r1, r0
 800df7e:	4606      	mov	r6, r0
 800df80:	ee18 0a10 	vmov	r0, s16
 800df84:	f000 fe00 	bl	800eb88 <__mcmp>
 800df88:	2800      	cmp	r0, #0
 800df8a:	f73f adbb 	bgt.w	800db04 <_dtoa_r+0x4b4>
 800df8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df90:	9d01      	ldr	r5, [sp, #4]
 800df92:	43db      	mvns	r3, r3
 800df94:	9300      	str	r3, [sp, #0]
 800df96:	f04f 0800 	mov.w	r8, #0
 800df9a:	4631      	mov	r1, r6
 800df9c:	4620      	mov	r0, r4
 800df9e:	f000 fbb1 	bl	800e704 <_Bfree>
 800dfa2:	2f00      	cmp	r7, #0
 800dfa4:	f43f aea4 	beq.w	800dcf0 <_dtoa_r+0x6a0>
 800dfa8:	f1b8 0f00 	cmp.w	r8, #0
 800dfac:	d005      	beq.n	800dfba <_dtoa_r+0x96a>
 800dfae:	45b8      	cmp	r8, r7
 800dfb0:	d003      	beq.n	800dfba <_dtoa_r+0x96a>
 800dfb2:	4641      	mov	r1, r8
 800dfb4:	4620      	mov	r0, r4
 800dfb6:	f000 fba5 	bl	800e704 <_Bfree>
 800dfba:	4639      	mov	r1, r7
 800dfbc:	4620      	mov	r0, r4
 800dfbe:	f000 fba1 	bl	800e704 <_Bfree>
 800dfc2:	e695      	b.n	800dcf0 <_dtoa_r+0x6a0>
 800dfc4:	2600      	movs	r6, #0
 800dfc6:	4637      	mov	r7, r6
 800dfc8:	e7e1      	b.n	800df8e <_dtoa_r+0x93e>
 800dfca:	9700      	str	r7, [sp, #0]
 800dfcc:	4637      	mov	r7, r6
 800dfce:	e599      	b.n	800db04 <_dtoa_r+0x4b4>
 800dfd0:	40240000 	.word	0x40240000
 800dfd4:	9b08      	ldr	r3, [sp, #32]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	f000 80ca 	beq.w	800e170 <_dtoa_r+0xb20>
 800dfdc:	9b03      	ldr	r3, [sp, #12]
 800dfde:	9302      	str	r3, [sp, #8]
 800dfe0:	2d00      	cmp	r5, #0
 800dfe2:	dd05      	ble.n	800dff0 <_dtoa_r+0x9a0>
 800dfe4:	4639      	mov	r1, r7
 800dfe6:	462a      	mov	r2, r5
 800dfe8:	4620      	mov	r0, r4
 800dfea:	f000 fd5d 	bl	800eaa8 <__lshift>
 800dfee:	4607      	mov	r7, r0
 800dff0:	f1b8 0f00 	cmp.w	r8, #0
 800dff4:	d05b      	beq.n	800e0ae <_dtoa_r+0xa5e>
 800dff6:	6879      	ldr	r1, [r7, #4]
 800dff8:	4620      	mov	r0, r4
 800dffa:	f000 fb43 	bl	800e684 <_Balloc>
 800dffe:	4605      	mov	r5, r0
 800e000:	b928      	cbnz	r0, 800e00e <_dtoa_r+0x9be>
 800e002:	4b87      	ldr	r3, [pc, #540]	; (800e220 <_dtoa_r+0xbd0>)
 800e004:	4602      	mov	r2, r0
 800e006:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e00a:	f7ff bb3b 	b.w	800d684 <_dtoa_r+0x34>
 800e00e:	693a      	ldr	r2, [r7, #16]
 800e010:	3202      	adds	r2, #2
 800e012:	0092      	lsls	r2, r2, #2
 800e014:	f107 010c 	add.w	r1, r7, #12
 800e018:	300c      	adds	r0, #12
 800e01a:	f7fe fc6b 	bl	800c8f4 <memcpy>
 800e01e:	2201      	movs	r2, #1
 800e020:	4629      	mov	r1, r5
 800e022:	4620      	mov	r0, r4
 800e024:	f000 fd40 	bl	800eaa8 <__lshift>
 800e028:	9b01      	ldr	r3, [sp, #4]
 800e02a:	f103 0901 	add.w	r9, r3, #1
 800e02e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e032:	4413      	add	r3, r2
 800e034:	9305      	str	r3, [sp, #20]
 800e036:	f00a 0301 	and.w	r3, sl, #1
 800e03a:	46b8      	mov	r8, r7
 800e03c:	9304      	str	r3, [sp, #16]
 800e03e:	4607      	mov	r7, r0
 800e040:	4631      	mov	r1, r6
 800e042:	ee18 0a10 	vmov	r0, s16
 800e046:	f7ff fa77 	bl	800d538 <quorem>
 800e04a:	4641      	mov	r1, r8
 800e04c:	9002      	str	r0, [sp, #8]
 800e04e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e052:	ee18 0a10 	vmov	r0, s16
 800e056:	f000 fd97 	bl	800eb88 <__mcmp>
 800e05a:	463a      	mov	r2, r7
 800e05c:	9003      	str	r0, [sp, #12]
 800e05e:	4631      	mov	r1, r6
 800e060:	4620      	mov	r0, r4
 800e062:	f000 fdad 	bl	800ebc0 <__mdiff>
 800e066:	68c2      	ldr	r2, [r0, #12]
 800e068:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800e06c:	4605      	mov	r5, r0
 800e06e:	bb02      	cbnz	r2, 800e0b2 <_dtoa_r+0xa62>
 800e070:	4601      	mov	r1, r0
 800e072:	ee18 0a10 	vmov	r0, s16
 800e076:	f000 fd87 	bl	800eb88 <__mcmp>
 800e07a:	4602      	mov	r2, r0
 800e07c:	4629      	mov	r1, r5
 800e07e:	4620      	mov	r0, r4
 800e080:	9207      	str	r2, [sp, #28]
 800e082:	f000 fb3f 	bl	800e704 <_Bfree>
 800e086:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e08a:	ea43 0102 	orr.w	r1, r3, r2
 800e08e:	9b04      	ldr	r3, [sp, #16]
 800e090:	430b      	orrs	r3, r1
 800e092:	464d      	mov	r5, r9
 800e094:	d10f      	bne.n	800e0b6 <_dtoa_r+0xa66>
 800e096:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e09a:	d02a      	beq.n	800e0f2 <_dtoa_r+0xaa2>
 800e09c:	9b03      	ldr	r3, [sp, #12]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	dd02      	ble.n	800e0a8 <_dtoa_r+0xa58>
 800e0a2:	9b02      	ldr	r3, [sp, #8]
 800e0a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e0a8:	f88b a000 	strb.w	sl, [fp]
 800e0ac:	e775      	b.n	800df9a <_dtoa_r+0x94a>
 800e0ae:	4638      	mov	r0, r7
 800e0b0:	e7ba      	b.n	800e028 <_dtoa_r+0x9d8>
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	e7e2      	b.n	800e07c <_dtoa_r+0xa2c>
 800e0b6:	9b03      	ldr	r3, [sp, #12]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	db04      	blt.n	800e0c6 <_dtoa_r+0xa76>
 800e0bc:	9906      	ldr	r1, [sp, #24]
 800e0be:	430b      	orrs	r3, r1
 800e0c0:	9904      	ldr	r1, [sp, #16]
 800e0c2:	430b      	orrs	r3, r1
 800e0c4:	d122      	bne.n	800e10c <_dtoa_r+0xabc>
 800e0c6:	2a00      	cmp	r2, #0
 800e0c8:	ddee      	ble.n	800e0a8 <_dtoa_r+0xa58>
 800e0ca:	ee18 1a10 	vmov	r1, s16
 800e0ce:	2201      	movs	r2, #1
 800e0d0:	4620      	mov	r0, r4
 800e0d2:	f000 fce9 	bl	800eaa8 <__lshift>
 800e0d6:	4631      	mov	r1, r6
 800e0d8:	ee08 0a10 	vmov	s16, r0
 800e0dc:	f000 fd54 	bl	800eb88 <__mcmp>
 800e0e0:	2800      	cmp	r0, #0
 800e0e2:	dc03      	bgt.n	800e0ec <_dtoa_r+0xa9c>
 800e0e4:	d1e0      	bne.n	800e0a8 <_dtoa_r+0xa58>
 800e0e6:	f01a 0f01 	tst.w	sl, #1
 800e0ea:	d0dd      	beq.n	800e0a8 <_dtoa_r+0xa58>
 800e0ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e0f0:	d1d7      	bne.n	800e0a2 <_dtoa_r+0xa52>
 800e0f2:	2339      	movs	r3, #57	; 0x39
 800e0f4:	f88b 3000 	strb.w	r3, [fp]
 800e0f8:	462b      	mov	r3, r5
 800e0fa:	461d      	mov	r5, r3
 800e0fc:	3b01      	subs	r3, #1
 800e0fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e102:	2a39      	cmp	r2, #57	; 0x39
 800e104:	d071      	beq.n	800e1ea <_dtoa_r+0xb9a>
 800e106:	3201      	adds	r2, #1
 800e108:	701a      	strb	r2, [r3, #0]
 800e10a:	e746      	b.n	800df9a <_dtoa_r+0x94a>
 800e10c:	2a00      	cmp	r2, #0
 800e10e:	dd07      	ble.n	800e120 <_dtoa_r+0xad0>
 800e110:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e114:	d0ed      	beq.n	800e0f2 <_dtoa_r+0xaa2>
 800e116:	f10a 0301 	add.w	r3, sl, #1
 800e11a:	f88b 3000 	strb.w	r3, [fp]
 800e11e:	e73c      	b.n	800df9a <_dtoa_r+0x94a>
 800e120:	9b05      	ldr	r3, [sp, #20]
 800e122:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e126:	4599      	cmp	r9, r3
 800e128:	d047      	beq.n	800e1ba <_dtoa_r+0xb6a>
 800e12a:	ee18 1a10 	vmov	r1, s16
 800e12e:	2300      	movs	r3, #0
 800e130:	220a      	movs	r2, #10
 800e132:	4620      	mov	r0, r4
 800e134:	f000 fb08 	bl	800e748 <__multadd>
 800e138:	45b8      	cmp	r8, r7
 800e13a:	ee08 0a10 	vmov	s16, r0
 800e13e:	f04f 0300 	mov.w	r3, #0
 800e142:	f04f 020a 	mov.w	r2, #10
 800e146:	4641      	mov	r1, r8
 800e148:	4620      	mov	r0, r4
 800e14a:	d106      	bne.n	800e15a <_dtoa_r+0xb0a>
 800e14c:	f000 fafc 	bl	800e748 <__multadd>
 800e150:	4680      	mov	r8, r0
 800e152:	4607      	mov	r7, r0
 800e154:	f109 0901 	add.w	r9, r9, #1
 800e158:	e772      	b.n	800e040 <_dtoa_r+0x9f0>
 800e15a:	f000 faf5 	bl	800e748 <__multadd>
 800e15e:	4639      	mov	r1, r7
 800e160:	4680      	mov	r8, r0
 800e162:	2300      	movs	r3, #0
 800e164:	220a      	movs	r2, #10
 800e166:	4620      	mov	r0, r4
 800e168:	f000 faee 	bl	800e748 <__multadd>
 800e16c:	4607      	mov	r7, r0
 800e16e:	e7f1      	b.n	800e154 <_dtoa_r+0xb04>
 800e170:	9b03      	ldr	r3, [sp, #12]
 800e172:	9302      	str	r3, [sp, #8]
 800e174:	9d01      	ldr	r5, [sp, #4]
 800e176:	ee18 0a10 	vmov	r0, s16
 800e17a:	4631      	mov	r1, r6
 800e17c:	f7ff f9dc 	bl	800d538 <quorem>
 800e180:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e184:	9b01      	ldr	r3, [sp, #4]
 800e186:	f805 ab01 	strb.w	sl, [r5], #1
 800e18a:	1aea      	subs	r2, r5, r3
 800e18c:	9b02      	ldr	r3, [sp, #8]
 800e18e:	4293      	cmp	r3, r2
 800e190:	dd09      	ble.n	800e1a6 <_dtoa_r+0xb56>
 800e192:	ee18 1a10 	vmov	r1, s16
 800e196:	2300      	movs	r3, #0
 800e198:	220a      	movs	r2, #10
 800e19a:	4620      	mov	r0, r4
 800e19c:	f000 fad4 	bl	800e748 <__multadd>
 800e1a0:	ee08 0a10 	vmov	s16, r0
 800e1a4:	e7e7      	b.n	800e176 <_dtoa_r+0xb26>
 800e1a6:	9b02      	ldr	r3, [sp, #8]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	bfc8      	it	gt
 800e1ac:	461d      	movgt	r5, r3
 800e1ae:	9b01      	ldr	r3, [sp, #4]
 800e1b0:	bfd8      	it	le
 800e1b2:	2501      	movle	r5, #1
 800e1b4:	441d      	add	r5, r3
 800e1b6:	f04f 0800 	mov.w	r8, #0
 800e1ba:	ee18 1a10 	vmov	r1, s16
 800e1be:	2201      	movs	r2, #1
 800e1c0:	4620      	mov	r0, r4
 800e1c2:	f000 fc71 	bl	800eaa8 <__lshift>
 800e1c6:	4631      	mov	r1, r6
 800e1c8:	ee08 0a10 	vmov	s16, r0
 800e1cc:	f000 fcdc 	bl	800eb88 <__mcmp>
 800e1d0:	2800      	cmp	r0, #0
 800e1d2:	dc91      	bgt.n	800e0f8 <_dtoa_r+0xaa8>
 800e1d4:	d102      	bne.n	800e1dc <_dtoa_r+0xb8c>
 800e1d6:	f01a 0f01 	tst.w	sl, #1
 800e1da:	d18d      	bne.n	800e0f8 <_dtoa_r+0xaa8>
 800e1dc:	462b      	mov	r3, r5
 800e1de:	461d      	mov	r5, r3
 800e1e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e1e4:	2a30      	cmp	r2, #48	; 0x30
 800e1e6:	d0fa      	beq.n	800e1de <_dtoa_r+0xb8e>
 800e1e8:	e6d7      	b.n	800df9a <_dtoa_r+0x94a>
 800e1ea:	9a01      	ldr	r2, [sp, #4]
 800e1ec:	429a      	cmp	r2, r3
 800e1ee:	d184      	bne.n	800e0fa <_dtoa_r+0xaaa>
 800e1f0:	9b00      	ldr	r3, [sp, #0]
 800e1f2:	3301      	adds	r3, #1
 800e1f4:	9300      	str	r3, [sp, #0]
 800e1f6:	2331      	movs	r3, #49	; 0x31
 800e1f8:	7013      	strb	r3, [r2, #0]
 800e1fa:	e6ce      	b.n	800df9a <_dtoa_r+0x94a>
 800e1fc:	4b09      	ldr	r3, [pc, #36]	; (800e224 <_dtoa_r+0xbd4>)
 800e1fe:	f7ff ba95 	b.w	800d72c <_dtoa_r+0xdc>
 800e202:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e204:	2b00      	cmp	r3, #0
 800e206:	f47f aa6e 	bne.w	800d6e6 <_dtoa_r+0x96>
 800e20a:	4b07      	ldr	r3, [pc, #28]	; (800e228 <_dtoa_r+0xbd8>)
 800e20c:	f7ff ba8e 	b.w	800d72c <_dtoa_r+0xdc>
 800e210:	9b02      	ldr	r3, [sp, #8]
 800e212:	2b00      	cmp	r3, #0
 800e214:	dcae      	bgt.n	800e174 <_dtoa_r+0xb24>
 800e216:	9b06      	ldr	r3, [sp, #24]
 800e218:	2b02      	cmp	r3, #2
 800e21a:	f73f aea8 	bgt.w	800df6e <_dtoa_r+0x91e>
 800e21e:	e7a9      	b.n	800e174 <_dtoa_r+0xb24>
 800e220:	0800fe87 	.word	0x0800fe87
 800e224:	0800fde4 	.word	0x0800fde4
 800e228:	0800fe08 	.word	0x0800fe08

0800e22c <__sflush_r>:
 800e22c:	898a      	ldrh	r2, [r1, #12]
 800e22e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e232:	4605      	mov	r5, r0
 800e234:	0710      	lsls	r0, r2, #28
 800e236:	460c      	mov	r4, r1
 800e238:	d458      	bmi.n	800e2ec <__sflush_r+0xc0>
 800e23a:	684b      	ldr	r3, [r1, #4]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	dc05      	bgt.n	800e24c <__sflush_r+0x20>
 800e240:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e242:	2b00      	cmp	r3, #0
 800e244:	dc02      	bgt.n	800e24c <__sflush_r+0x20>
 800e246:	2000      	movs	r0, #0
 800e248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e24c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e24e:	2e00      	cmp	r6, #0
 800e250:	d0f9      	beq.n	800e246 <__sflush_r+0x1a>
 800e252:	2300      	movs	r3, #0
 800e254:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e258:	682f      	ldr	r7, [r5, #0]
 800e25a:	602b      	str	r3, [r5, #0]
 800e25c:	d032      	beq.n	800e2c4 <__sflush_r+0x98>
 800e25e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e260:	89a3      	ldrh	r3, [r4, #12]
 800e262:	075a      	lsls	r2, r3, #29
 800e264:	d505      	bpl.n	800e272 <__sflush_r+0x46>
 800e266:	6863      	ldr	r3, [r4, #4]
 800e268:	1ac0      	subs	r0, r0, r3
 800e26a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e26c:	b10b      	cbz	r3, 800e272 <__sflush_r+0x46>
 800e26e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e270:	1ac0      	subs	r0, r0, r3
 800e272:	2300      	movs	r3, #0
 800e274:	4602      	mov	r2, r0
 800e276:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e278:	6a21      	ldr	r1, [r4, #32]
 800e27a:	4628      	mov	r0, r5
 800e27c:	47b0      	blx	r6
 800e27e:	1c43      	adds	r3, r0, #1
 800e280:	89a3      	ldrh	r3, [r4, #12]
 800e282:	d106      	bne.n	800e292 <__sflush_r+0x66>
 800e284:	6829      	ldr	r1, [r5, #0]
 800e286:	291d      	cmp	r1, #29
 800e288:	d82c      	bhi.n	800e2e4 <__sflush_r+0xb8>
 800e28a:	4a2a      	ldr	r2, [pc, #168]	; (800e334 <__sflush_r+0x108>)
 800e28c:	40ca      	lsrs	r2, r1
 800e28e:	07d6      	lsls	r6, r2, #31
 800e290:	d528      	bpl.n	800e2e4 <__sflush_r+0xb8>
 800e292:	2200      	movs	r2, #0
 800e294:	6062      	str	r2, [r4, #4]
 800e296:	04d9      	lsls	r1, r3, #19
 800e298:	6922      	ldr	r2, [r4, #16]
 800e29a:	6022      	str	r2, [r4, #0]
 800e29c:	d504      	bpl.n	800e2a8 <__sflush_r+0x7c>
 800e29e:	1c42      	adds	r2, r0, #1
 800e2a0:	d101      	bne.n	800e2a6 <__sflush_r+0x7a>
 800e2a2:	682b      	ldr	r3, [r5, #0]
 800e2a4:	b903      	cbnz	r3, 800e2a8 <__sflush_r+0x7c>
 800e2a6:	6560      	str	r0, [r4, #84]	; 0x54
 800e2a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e2aa:	602f      	str	r7, [r5, #0]
 800e2ac:	2900      	cmp	r1, #0
 800e2ae:	d0ca      	beq.n	800e246 <__sflush_r+0x1a>
 800e2b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e2b4:	4299      	cmp	r1, r3
 800e2b6:	d002      	beq.n	800e2be <__sflush_r+0x92>
 800e2b8:	4628      	mov	r0, r5
 800e2ba:	f000 fd7d 	bl	800edb8 <_free_r>
 800e2be:	2000      	movs	r0, #0
 800e2c0:	6360      	str	r0, [r4, #52]	; 0x34
 800e2c2:	e7c1      	b.n	800e248 <__sflush_r+0x1c>
 800e2c4:	6a21      	ldr	r1, [r4, #32]
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	4628      	mov	r0, r5
 800e2ca:	47b0      	blx	r6
 800e2cc:	1c41      	adds	r1, r0, #1
 800e2ce:	d1c7      	bne.n	800e260 <__sflush_r+0x34>
 800e2d0:	682b      	ldr	r3, [r5, #0]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d0c4      	beq.n	800e260 <__sflush_r+0x34>
 800e2d6:	2b1d      	cmp	r3, #29
 800e2d8:	d001      	beq.n	800e2de <__sflush_r+0xb2>
 800e2da:	2b16      	cmp	r3, #22
 800e2dc:	d101      	bne.n	800e2e2 <__sflush_r+0xb6>
 800e2de:	602f      	str	r7, [r5, #0]
 800e2e0:	e7b1      	b.n	800e246 <__sflush_r+0x1a>
 800e2e2:	89a3      	ldrh	r3, [r4, #12]
 800e2e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2e8:	81a3      	strh	r3, [r4, #12]
 800e2ea:	e7ad      	b.n	800e248 <__sflush_r+0x1c>
 800e2ec:	690f      	ldr	r7, [r1, #16]
 800e2ee:	2f00      	cmp	r7, #0
 800e2f0:	d0a9      	beq.n	800e246 <__sflush_r+0x1a>
 800e2f2:	0793      	lsls	r3, r2, #30
 800e2f4:	680e      	ldr	r6, [r1, #0]
 800e2f6:	bf08      	it	eq
 800e2f8:	694b      	ldreq	r3, [r1, #20]
 800e2fa:	600f      	str	r7, [r1, #0]
 800e2fc:	bf18      	it	ne
 800e2fe:	2300      	movne	r3, #0
 800e300:	eba6 0807 	sub.w	r8, r6, r7
 800e304:	608b      	str	r3, [r1, #8]
 800e306:	f1b8 0f00 	cmp.w	r8, #0
 800e30a:	dd9c      	ble.n	800e246 <__sflush_r+0x1a>
 800e30c:	6a21      	ldr	r1, [r4, #32]
 800e30e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e310:	4643      	mov	r3, r8
 800e312:	463a      	mov	r2, r7
 800e314:	4628      	mov	r0, r5
 800e316:	47b0      	blx	r6
 800e318:	2800      	cmp	r0, #0
 800e31a:	dc06      	bgt.n	800e32a <__sflush_r+0xfe>
 800e31c:	89a3      	ldrh	r3, [r4, #12]
 800e31e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e322:	81a3      	strh	r3, [r4, #12]
 800e324:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e328:	e78e      	b.n	800e248 <__sflush_r+0x1c>
 800e32a:	4407      	add	r7, r0
 800e32c:	eba8 0800 	sub.w	r8, r8, r0
 800e330:	e7e9      	b.n	800e306 <__sflush_r+0xda>
 800e332:	bf00      	nop
 800e334:	20400001 	.word	0x20400001

0800e338 <_fflush_r>:
 800e338:	b538      	push	{r3, r4, r5, lr}
 800e33a:	690b      	ldr	r3, [r1, #16]
 800e33c:	4605      	mov	r5, r0
 800e33e:	460c      	mov	r4, r1
 800e340:	b913      	cbnz	r3, 800e348 <_fflush_r+0x10>
 800e342:	2500      	movs	r5, #0
 800e344:	4628      	mov	r0, r5
 800e346:	bd38      	pop	{r3, r4, r5, pc}
 800e348:	b118      	cbz	r0, 800e352 <_fflush_r+0x1a>
 800e34a:	6983      	ldr	r3, [r0, #24]
 800e34c:	b90b      	cbnz	r3, 800e352 <_fflush_r+0x1a>
 800e34e:	f000 f887 	bl	800e460 <__sinit>
 800e352:	4b14      	ldr	r3, [pc, #80]	; (800e3a4 <_fflush_r+0x6c>)
 800e354:	429c      	cmp	r4, r3
 800e356:	d11b      	bne.n	800e390 <_fflush_r+0x58>
 800e358:	686c      	ldr	r4, [r5, #4]
 800e35a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d0ef      	beq.n	800e342 <_fflush_r+0xa>
 800e362:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e364:	07d0      	lsls	r0, r2, #31
 800e366:	d404      	bmi.n	800e372 <_fflush_r+0x3a>
 800e368:	0599      	lsls	r1, r3, #22
 800e36a:	d402      	bmi.n	800e372 <_fflush_r+0x3a>
 800e36c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e36e:	f000 f91a 	bl	800e5a6 <__retarget_lock_acquire_recursive>
 800e372:	4628      	mov	r0, r5
 800e374:	4621      	mov	r1, r4
 800e376:	f7ff ff59 	bl	800e22c <__sflush_r>
 800e37a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e37c:	07da      	lsls	r2, r3, #31
 800e37e:	4605      	mov	r5, r0
 800e380:	d4e0      	bmi.n	800e344 <_fflush_r+0xc>
 800e382:	89a3      	ldrh	r3, [r4, #12]
 800e384:	059b      	lsls	r3, r3, #22
 800e386:	d4dd      	bmi.n	800e344 <_fflush_r+0xc>
 800e388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e38a:	f000 f90d 	bl	800e5a8 <__retarget_lock_release_recursive>
 800e38e:	e7d9      	b.n	800e344 <_fflush_r+0xc>
 800e390:	4b05      	ldr	r3, [pc, #20]	; (800e3a8 <_fflush_r+0x70>)
 800e392:	429c      	cmp	r4, r3
 800e394:	d101      	bne.n	800e39a <_fflush_r+0x62>
 800e396:	68ac      	ldr	r4, [r5, #8]
 800e398:	e7df      	b.n	800e35a <_fflush_r+0x22>
 800e39a:	4b04      	ldr	r3, [pc, #16]	; (800e3ac <_fflush_r+0x74>)
 800e39c:	429c      	cmp	r4, r3
 800e39e:	bf08      	it	eq
 800e3a0:	68ec      	ldreq	r4, [r5, #12]
 800e3a2:	e7da      	b.n	800e35a <_fflush_r+0x22>
 800e3a4:	0800feb8 	.word	0x0800feb8
 800e3a8:	0800fed8 	.word	0x0800fed8
 800e3ac:	0800fe98 	.word	0x0800fe98

0800e3b0 <std>:
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	b510      	push	{r4, lr}
 800e3b4:	4604      	mov	r4, r0
 800e3b6:	e9c0 3300 	strd	r3, r3, [r0]
 800e3ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e3be:	6083      	str	r3, [r0, #8]
 800e3c0:	8181      	strh	r1, [r0, #12]
 800e3c2:	6643      	str	r3, [r0, #100]	; 0x64
 800e3c4:	81c2      	strh	r2, [r0, #14]
 800e3c6:	6183      	str	r3, [r0, #24]
 800e3c8:	4619      	mov	r1, r3
 800e3ca:	2208      	movs	r2, #8
 800e3cc:	305c      	adds	r0, #92	; 0x5c
 800e3ce:	f7fe fa9f 	bl	800c910 <memset>
 800e3d2:	4b05      	ldr	r3, [pc, #20]	; (800e3e8 <std+0x38>)
 800e3d4:	6263      	str	r3, [r4, #36]	; 0x24
 800e3d6:	4b05      	ldr	r3, [pc, #20]	; (800e3ec <std+0x3c>)
 800e3d8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e3da:	4b05      	ldr	r3, [pc, #20]	; (800e3f0 <std+0x40>)
 800e3dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e3de:	4b05      	ldr	r3, [pc, #20]	; (800e3f4 <std+0x44>)
 800e3e0:	6224      	str	r4, [r4, #32]
 800e3e2:	6323      	str	r3, [r4, #48]	; 0x30
 800e3e4:	bd10      	pop	{r4, pc}
 800e3e6:	bf00      	nop
 800e3e8:	0800f505 	.word	0x0800f505
 800e3ec:	0800f527 	.word	0x0800f527
 800e3f0:	0800f55f 	.word	0x0800f55f
 800e3f4:	0800f583 	.word	0x0800f583

0800e3f8 <_cleanup_r>:
 800e3f8:	4901      	ldr	r1, [pc, #4]	; (800e400 <_cleanup_r+0x8>)
 800e3fa:	f000 b8af 	b.w	800e55c <_fwalk_reent>
 800e3fe:	bf00      	nop
 800e400:	0800e339 	.word	0x0800e339

0800e404 <__sfmoreglue>:
 800e404:	b570      	push	{r4, r5, r6, lr}
 800e406:	2268      	movs	r2, #104	; 0x68
 800e408:	1e4d      	subs	r5, r1, #1
 800e40a:	4355      	muls	r5, r2
 800e40c:	460e      	mov	r6, r1
 800e40e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e412:	f000 fd3d 	bl	800ee90 <_malloc_r>
 800e416:	4604      	mov	r4, r0
 800e418:	b140      	cbz	r0, 800e42c <__sfmoreglue+0x28>
 800e41a:	2100      	movs	r1, #0
 800e41c:	e9c0 1600 	strd	r1, r6, [r0]
 800e420:	300c      	adds	r0, #12
 800e422:	60a0      	str	r0, [r4, #8]
 800e424:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e428:	f7fe fa72 	bl	800c910 <memset>
 800e42c:	4620      	mov	r0, r4
 800e42e:	bd70      	pop	{r4, r5, r6, pc}

0800e430 <__sfp_lock_acquire>:
 800e430:	4801      	ldr	r0, [pc, #4]	; (800e438 <__sfp_lock_acquire+0x8>)
 800e432:	f000 b8b8 	b.w	800e5a6 <__retarget_lock_acquire_recursive>
 800e436:	bf00      	nop
 800e438:	20000edd 	.word	0x20000edd

0800e43c <__sfp_lock_release>:
 800e43c:	4801      	ldr	r0, [pc, #4]	; (800e444 <__sfp_lock_release+0x8>)
 800e43e:	f000 b8b3 	b.w	800e5a8 <__retarget_lock_release_recursive>
 800e442:	bf00      	nop
 800e444:	20000edd 	.word	0x20000edd

0800e448 <__sinit_lock_acquire>:
 800e448:	4801      	ldr	r0, [pc, #4]	; (800e450 <__sinit_lock_acquire+0x8>)
 800e44a:	f000 b8ac 	b.w	800e5a6 <__retarget_lock_acquire_recursive>
 800e44e:	bf00      	nop
 800e450:	20000ede 	.word	0x20000ede

0800e454 <__sinit_lock_release>:
 800e454:	4801      	ldr	r0, [pc, #4]	; (800e45c <__sinit_lock_release+0x8>)
 800e456:	f000 b8a7 	b.w	800e5a8 <__retarget_lock_release_recursive>
 800e45a:	bf00      	nop
 800e45c:	20000ede 	.word	0x20000ede

0800e460 <__sinit>:
 800e460:	b510      	push	{r4, lr}
 800e462:	4604      	mov	r4, r0
 800e464:	f7ff fff0 	bl	800e448 <__sinit_lock_acquire>
 800e468:	69a3      	ldr	r3, [r4, #24]
 800e46a:	b11b      	cbz	r3, 800e474 <__sinit+0x14>
 800e46c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e470:	f7ff bff0 	b.w	800e454 <__sinit_lock_release>
 800e474:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e478:	6523      	str	r3, [r4, #80]	; 0x50
 800e47a:	4b13      	ldr	r3, [pc, #76]	; (800e4c8 <__sinit+0x68>)
 800e47c:	4a13      	ldr	r2, [pc, #76]	; (800e4cc <__sinit+0x6c>)
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	62a2      	str	r2, [r4, #40]	; 0x28
 800e482:	42a3      	cmp	r3, r4
 800e484:	bf04      	itt	eq
 800e486:	2301      	moveq	r3, #1
 800e488:	61a3      	streq	r3, [r4, #24]
 800e48a:	4620      	mov	r0, r4
 800e48c:	f000 f820 	bl	800e4d0 <__sfp>
 800e490:	6060      	str	r0, [r4, #4]
 800e492:	4620      	mov	r0, r4
 800e494:	f000 f81c 	bl	800e4d0 <__sfp>
 800e498:	60a0      	str	r0, [r4, #8]
 800e49a:	4620      	mov	r0, r4
 800e49c:	f000 f818 	bl	800e4d0 <__sfp>
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	60e0      	str	r0, [r4, #12]
 800e4a4:	2104      	movs	r1, #4
 800e4a6:	6860      	ldr	r0, [r4, #4]
 800e4a8:	f7ff ff82 	bl	800e3b0 <std>
 800e4ac:	68a0      	ldr	r0, [r4, #8]
 800e4ae:	2201      	movs	r2, #1
 800e4b0:	2109      	movs	r1, #9
 800e4b2:	f7ff ff7d 	bl	800e3b0 <std>
 800e4b6:	68e0      	ldr	r0, [r4, #12]
 800e4b8:	2202      	movs	r2, #2
 800e4ba:	2112      	movs	r1, #18
 800e4bc:	f7ff ff78 	bl	800e3b0 <std>
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	61a3      	str	r3, [r4, #24]
 800e4c4:	e7d2      	b.n	800e46c <__sinit+0xc>
 800e4c6:	bf00      	nop
 800e4c8:	0800fdd0 	.word	0x0800fdd0
 800e4cc:	0800e3f9 	.word	0x0800e3f9

0800e4d0 <__sfp>:
 800e4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4d2:	4607      	mov	r7, r0
 800e4d4:	f7ff ffac 	bl	800e430 <__sfp_lock_acquire>
 800e4d8:	4b1e      	ldr	r3, [pc, #120]	; (800e554 <__sfp+0x84>)
 800e4da:	681e      	ldr	r6, [r3, #0]
 800e4dc:	69b3      	ldr	r3, [r6, #24]
 800e4de:	b913      	cbnz	r3, 800e4e6 <__sfp+0x16>
 800e4e0:	4630      	mov	r0, r6
 800e4e2:	f7ff ffbd 	bl	800e460 <__sinit>
 800e4e6:	3648      	adds	r6, #72	; 0x48
 800e4e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e4ec:	3b01      	subs	r3, #1
 800e4ee:	d503      	bpl.n	800e4f8 <__sfp+0x28>
 800e4f0:	6833      	ldr	r3, [r6, #0]
 800e4f2:	b30b      	cbz	r3, 800e538 <__sfp+0x68>
 800e4f4:	6836      	ldr	r6, [r6, #0]
 800e4f6:	e7f7      	b.n	800e4e8 <__sfp+0x18>
 800e4f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e4fc:	b9d5      	cbnz	r5, 800e534 <__sfp+0x64>
 800e4fe:	4b16      	ldr	r3, [pc, #88]	; (800e558 <__sfp+0x88>)
 800e500:	60e3      	str	r3, [r4, #12]
 800e502:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e506:	6665      	str	r5, [r4, #100]	; 0x64
 800e508:	f000 f84c 	bl	800e5a4 <__retarget_lock_init_recursive>
 800e50c:	f7ff ff96 	bl	800e43c <__sfp_lock_release>
 800e510:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e514:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e518:	6025      	str	r5, [r4, #0]
 800e51a:	61a5      	str	r5, [r4, #24]
 800e51c:	2208      	movs	r2, #8
 800e51e:	4629      	mov	r1, r5
 800e520:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e524:	f7fe f9f4 	bl	800c910 <memset>
 800e528:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e52c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e530:	4620      	mov	r0, r4
 800e532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e534:	3468      	adds	r4, #104	; 0x68
 800e536:	e7d9      	b.n	800e4ec <__sfp+0x1c>
 800e538:	2104      	movs	r1, #4
 800e53a:	4638      	mov	r0, r7
 800e53c:	f7ff ff62 	bl	800e404 <__sfmoreglue>
 800e540:	4604      	mov	r4, r0
 800e542:	6030      	str	r0, [r6, #0]
 800e544:	2800      	cmp	r0, #0
 800e546:	d1d5      	bne.n	800e4f4 <__sfp+0x24>
 800e548:	f7ff ff78 	bl	800e43c <__sfp_lock_release>
 800e54c:	230c      	movs	r3, #12
 800e54e:	603b      	str	r3, [r7, #0]
 800e550:	e7ee      	b.n	800e530 <__sfp+0x60>
 800e552:	bf00      	nop
 800e554:	0800fdd0 	.word	0x0800fdd0
 800e558:	ffff0001 	.word	0xffff0001

0800e55c <_fwalk_reent>:
 800e55c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e560:	4606      	mov	r6, r0
 800e562:	4688      	mov	r8, r1
 800e564:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e568:	2700      	movs	r7, #0
 800e56a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e56e:	f1b9 0901 	subs.w	r9, r9, #1
 800e572:	d505      	bpl.n	800e580 <_fwalk_reent+0x24>
 800e574:	6824      	ldr	r4, [r4, #0]
 800e576:	2c00      	cmp	r4, #0
 800e578:	d1f7      	bne.n	800e56a <_fwalk_reent+0xe>
 800e57a:	4638      	mov	r0, r7
 800e57c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e580:	89ab      	ldrh	r3, [r5, #12]
 800e582:	2b01      	cmp	r3, #1
 800e584:	d907      	bls.n	800e596 <_fwalk_reent+0x3a>
 800e586:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e58a:	3301      	adds	r3, #1
 800e58c:	d003      	beq.n	800e596 <_fwalk_reent+0x3a>
 800e58e:	4629      	mov	r1, r5
 800e590:	4630      	mov	r0, r6
 800e592:	47c0      	blx	r8
 800e594:	4307      	orrs	r7, r0
 800e596:	3568      	adds	r5, #104	; 0x68
 800e598:	e7e9      	b.n	800e56e <_fwalk_reent+0x12>
	...

0800e59c <_localeconv_r>:
 800e59c:	4800      	ldr	r0, [pc, #0]	; (800e5a0 <_localeconv_r+0x4>)
 800e59e:	4770      	bx	lr
 800e5a0:	2000026c 	.word	0x2000026c

0800e5a4 <__retarget_lock_init_recursive>:
 800e5a4:	4770      	bx	lr

0800e5a6 <__retarget_lock_acquire_recursive>:
 800e5a6:	4770      	bx	lr

0800e5a8 <__retarget_lock_release_recursive>:
 800e5a8:	4770      	bx	lr

0800e5aa <__swhatbuf_r>:
 800e5aa:	b570      	push	{r4, r5, r6, lr}
 800e5ac:	460e      	mov	r6, r1
 800e5ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5b2:	2900      	cmp	r1, #0
 800e5b4:	b096      	sub	sp, #88	; 0x58
 800e5b6:	4614      	mov	r4, r2
 800e5b8:	461d      	mov	r5, r3
 800e5ba:	da08      	bge.n	800e5ce <__swhatbuf_r+0x24>
 800e5bc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	602a      	str	r2, [r5, #0]
 800e5c4:	061a      	lsls	r2, r3, #24
 800e5c6:	d410      	bmi.n	800e5ea <__swhatbuf_r+0x40>
 800e5c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5cc:	e00e      	b.n	800e5ec <__swhatbuf_r+0x42>
 800e5ce:	466a      	mov	r2, sp
 800e5d0:	f001 f82e 	bl	800f630 <_fstat_r>
 800e5d4:	2800      	cmp	r0, #0
 800e5d6:	dbf1      	blt.n	800e5bc <__swhatbuf_r+0x12>
 800e5d8:	9a01      	ldr	r2, [sp, #4]
 800e5da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e5de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e5e2:	425a      	negs	r2, r3
 800e5e4:	415a      	adcs	r2, r3
 800e5e6:	602a      	str	r2, [r5, #0]
 800e5e8:	e7ee      	b.n	800e5c8 <__swhatbuf_r+0x1e>
 800e5ea:	2340      	movs	r3, #64	; 0x40
 800e5ec:	2000      	movs	r0, #0
 800e5ee:	6023      	str	r3, [r4, #0]
 800e5f0:	b016      	add	sp, #88	; 0x58
 800e5f2:	bd70      	pop	{r4, r5, r6, pc}

0800e5f4 <__smakebuf_r>:
 800e5f4:	898b      	ldrh	r3, [r1, #12]
 800e5f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e5f8:	079d      	lsls	r5, r3, #30
 800e5fa:	4606      	mov	r6, r0
 800e5fc:	460c      	mov	r4, r1
 800e5fe:	d507      	bpl.n	800e610 <__smakebuf_r+0x1c>
 800e600:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e604:	6023      	str	r3, [r4, #0]
 800e606:	6123      	str	r3, [r4, #16]
 800e608:	2301      	movs	r3, #1
 800e60a:	6163      	str	r3, [r4, #20]
 800e60c:	b002      	add	sp, #8
 800e60e:	bd70      	pop	{r4, r5, r6, pc}
 800e610:	ab01      	add	r3, sp, #4
 800e612:	466a      	mov	r2, sp
 800e614:	f7ff ffc9 	bl	800e5aa <__swhatbuf_r>
 800e618:	9900      	ldr	r1, [sp, #0]
 800e61a:	4605      	mov	r5, r0
 800e61c:	4630      	mov	r0, r6
 800e61e:	f000 fc37 	bl	800ee90 <_malloc_r>
 800e622:	b948      	cbnz	r0, 800e638 <__smakebuf_r+0x44>
 800e624:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e628:	059a      	lsls	r2, r3, #22
 800e62a:	d4ef      	bmi.n	800e60c <__smakebuf_r+0x18>
 800e62c:	f023 0303 	bic.w	r3, r3, #3
 800e630:	f043 0302 	orr.w	r3, r3, #2
 800e634:	81a3      	strh	r3, [r4, #12]
 800e636:	e7e3      	b.n	800e600 <__smakebuf_r+0xc>
 800e638:	4b0d      	ldr	r3, [pc, #52]	; (800e670 <__smakebuf_r+0x7c>)
 800e63a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e63c:	89a3      	ldrh	r3, [r4, #12]
 800e63e:	6020      	str	r0, [r4, #0]
 800e640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e644:	81a3      	strh	r3, [r4, #12]
 800e646:	9b00      	ldr	r3, [sp, #0]
 800e648:	6163      	str	r3, [r4, #20]
 800e64a:	9b01      	ldr	r3, [sp, #4]
 800e64c:	6120      	str	r0, [r4, #16]
 800e64e:	b15b      	cbz	r3, 800e668 <__smakebuf_r+0x74>
 800e650:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e654:	4630      	mov	r0, r6
 800e656:	f000 fffd 	bl	800f654 <_isatty_r>
 800e65a:	b128      	cbz	r0, 800e668 <__smakebuf_r+0x74>
 800e65c:	89a3      	ldrh	r3, [r4, #12]
 800e65e:	f023 0303 	bic.w	r3, r3, #3
 800e662:	f043 0301 	orr.w	r3, r3, #1
 800e666:	81a3      	strh	r3, [r4, #12]
 800e668:	89a0      	ldrh	r0, [r4, #12]
 800e66a:	4305      	orrs	r5, r0
 800e66c:	81a5      	strh	r5, [r4, #12]
 800e66e:	e7cd      	b.n	800e60c <__smakebuf_r+0x18>
 800e670:	0800e3f9 	.word	0x0800e3f9

0800e674 <malloc>:
 800e674:	4b02      	ldr	r3, [pc, #8]	; (800e680 <malloc+0xc>)
 800e676:	4601      	mov	r1, r0
 800e678:	6818      	ldr	r0, [r3, #0]
 800e67a:	f000 bc09 	b.w	800ee90 <_malloc_r>
 800e67e:	bf00      	nop
 800e680:	20000118 	.word	0x20000118

0800e684 <_Balloc>:
 800e684:	b570      	push	{r4, r5, r6, lr}
 800e686:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e688:	4604      	mov	r4, r0
 800e68a:	460d      	mov	r5, r1
 800e68c:	b976      	cbnz	r6, 800e6ac <_Balloc+0x28>
 800e68e:	2010      	movs	r0, #16
 800e690:	f7ff fff0 	bl	800e674 <malloc>
 800e694:	4602      	mov	r2, r0
 800e696:	6260      	str	r0, [r4, #36]	; 0x24
 800e698:	b920      	cbnz	r0, 800e6a4 <_Balloc+0x20>
 800e69a:	4b18      	ldr	r3, [pc, #96]	; (800e6fc <_Balloc+0x78>)
 800e69c:	4818      	ldr	r0, [pc, #96]	; (800e700 <_Balloc+0x7c>)
 800e69e:	2166      	movs	r1, #102	; 0x66
 800e6a0:	f000 ff86 	bl	800f5b0 <__assert_func>
 800e6a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e6a8:	6006      	str	r6, [r0, #0]
 800e6aa:	60c6      	str	r6, [r0, #12]
 800e6ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e6ae:	68f3      	ldr	r3, [r6, #12]
 800e6b0:	b183      	cbz	r3, 800e6d4 <_Balloc+0x50>
 800e6b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e6b4:	68db      	ldr	r3, [r3, #12]
 800e6b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e6ba:	b9b8      	cbnz	r0, 800e6ec <_Balloc+0x68>
 800e6bc:	2101      	movs	r1, #1
 800e6be:	fa01 f605 	lsl.w	r6, r1, r5
 800e6c2:	1d72      	adds	r2, r6, #5
 800e6c4:	0092      	lsls	r2, r2, #2
 800e6c6:	4620      	mov	r0, r4
 800e6c8:	f000 fb60 	bl	800ed8c <_calloc_r>
 800e6cc:	b160      	cbz	r0, 800e6e8 <_Balloc+0x64>
 800e6ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e6d2:	e00e      	b.n	800e6f2 <_Balloc+0x6e>
 800e6d4:	2221      	movs	r2, #33	; 0x21
 800e6d6:	2104      	movs	r1, #4
 800e6d8:	4620      	mov	r0, r4
 800e6da:	f000 fb57 	bl	800ed8c <_calloc_r>
 800e6de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e6e0:	60f0      	str	r0, [r6, #12]
 800e6e2:	68db      	ldr	r3, [r3, #12]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d1e4      	bne.n	800e6b2 <_Balloc+0x2e>
 800e6e8:	2000      	movs	r0, #0
 800e6ea:	bd70      	pop	{r4, r5, r6, pc}
 800e6ec:	6802      	ldr	r2, [r0, #0]
 800e6ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e6f8:	e7f7      	b.n	800e6ea <_Balloc+0x66>
 800e6fa:	bf00      	nop
 800e6fc:	0800fe15 	.word	0x0800fe15
 800e700:	0800fef8 	.word	0x0800fef8

0800e704 <_Bfree>:
 800e704:	b570      	push	{r4, r5, r6, lr}
 800e706:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e708:	4605      	mov	r5, r0
 800e70a:	460c      	mov	r4, r1
 800e70c:	b976      	cbnz	r6, 800e72c <_Bfree+0x28>
 800e70e:	2010      	movs	r0, #16
 800e710:	f7ff ffb0 	bl	800e674 <malloc>
 800e714:	4602      	mov	r2, r0
 800e716:	6268      	str	r0, [r5, #36]	; 0x24
 800e718:	b920      	cbnz	r0, 800e724 <_Bfree+0x20>
 800e71a:	4b09      	ldr	r3, [pc, #36]	; (800e740 <_Bfree+0x3c>)
 800e71c:	4809      	ldr	r0, [pc, #36]	; (800e744 <_Bfree+0x40>)
 800e71e:	218a      	movs	r1, #138	; 0x8a
 800e720:	f000 ff46 	bl	800f5b0 <__assert_func>
 800e724:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e728:	6006      	str	r6, [r0, #0]
 800e72a:	60c6      	str	r6, [r0, #12]
 800e72c:	b13c      	cbz	r4, 800e73e <_Bfree+0x3a>
 800e72e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e730:	6862      	ldr	r2, [r4, #4]
 800e732:	68db      	ldr	r3, [r3, #12]
 800e734:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e738:	6021      	str	r1, [r4, #0]
 800e73a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e73e:	bd70      	pop	{r4, r5, r6, pc}
 800e740:	0800fe15 	.word	0x0800fe15
 800e744:	0800fef8 	.word	0x0800fef8

0800e748 <__multadd>:
 800e748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e74c:	690d      	ldr	r5, [r1, #16]
 800e74e:	4607      	mov	r7, r0
 800e750:	460c      	mov	r4, r1
 800e752:	461e      	mov	r6, r3
 800e754:	f101 0c14 	add.w	ip, r1, #20
 800e758:	2000      	movs	r0, #0
 800e75a:	f8dc 3000 	ldr.w	r3, [ip]
 800e75e:	b299      	uxth	r1, r3
 800e760:	fb02 6101 	mla	r1, r2, r1, r6
 800e764:	0c1e      	lsrs	r6, r3, #16
 800e766:	0c0b      	lsrs	r3, r1, #16
 800e768:	fb02 3306 	mla	r3, r2, r6, r3
 800e76c:	b289      	uxth	r1, r1
 800e76e:	3001      	adds	r0, #1
 800e770:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e774:	4285      	cmp	r5, r0
 800e776:	f84c 1b04 	str.w	r1, [ip], #4
 800e77a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e77e:	dcec      	bgt.n	800e75a <__multadd+0x12>
 800e780:	b30e      	cbz	r6, 800e7c6 <__multadd+0x7e>
 800e782:	68a3      	ldr	r3, [r4, #8]
 800e784:	42ab      	cmp	r3, r5
 800e786:	dc19      	bgt.n	800e7bc <__multadd+0x74>
 800e788:	6861      	ldr	r1, [r4, #4]
 800e78a:	4638      	mov	r0, r7
 800e78c:	3101      	adds	r1, #1
 800e78e:	f7ff ff79 	bl	800e684 <_Balloc>
 800e792:	4680      	mov	r8, r0
 800e794:	b928      	cbnz	r0, 800e7a2 <__multadd+0x5a>
 800e796:	4602      	mov	r2, r0
 800e798:	4b0c      	ldr	r3, [pc, #48]	; (800e7cc <__multadd+0x84>)
 800e79a:	480d      	ldr	r0, [pc, #52]	; (800e7d0 <__multadd+0x88>)
 800e79c:	21b5      	movs	r1, #181	; 0xb5
 800e79e:	f000 ff07 	bl	800f5b0 <__assert_func>
 800e7a2:	6922      	ldr	r2, [r4, #16]
 800e7a4:	3202      	adds	r2, #2
 800e7a6:	f104 010c 	add.w	r1, r4, #12
 800e7aa:	0092      	lsls	r2, r2, #2
 800e7ac:	300c      	adds	r0, #12
 800e7ae:	f7fe f8a1 	bl	800c8f4 <memcpy>
 800e7b2:	4621      	mov	r1, r4
 800e7b4:	4638      	mov	r0, r7
 800e7b6:	f7ff ffa5 	bl	800e704 <_Bfree>
 800e7ba:	4644      	mov	r4, r8
 800e7bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e7c0:	3501      	adds	r5, #1
 800e7c2:	615e      	str	r6, [r3, #20]
 800e7c4:	6125      	str	r5, [r4, #16]
 800e7c6:	4620      	mov	r0, r4
 800e7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7cc:	0800fe87 	.word	0x0800fe87
 800e7d0:	0800fef8 	.word	0x0800fef8

0800e7d4 <__hi0bits>:
 800e7d4:	0c03      	lsrs	r3, r0, #16
 800e7d6:	041b      	lsls	r3, r3, #16
 800e7d8:	b9d3      	cbnz	r3, 800e810 <__hi0bits+0x3c>
 800e7da:	0400      	lsls	r0, r0, #16
 800e7dc:	2310      	movs	r3, #16
 800e7de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e7e2:	bf04      	itt	eq
 800e7e4:	0200      	lsleq	r0, r0, #8
 800e7e6:	3308      	addeq	r3, #8
 800e7e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e7ec:	bf04      	itt	eq
 800e7ee:	0100      	lsleq	r0, r0, #4
 800e7f0:	3304      	addeq	r3, #4
 800e7f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e7f6:	bf04      	itt	eq
 800e7f8:	0080      	lsleq	r0, r0, #2
 800e7fa:	3302      	addeq	r3, #2
 800e7fc:	2800      	cmp	r0, #0
 800e7fe:	db05      	blt.n	800e80c <__hi0bits+0x38>
 800e800:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e804:	f103 0301 	add.w	r3, r3, #1
 800e808:	bf08      	it	eq
 800e80a:	2320      	moveq	r3, #32
 800e80c:	4618      	mov	r0, r3
 800e80e:	4770      	bx	lr
 800e810:	2300      	movs	r3, #0
 800e812:	e7e4      	b.n	800e7de <__hi0bits+0xa>

0800e814 <__lo0bits>:
 800e814:	6803      	ldr	r3, [r0, #0]
 800e816:	f013 0207 	ands.w	r2, r3, #7
 800e81a:	4601      	mov	r1, r0
 800e81c:	d00b      	beq.n	800e836 <__lo0bits+0x22>
 800e81e:	07da      	lsls	r2, r3, #31
 800e820:	d423      	bmi.n	800e86a <__lo0bits+0x56>
 800e822:	0798      	lsls	r0, r3, #30
 800e824:	bf49      	itett	mi
 800e826:	085b      	lsrmi	r3, r3, #1
 800e828:	089b      	lsrpl	r3, r3, #2
 800e82a:	2001      	movmi	r0, #1
 800e82c:	600b      	strmi	r3, [r1, #0]
 800e82e:	bf5c      	itt	pl
 800e830:	600b      	strpl	r3, [r1, #0]
 800e832:	2002      	movpl	r0, #2
 800e834:	4770      	bx	lr
 800e836:	b298      	uxth	r0, r3
 800e838:	b9a8      	cbnz	r0, 800e866 <__lo0bits+0x52>
 800e83a:	0c1b      	lsrs	r3, r3, #16
 800e83c:	2010      	movs	r0, #16
 800e83e:	b2da      	uxtb	r2, r3
 800e840:	b90a      	cbnz	r2, 800e846 <__lo0bits+0x32>
 800e842:	3008      	adds	r0, #8
 800e844:	0a1b      	lsrs	r3, r3, #8
 800e846:	071a      	lsls	r2, r3, #28
 800e848:	bf04      	itt	eq
 800e84a:	091b      	lsreq	r3, r3, #4
 800e84c:	3004      	addeq	r0, #4
 800e84e:	079a      	lsls	r2, r3, #30
 800e850:	bf04      	itt	eq
 800e852:	089b      	lsreq	r3, r3, #2
 800e854:	3002      	addeq	r0, #2
 800e856:	07da      	lsls	r2, r3, #31
 800e858:	d403      	bmi.n	800e862 <__lo0bits+0x4e>
 800e85a:	085b      	lsrs	r3, r3, #1
 800e85c:	f100 0001 	add.w	r0, r0, #1
 800e860:	d005      	beq.n	800e86e <__lo0bits+0x5a>
 800e862:	600b      	str	r3, [r1, #0]
 800e864:	4770      	bx	lr
 800e866:	4610      	mov	r0, r2
 800e868:	e7e9      	b.n	800e83e <__lo0bits+0x2a>
 800e86a:	2000      	movs	r0, #0
 800e86c:	4770      	bx	lr
 800e86e:	2020      	movs	r0, #32
 800e870:	4770      	bx	lr
	...

0800e874 <__i2b>:
 800e874:	b510      	push	{r4, lr}
 800e876:	460c      	mov	r4, r1
 800e878:	2101      	movs	r1, #1
 800e87a:	f7ff ff03 	bl	800e684 <_Balloc>
 800e87e:	4602      	mov	r2, r0
 800e880:	b928      	cbnz	r0, 800e88e <__i2b+0x1a>
 800e882:	4b05      	ldr	r3, [pc, #20]	; (800e898 <__i2b+0x24>)
 800e884:	4805      	ldr	r0, [pc, #20]	; (800e89c <__i2b+0x28>)
 800e886:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e88a:	f000 fe91 	bl	800f5b0 <__assert_func>
 800e88e:	2301      	movs	r3, #1
 800e890:	6144      	str	r4, [r0, #20]
 800e892:	6103      	str	r3, [r0, #16]
 800e894:	bd10      	pop	{r4, pc}
 800e896:	bf00      	nop
 800e898:	0800fe87 	.word	0x0800fe87
 800e89c:	0800fef8 	.word	0x0800fef8

0800e8a0 <__multiply>:
 800e8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8a4:	4691      	mov	r9, r2
 800e8a6:	690a      	ldr	r2, [r1, #16]
 800e8a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	bfb8      	it	lt
 800e8b0:	460b      	movlt	r3, r1
 800e8b2:	460c      	mov	r4, r1
 800e8b4:	bfbc      	itt	lt
 800e8b6:	464c      	movlt	r4, r9
 800e8b8:	4699      	movlt	r9, r3
 800e8ba:	6927      	ldr	r7, [r4, #16]
 800e8bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e8c0:	68a3      	ldr	r3, [r4, #8]
 800e8c2:	6861      	ldr	r1, [r4, #4]
 800e8c4:	eb07 060a 	add.w	r6, r7, sl
 800e8c8:	42b3      	cmp	r3, r6
 800e8ca:	b085      	sub	sp, #20
 800e8cc:	bfb8      	it	lt
 800e8ce:	3101      	addlt	r1, #1
 800e8d0:	f7ff fed8 	bl	800e684 <_Balloc>
 800e8d4:	b930      	cbnz	r0, 800e8e4 <__multiply+0x44>
 800e8d6:	4602      	mov	r2, r0
 800e8d8:	4b44      	ldr	r3, [pc, #272]	; (800e9ec <__multiply+0x14c>)
 800e8da:	4845      	ldr	r0, [pc, #276]	; (800e9f0 <__multiply+0x150>)
 800e8dc:	f240 115d 	movw	r1, #349	; 0x15d
 800e8e0:	f000 fe66 	bl	800f5b0 <__assert_func>
 800e8e4:	f100 0514 	add.w	r5, r0, #20
 800e8e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e8ec:	462b      	mov	r3, r5
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	4543      	cmp	r3, r8
 800e8f2:	d321      	bcc.n	800e938 <__multiply+0x98>
 800e8f4:	f104 0314 	add.w	r3, r4, #20
 800e8f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e8fc:	f109 0314 	add.w	r3, r9, #20
 800e900:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e904:	9202      	str	r2, [sp, #8]
 800e906:	1b3a      	subs	r2, r7, r4
 800e908:	3a15      	subs	r2, #21
 800e90a:	f022 0203 	bic.w	r2, r2, #3
 800e90e:	3204      	adds	r2, #4
 800e910:	f104 0115 	add.w	r1, r4, #21
 800e914:	428f      	cmp	r7, r1
 800e916:	bf38      	it	cc
 800e918:	2204      	movcc	r2, #4
 800e91a:	9201      	str	r2, [sp, #4]
 800e91c:	9a02      	ldr	r2, [sp, #8]
 800e91e:	9303      	str	r3, [sp, #12]
 800e920:	429a      	cmp	r2, r3
 800e922:	d80c      	bhi.n	800e93e <__multiply+0x9e>
 800e924:	2e00      	cmp	r6, #0
 800e926:	dd03      	ble.n	800e930 <__multiply+0x90>
 800e928:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d05a      	beq.n	800e9e6 <__multiply+0x146>
 800e930:	6106      	str	r6, [r0, #16]
 800e932:	b005      	add	sp, #20
 800e934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e938:	f843 2b04 	str.w	r2, [r3], #4
 800e93c:	e7d8      	b.n	800e8f0 <__multiply+0x50>
 800e93e:	f8b3 a000 	ldrh.w	sl, [r3]
 800e942:	f1ba 0f00 	cmp.w	sl, #0
 800e946:	d024      	beq.n	800e992 <__multiply+0xf2>
 800e948:	f104 0e14 	add.w	lr, r4, #20
 800e94c:	46a9      	mov	r9, r5
 800e94e:	f04f 0c00 	mov.w	ip, #0
 800e952:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e956:	f8d9 1000 	ldr.w	r1, [r9]
 800e95a:	fa1f fb82 	uxth.w	fp, r2
 800e95e:	b289      	uxth	r1, r1
 800e960:	fb0a 110b 	mla	r1, sl, fp, r1
 800e964:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e968:	f8d9 2000 	ldr.w	r2, [r9]
 800e96c:	4461      	add	r1, ip
 800e96e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e972:	fb0a c20b 	mla	r2, sl, fp, ip
 800e976:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e97a:	b289      	uxth	r1, r1
 800e97c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e980:	4577      	cmp	r7, lr
 800e982:	f849 1b04 	str.w	r1, [r9], #4
 800e986:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e98a:	d8e2      	bhi.n	800e952 <__multiply+0xb2>
 800e98c:	9a01      	ldr	r2, [sp, #4]
 800e98e:	f845 c002 	str.w	ip, [r5, r2]
 800e992:	9a03      	ldr	r2, [sp, #12]
 800e994:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e998:	3304      	adds	r3, #4
 800e99a:	f1b9 0f00 	cmp.w	r9, #0
 800e99e:	d020      	beq.n	800e9e2 <__multiply+0x142>
 800e9a0:	6829      	ldr	r1, [r5, #0]
 800e9a2:	f104 0c14 	add.w	ip, r4, #20
 800e9a6:	46ae      	mov	lr, r5
 800e9a8:	f04f 0a00 	mov.w	sl, #0
 800e9ac:	f8bc b000 	ldrh.w	fp, [ip]
 800e9b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e9b4:	fb09 220b 	mla	r2, r9, fp, r2
 800e9b8:	4492      	add	sl, r2
 800e9ba:	b289      	uxth	r1, r1
 800e9bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e9c0:	f84e 1b04 	str.w	r1, [lr], #4
 800e9c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e9c8:	f8be 1000 	ldrh.w	r1, [lr]
 800e9cc:	0c12      	lsrs	r2, r2, #16
 800e9ce:	fb09 1102 	mla	r1, r9, r2, r1
 800e9d2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e9d6:	4567      	cmp	r7, ip
 800e9d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e9dc:	d8e6      	bhi.n	800e9ac <__multiply+0x10c>
 800e9de:	9a01      	ldr	r2, [sp, #4]
 800e9e0:	50a9      	str	r1, [r5, r2]
 800e9e2:	3504      	adds	r5, #4
 800e9e4:	e79a      	b.n	800e91c <__multiply+0x7c>
 800e9e6:	3e01      	subs	r6, #1
 800e9e8:	e79c      	b.n	800e924 <__multiply+0x84>
 800e9ea:	bf00      	nop
 800e9ec:	0800fe87 	.word	0x0800fe87
 800e9f0:	0800fef8 	.word	0x0800fef8

0800e9f4 <__pow5mult>:
 800e9f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9f8:	4615      	mov	r5, r2
 800e9fa:	f012 0203 	ands.w	r2, r2, #3
 800e9fe:	4606      	mov	r6, r0
 800ea00:	460f      	mov	r7, r1
 800ea02:	d007      	beq.n	800ea14 <__pow5mult+0x20>
 800ea04:	4c25      	ldr	r4, [pc, #148]	; (800ea9c <__pow5mult+0xa8>)
 800ea06:	3a01      	subs	r2, #1
 800ea08:	2300      	movs	r3, #0
 800ea0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ea0e:	f7ff fe9b 	bl	800e748 <__multadd>
 800ea12:	4607      	mov	r7, r0
 800ea14:	10ad      	asrs	r5, r5, #2
 800ea16:	d03d      	beq.n	800ea94 <__pow5mult+0xa0>
 800ea18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ea1a:	b97c      	cbnz	r4, 800ea3c <__pow5mult+0x48>
 800ea1c:	2010      	movs	r0, #16
 800ea1e:	f7ff fe29 	bl	800e674 <malloc>
 800ea22:	4602      	mov	r2, r0
 800ea24:	6270      	str	r0, [r6, #36]	; 0x24
 800ea26:	b928      	cbnz	r0, 800ea34 <__pow5mult+0x40>
 800ea28:	4b1d      	ldr	r3, [pc, #116]	; (800eaa0 <__pow5mult+0xac>)
 800ea2a:	481e      	ldr	r0, [pc, #120]	; (800eaa4 <__pow5mult+0xb0>)
 800ea2c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ea30:	f000 fdbe 	bl	800f5b0 <__assert_func>
 800ea34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ea38:	6004      	str	r4, [r0, #0]
 800ea3a:	60c4      	str	r4, [r0, #12]
 800ea3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ea40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ea44:	b94c      	cbnz	r4, 800ea5a <__pow5mult+0x66>
 800ea46:	f240 2171 	movw	r1, #625	; 0x271
 800ea4a:	4630      	mov	r0, r6
 800ea4c:	f7ff ff12 	bl	800e874 <__i2b>
 800ea50:	2300      	movs	r3, #0
 800ea52:	f8c8 0008 	str.w	r0, [r8, #8]
 800ea56:	4604      	mov	r4, r0
 800ea58:	6003      	str	r3, [r0, #0]
 800ea5a:	f04f 0900 	mov.w	r9, #0
 800ea5e:	07eb      	lsls	r3, r5, #31
 800ea60:	d50a      	bpl.n	800ea78 <__pow5mult+0x84>
 800ea62:	4639      	mov	r1, r7
 800ea64:	4622      	mov	r2, r4
 800ea66:	4630      	mov	r0, r6
 800ea68:	f7ff ff1a 	bl	800e8a0 <__multiply>
 800ea6c:	4639      	mov	r1, r7
 800ea6e:	4680      	mov	r8, r0
 800ea70:	4630      	mov	r0, r6
 800ea72:	f7ff fe47 	bl	800e704 <_Bfree>
 800ea76:	4647      	mov	r7, r8
 800ea78:	106d      	asrs	r5, r5, #1
 800ea7a:	d00b      	beq.n	800ea94 <__pow5mult+0xa0>
 800ea7c:	6820      	ldr	r0, [r4, #0]
 800ea7e:	b938      	cbnz	r0, 800ea90 <__pow5mult+0x9c>
 800ea80:	4622      	mov	r2, r4
 800ea82:	4621      	mov	r1, r4
 800ea84:	4630      	mov	r0, r6
 800ea86:	f7ff ff0b 	bl	800e8a0 <__multiply>
 800ea8a:	6020      	str	r0, [r4, #0]
 800ea8c:	f8c0 9000 	str.w	r9, [r0]
 800ea90:	4604      	mov	r4, r0
 800ea92:	e7e4      	b.n	800ea5e <__pow5mult+0x6a>
 800ea94:	4638      	mov	r0, r7
 800ea96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea9a:	bf00      	nop
 800ea9c:	08010048 	.word	0x08010048
 800eaa0:	0800fe15 	.word	0x0800fe15
 800eaa4:	0800fef8 	.word	0x0800fef8

0800eaa8 <__lshift>:
 800eaa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eaac:	460c      	mov	r4, r1
 800eaae:	6849      	ldr	r1, [r1, #4]
 800eab0:	6923      	ldr	r3, [r4, #16]
 800eab2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eab6:	68a3      	ldr	r3, [r4, #8]
 800eab8:	4607      	mov	r7, r0
 800eaba:	4691      	mov	r9, r2
 800eabc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eac0:	f108 0601 	add.w	r6, r8, #1
 800eac4:	42b3      	cmp	r3, r6
 800eac6:	db0b      	blt.n	800eae0 <__lshift+0x38>
 800eac8:	4638      	mov	r0, r7
 800eaca:	f7ff fddb 	bl	800e684 <_Balloc>
 800eace:	4605      	mov	r5, r0
 800ead0:	b948      	cbnz	r0, 800eae6 <__lshift+0x3e>
 800ead2:	4602      	mov	r2, r0
 800ead4:	4b2a      	ldr	r3, [pc, #168]	; (800eb80 <__lshift+0xd8>)
 800ead6:	482b      	ldr	r0, [pc, #172]	; (800eb84 <__lshift+0xdc>)
 800ead8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800eadc:	f000 fd68 	bl	800f5b0 <__assert_func>
 800eae0:	3101      	adds	r1, #1
 800eae2:	005b      	lsls	r3, r3, #1
 800eae4:	e7ee      	b.n	800eac4 <__lshift+0x1c>
 800eae6:	2300      	movs	r3, #0
 800eae8:	f100 0114 	add.w	r1, r0, #20
 800eaec:	f100 0210 	add.w	r2, r0, #16
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	4553      	cmp	r3, sl
 800eaf4:	db37      	blt.n	800eb66 <__lshift+0xbe>
 800eaf6:	6920      	ldr	r0, [r4, #16]
 800eaf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eafc:	f104 0314 	add.w	r3, r4, #20
 800eb00:	f019 091f 	ands.w	r9, r9, #31
 800eb04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eb08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800eb0c:	d02f      	beq.n	800eb6e <__lshift+0xc6>
 800eb0e:	f1c9 0e20 	rsb	lr, r9, #32
 800eb12:	468a      	mov	sl, r1
 800eb14:	f04f 0c00 	mov.w	ip, #0
 800eb18:	681a      	ldr	r2, [r3, #0]
 800eb1a:	fa02 f209 	lsl.w	r2, r2, r9
 800eb1e:	ea42 020c 	orr.w	r2, r2, ip
 800eb22:	f84a 2b04 	str.w	r2, [sl], #4
 800eb26:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb2a:	4298      	cmp	r0, r3
 800eb2c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800eb30:	d8f2      	bhi.n	800eb18 <__lshift+0x70>
 800eb32:	1b03      	subs	r3, r0, r4
 800eb34:	3b15      	subs	r3, #21
 800eb36:	f023 0303 	bic.w	r3, r3, #3
 800eb3a:	3304      	adds	r3, #4
 800eb3c:	f104 0215 	add.w	r2, r4, #21
 800eb40:	4290      	cmp	r0, r2
 800eb42:	bf38      	it	cc
 800eb44:	2304      	movcc	r3, #4
 800eb46:	f841 c003 	str.w	ip, [r1, r3]
 800eb4a:	f1bc 0f00 	cmp.w	ip, #0
 800eb4e:	d001      	beq.n	800eb54 <__lshift+0xac>
 800eb50:	f108 0602 	add.w	r6, r8, #2
 800eb54:	3e01      	subs	r6, #1
 800eb56:	4638      	mov	r0, r7
 800eb58:	612e      	str	r6, [r5, #16]
 800eb5a:	4621      	mov	r1, r4
 800eb5c:	f7ff fdd2 	bl	800e704 <_Bfree>
 800eb60:	4628      	mov	r0, r5
 800eb62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb66:	f842 0f04 	str.w	r0, [r2, #4]!
 800eb6a:	3301      	adds	r3, #1
 800eb6c:	e7c1      	b.n	800eaf2 <__lshift+0x4a>
 800eb6e:	3904      	subs	r1, #4
 800eb70:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb74:	f841 2f04 	str.w	r2, [r1, #4]!
 800eb78:	4298      	cmp	r0, r3
 800eb7a:	d8f9      	bhi.n	800eb70 <__lshift+0xc8>
 800eb7c:	e7ea      	b.n	800eb54 <__lshift+0xac>
 800eb7e:	bf00      	nop
 800eb80:	0800fe87 	.word	0x0800fe87
 800eb84:	0800fef8 	.word	0x0800fef8

0800eb88 <__mcmp>:
 800eb88:	b530      	push	{r4, r5, lr}
 800eb8a:	6902      	ldr	r2, [r0, #16]
 800eb8c:	690c      	ldr	r4, [r1, #16]
 800eb8e:	1b12      	subs	r2, r2, r4
 800eb90:	d10e      	bne.n	800ebb0 <__mcmp+0x28>
 800eb92:	f100 0314 	add.w	r3, r0, #20
 800eb96:	3114      	adds	r1, #20
 800eb98:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800eb9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800eba0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800eba4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800eba8:	42a5      	cmp	r5, r4
 800ebaa:	d003      	beq.n	800ebb4 <__mcmp+0x2c>
 800ebac:	d305      	bcc.n	800ebba <__mcmp+0x32>
 800ebae:	2201      	movs	r2, #1
 800ebb0:	4610      	mov	r0, r2
 800ebb2:	bd30      	pop	{r4, r5, pc}
 800ebb4:	4283      	cmp	r3, r0
 800ebb6:	d3f3      	bcc.n	800eba0 <__mcmp+0x18>
 800ebb8:	e7fa      	b.n	800ebb0 <__mcmp+0x28>
 800ebba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ebbe:	e7f7      	b.n	800ebb0 <__mcmp+0x28>

0800ebc0 <__mdiff>:
 800ebc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebc4:	460c      	mov	r4, r1
 800ebc6:	4606      	mov	r6, r0
 800ebc8:	4611      	mov	r1, r2
 800ebca:	4620      	mov	r0, r4
 800ebcc:	4690      	mov	r8, r2
 800ebce:	f7ff ffdb 	bl	800eb88 <__mcmp>
 800ebd2:	1e05      	subs	r5, r0, #0
 800ebd4:	d110      	bne.n	800ebf8 <__mdiff+0x38>
 800ebd6:	4629      	mov	r1, r5
 800ebd8:	4630      	mov	r0, r6
 800ebda:	f7ff fd53 	bl	800e684 <_Balloc>
 800ebde:	b930      	cbnz	r0, 800ebee <__mdiff+0x2e>
 800ebe0:	4b3a      	ldr	r3, [pc, #232]	; (800eccc <__mdiff+0x10c>)
 800ebe2:	4602      	mov	r2, r0
 800ebe4:	f240 2132 	movw	r1, #562	; 0x232
 800ebe8:	4839      	ldr	r0, [pc, #228]	; (800ecd0 <__mdiff+0x110>)
 800ebea:	f000 fce1 	bl	800f5b0 <__assert_func>
 800ebee:	2301      	movs	r3, #1
 800ebf0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ebf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebf8:	bfa4      	itt	ge
 800ebfa:	4643      	movge	r3, r8
 800ebfc:	46a0      	movge	r8, r4
 800ebfe:	4630      	mov	r0, r6
 800ec00:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ec04:	bfa6      	itte	ge
 800ec06:	461c      	movge	r4, r3
 800ec08:	2500      	movge	r5, #0
 800ec0a:	2501      	movlt	r5, #1
 800ec0c:	f7ff fd3a 	bl	800e684 <_Balloc>
 800ec10:	b920      	cbnz	r0, 800ec1c <__mdiff+0x5c>
 800ec12:	4b2e      	ldr	r3, [pc, #184]	; (800eccc <__mdiff+0x10c>)
 800ec14:	4602      	mov	r2, r0
 800ec16:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ec1a:	e7e5      	b.n	800ebe8 <__mdiff+0x28>
 800ec1c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ec20:	6926      	ldr	r6, [r4, #16]
 800ec22:	60c5      	str	r5, [r0, #12]
 800ec24:	f104 0914 	add.w	r9, r4, #20
 800ec28:	f108 0514 	add.w	r5, r8, #20
 800ec2c:	f100 0e14 	add.w	lr, r0, #20
 800ec30:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ec34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ec38:	f108 0210 	add.w	r2, r8, #16
 800ec3c:	46f2      	mov	sl, lr
 800ec3e:	2100      	movs	r1, #0
 800ec40:	f859 3b04 	ldr.w	r3, [r9], #4
 800ec44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ec48:	fa1f f883 	uxth.w	r8, r3
 800ec4c:	fa11 f18b 	uxtah	r1, r1, fp
 800ec50:	0c1b      	lsrs	r3, r3, #16
 800ec52:	eba1 0808 	sub.w	r8, r1, r8
 800ec56:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ec5a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ec5e:	fa1f f888 	uxth.w	r8, r8
 800ec62:	1419      	asrs	r1, r3, #16
 800ec64:	454e      	cmp	r6, r9
 800ec66:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ec6a:	f84a 3b04 	str.w	r3, [sl], #4
 800ec6e:	d8e7      	bhi.n	800ec40 <__mdiff+0x80>
 800ec70:	1b33      	subs	r3, r6, r4
 800ec72:	3b15      	subs	r3, #21
 800ec74:	f023 0303 	bic.w	r3, r3, #3
 800ec78:	3304      	adds	r3, #4
 800ec7a:	3415      	adds	r4, #21
 800ec7c:	42a6      	cmp	r6, r4
 800ec7e:	bf38      	it	cc
 800ec80:	2304      	movcc	r3, #4
 800ec82:	441d      	add	r5, r3
 800ec84:	4473      	add	r3, lr
 800ec86:	469e      	mov	lr, r3
 800ec88:	462e      	mov	r6, r5
 800ec8a:	4566      	cmp	r6, ip
 800ec8c:	d30e      	bcc.n	800ecac <__mdiff+0xec>
 800ec8e:	f10c 0203 	add.w	r2, ip, #3
 800ec92:	1b52      	subs	r2, r2, r5
 800ec94:	f022 0203 	bic.w	r2, r2, #3
 800ec98:	3d03      	subs	r5, #3
 800ec9a:	45ac      	cmp	ip, r5
 800ec9c:	bf38      	it	cc
 800ec9e:	2200      	movcc	r2, #0
 800eca0:	441a      	add	r2, r3
 800eca2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800eca6:	b17b      	cbz	r3, 800ecc8 <__mdiff+0x108>
 800eca8:	6107      	str	r7, [r0, #16]
 800ecaa:	e7a3      	b.n	800ebf4 <__mdiff+0x34>
 800ecac:	f856 8b04 	ldr.w	r8, [r6], #4
 800ecb0:	fa11 f288 	uxtah	r2, r1, r8
 800ecb4:	1414      	asrs	r4, r2, #16
 800ecb6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ecba:	b292      	uxth	r2, r2
 800ecbc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ecc0:	f84e 2b04 	str.w	r2, [lr], #4
 800ecc4:	1421      	asrs	r1, r4, #16
 800ecc6:	e7e0      	b.n	800ec8a <__mdiff+0xca>
 800ecc8:	3f01      	subs	r7, #1
 800ecca:	e7ea      	b.n	800eca2 <__mdiff+0xe2>
 800eccc:	0800fe87 	.word	0x0800fe87
 800ecd0:	0800fef8 	.word	0x0800fef8

0800ecd4 <__d2b>:
 800ecd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ecd8:	4689      	mov	r9, r1
 800ecda:	2101      	movs	r1, #1
 800ecdc:	ec57 6b10 	vmov	r6, r7, d0
 800ece0:	4690      	mov	r8, r2
 800ece2:	f7ff fccf 	bl	800e684 <_Balloc>
 800ece6:	4604      	mov	r4, r0
 800ece8:	b930      	cbnz	r0, 800ecf8 <__d2b+0x24>
 800ecea:	4602      	mov	r2, r0
 800ecec:	4b25      	ldr	r3, [pc, #148]	; (800ed84 <__d2b+0xb0>)
 800ecee:	4826      	ldr	r0, [pc, #152]	; (800ed88 <__d2b+0xb4>)
 800ecf0:	f240 310a 	movw	r1, #778	; 0x30a
 800ecf4:	f000 fc5c 	bl	800f5b0 <__assert_func>
 800ecf8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ecfc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ed00:	bb35      	cbnz	r5, 800ed50 <__d2b+0x7c>
 800ed02:	2e00      	cmp	r6, #0
 800ed04:	9301      	str	r3, [sp, #4]
 800ed06:	d028      	beq.n	800ed5a <__d2b+0x86>
 800ed08:	4668      	mov	r0, sp
 800ed0a:	9600      	str	r6, [sp, #0]
 800ed0c:	f7ff fd82 	bl	800e814 <__lo0bits>
 800ed10:	9900      	ldr	r1, [sp, #0]
 800ed12:	b300      	cbz	r0, 800ed56 <__d2b+0x82>
 800ed14:	9a01      	ldr	r2, [sp, #4]
 800ed16:	f1c0 0320 	rsb	r3, r0, #32
 800ed1a:	fa02 f303 	lsl.w	r3, r2, r3
 800ed1e:	430b      	orrs	r3, r1
 800ed20:	40c2      	lsrs	r2, r0
 800ed22:	6163      	str	r3, [r4, #20]
 800ed24:	9201      	str	r2, [sp, #4]
 800ed26:	9b01      	ldr	r3, [sp, #4]
 800ed28:	61a3      	str	r3, [r4, #24]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	bf14      	ite	ne
 800ed2e:	2202      	movne	r2, #2
 800ed30:	2201      	moveq	r2, #1
 800ed32:	6122      	str	r2, [r4, #16]
 800ed34:	b1d5      	cbz	r5, 800ed6c <__d2b+0x98>
 800ed36:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ed3a:	4405      	add	r5, r0
 800ed3c:	f8c9 5000 	str.w	r5, [r9]
 800ed40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ed44:	f8c8 0000 	str.w	r0, [r8]
 800ed48:	4620      	mov	r0, r4
 800ed4a:	b003      	add	sp, #12
 800ed4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ed54:	e7d5      	b.n	800ed02 <__d2b+0x2e>
 800ed56:	6161      	str	r1, [r4, #20]
 800ed58:	e7e5      	b.n	800ed26 <__d2b+0x52>
 800ed5a:	a801      	add	r0, sp, #4
 800ed5c:	f7ff fd5a 	bl	800e814 <__lo0bits>
 800ed60:	9b01      	ldr	r3, [sp, #4]
 800ed62:	6163      	str	r3, [r4, #20]
 800ed64:	2201      	movs	r2, #1
 800ed66:	6122      	str	r2, [r4, #16]
 800ed68:	3020      	adds	r0, #32
 800ed6a:	e7e3      	b.n	800ed34 <__d2b+0x60>
 800ed6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ed70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ed74:	f8c9 0000 	str.w	r0, [r9]
 800ed78:	6918      	ldr	r0, [r3, #16]
 800ed7a:	f7ff fd2b 	bl	800e7d4 <__hi0bits>
 800ed7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ed82:	e7df      	b.n	800ed44 <__d2b+0x70>
 800ed84:	0800fe87 	.word	0x0800fe87
 800ed88:	0800fef8 	.word	0x0800fef8

0800ed8c <_calloc_r>:
 800ed8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed8e:	fba1 2402 	umull	r2, r4, r1, r2
 800ed92:	b94c      	cbnz	r4, 800eda8 <_calloc_r+0x1c>
 800ed94:	4611      	mov	r1, r2
 800ed96:	9201      	str	r2, [sp, #4]
 800ed98:	f000 f87a 	bl	800ee90 <_malloc_r>
 800ed9c:	9a01      	ldr	r2, [sp, #4]
 800ed9e:	4605      	mov	r5, r0
 800eda0:	b930      	cbnz	r0, 800edb0 <_calloc_r+0x24>
 800eda2:	4628      	mov	r0, r5
 800eda4:	b003      	add	sp, #12
 800eda6:	bd30      	pop	{r4, r5, pc}
 800eda8:	220c      	movs	r2, #12
 800edaa:	6002      	str	r2, [r0, #0]
 800edac:	2500      	movs	r5, #0
 800edae:	e7f8      	b.n	800eda2 <_calloc_r+0x16>
 800edb0:	4621      	mov	r1, r4
 800edb2:	f7fd fdad 	bl	800c910 <memset>
 800edb6:	e7f4      	b.n	800eda2 <_calloc_r+0x16>

0800edb8 <_free_r>:
 800edb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800edba:	2900      	cmp	r1, #0
 800edbc:	d044      	beq.n	800ee48 <_free_r+0x90>
 800edbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800edc2:	9001      	str	r0, [sp, #4]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	f1a1 0404 	sub.w	r4, r1, #4
 800edca:	bfb8      	it	lt
 800edcc:	18e4      	addlt	r4, r4, r3
 800edce:	f000 fc8f 	bl	800f6f0 <__malloc_lock>
 800edd2:	4a1e      	ldr	r2, [pc, #120]	; (800ee4c <_free_r+0x94>)
 800edd4:	9801      	ldr	r0, [sp, #4]
 800edd6:	6813      	ldr	r3, [r2, #0]
 800edd8:	b933      	cbnz	r3, 800ede8 <_free_r+0x30>
 800edda:	6063      	str	r3, [r4, #4]
 800eddc:	6014      	str	r4, [r2, #0]
 800edde:	b003      	add	sp, #12
 800ede0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ede4:	f000 bc8a 	b.w	800f6fc <__malloc_unlock>
 800ede8:	42a3      	cmp	r3, r4
 800edea:	d908      	bls.n	800edfe <_free_r+0x46>
 800edec:	6825      	ldr	r5, [r4, #0]
 800edee:	1961      	adds	r1, r4, r5
 800edf0:	428b      	cmp	r3, r1
 800edf2:	bf01      	itttt	eq
 800edf4:	6819      	ldreq	r1, [r3, #0]
 800edf6:	685b      	ldreq	r3, [r3, #4]
 800edf8:	1949      	addeq	r1, r1, r5
 800edfa:	6021      	streq	r1, [r4, #0]
 800edfc:	e7ed      	b.n	800edda <_free_r+0x22>
 800edfe:	461a      	mov	r2, r3
 800ee00:	685b      	ldr	r3, [r3, #4]
 800ee02:	b10b      	cbz	r3, 800ee08 <_free_r+0x50>
 800ee04:	42a3      	cmp	r3, r4
 800ee06:	d9fa      	bls.n	800edfe <_free_r+0x46>
 800ee08:	6811      	ldr	r1, [r2, #0]
 800ee0a:	1855      	adds	r5, r2, r1
 800ee0c:	42a5      	cmp	r5, r4
 800ee0e:	d10b      	bne.n	800ee28 <_free_r+0x70>
 800ee10:	6824      	ldr	r4, [r4, #0]
 800ee12:	4421      	add	r1, r4
 800ee14:	1854      	adds	r4, r2, r1
 800ee16:	42a3      	cmp	r3, r4
 800ee18:	6011      	str	r1, [r2, #0]
 800ee1a:	d1e0      	bne.n	800edde <_free_r+0x26>
 800ee1c:	681c      	ldr	r4, [r3, #0]
 800ee1e:	685b      	ldr	r3, [r3, #4]
 800ee20:	6053      	str	r3, [r2, #4]
 800ee22:	4421      	add	r1, r4
 800ee24:	6011      	str	r1, [r2, #0]
 800ee26:	e7da      	b.n	800edde <_free_r+0x26>
 800ee28:	d902      	bls.n	800ee30 <_free_r+0x78>
 800ee2a:	230c      	movs	r3, #12
 800ee2c:	6003      	str	r3, [r0, #0]
 800ee2e:	e7d6      	b.n	800edde <_free_r+0x26>
 800ee30:	6825      	ldr	r5, [r4, #0]
 800ee32:	1961      	adds	r1, r4, r5
 800ee34:	428b      	cmp	r3, r1
 800ee36:	bf04      	itt	eq
 800ee38:	6819      	ldreq	r1, [r3, #0]
 800ee3a:	685b      	ldreq	r3, [r3, #4]
 800ee3c:	6063      	str	r3, [r4, #4]
 800ee3e:	bf04      	itt	eq
 800ee40:	1949      	addeq	r1, r1, r5
 800ee42:	6021      	streq	r1, [r4, #0]
 800ee44:	6054      	str	r4, [r2, #4]
 800ee46:	e7ca      	b.n	800edde <_free_r+0x26>
 800ee48:	b003      	add	sp, #12
 800ee4a:	bd30      	pop	{r4, r5, pc}
 800ee4c:	20000ee0 	.word	0x20000ee0

0800ee50 <sbrk_aligned>:
 800ee50:	b570      	push	{r4, r5, r6, lr}
 800ee52:	4e0e      	ldr	r6, [pc, #56]	; (800ee8c <sbrk_aligned+0x3c>)
 800ee54:	460c      	mov	r4, r1
 800ee56:	6831      	ldr	r1, [r6, #0]
 800ee58:	4605      	mov	r5, r0
 800ee5a:	b911      	cbnz	r1, 800ee62 <sbrk_aligned+0x12>
 800ee5c:	f000 fb42 	bl	800f4e4 <_sbrk_r>
 800ee60:	6030      	str	r0, [r6, #0]
 800ee62:	4621      	mov	r1, r4
 800ee64:	4628      	mov	r0, r5
 800ee66:	f000 fb3d 	bl	800f4e4 <_sbrk_r>
 800ee6a:	1c43      	adds	r3, r0, #1
 800ee6c:	d00a      	beq.n	800ee84 <sbrk_aligned+0x34>
 800ee6e:	1cc4      	adds	r4, r0, #3
 800ee70:	f024 0403 	bic.w	r4, r4, #3
 800ee74:	42a0      	cmp	r0, r4
 800ee76:	d007      	beq.n	800ee88 <sbrk_aligned+0x38>
 800ee78:	1a21      	subs	r1, r4, r0
 800ee7a:	4628      	mov	r0, r5
 800ee7c:	f000 fb32 	bl	800f4e4 <_sbrk_r>
 800ee80:	3001      	adds	r0, #1
 800ee82:	d101      	bne.n	800ee88 <sbrk_aligned+0x38>
 800ee84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ee88:	4620      	mov	r0, r4
 800ee8a:	bd70      	pop	{r4, r5, r6, pc}
 800ee8c:	20000ee4 	.word	0x20000ee4

0800ee90 <_malloc_r>:
 800ee90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee94:	1ccd      	adds	r5, r1, #3
 800ee96:	f025 0503 	bic.w	r5, r5, #3
 800ee9a:	3508      	adds	r5, #8
 800ee9c:	2d0c      	cmp	r5, #12
 800ee9e:	bf38      	it	cc
 800eea0:	250c      	movcc	r5, #12
 800eea2:	2d00      	cmp	r5, #0
 800eea4:	4607      	mov	r7, r0
 800eea6:	db01      	blt.n	800eeac <_malloc_r+0x1c>
 800eea8:	42a9      	cmp	r1, r5
 800eeaa:	d905      	bls.n	800eeb8 <_malloc_r+0x28>
 800eeac:	230c      	movs	r3, #12
 800eeae:	603b      	str	r3, [r7, #0]
 800eeb0:	2600      	movs	r6, #0
 800eeb2:	4630      	mov	r0, r6
 800eeb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeb8:	4e2e      	ldr	r6, [pc, #184]	; (800ef74 <_malloc_r+0xe4>)
 800eeba:	f000 fc19 	bl	800f6f0 <__malloc_lock>
 800eebe:	6833      	ldr	r3, [r6, #0]
 800eec0:	461c      	mov	r4, r3
 800eec2:	bb34      	cbnz	r4, 800ef12 <_malloc_r+0x82>
 800eec4:	4629      	mov	r1, r5
 800eec6:	4638      	mov	r0, r7
 800eec8:	f7ff ffc2 	bl	800ee50 <sbrk_aligned>
 800eecc:	1c43      	adds	r3, r0, #1
 800eece:	4604      	mov	r4, r0
 800eed0:	d14d      	bne.n	800ef6e <_malloc_r+0xde>
 800eed2:	6834      	ldr	r4, [r6, #0]
 800eed4:	4626      	mov	r6, r4
 800eed6:	2e00      	cmp	r6, #0
 800eed8:	d140      	bne.n	800ef5c <_malloc_r+0xcc>
 800eeda:	6823      	ldr	r3, [r4, #0]
 800eedc:	4631      	mov	r1, r6
 800eede:	4638      	mov	r0, r7
 800eee0:	eb04 0803 	add.w	r8, r4, r3
 800eee4:	f000 fafe 	bl	800f4e4 <_sbrk_r>
 800eee8:	4580      	cmp	r8, r0
 800eeea:	d13a      	bne.n	800ef62 <_malloc_r+0xd2>
 800eeec:	6821      	ldr	r1, [r4, #0]
 800eeee:	3503      	adds	r5, #3
 800eef0:	1a6d      	subs	r5, r5, r1
 800eef2:	f025 0503 	bic.w	r5, r5, #3
 800eef6:	3508      	adds	r5, #8
 800eef8:	2d0c      	cmp	r5, #12
 800eefa:	bf38      	it	cc
 800eefc:	250c      	movcc	r5, #12
 800eefe:	4629      	mov	r1, r5
 800ef00:	4638      	mov	r0, r7
 800ef02:	f7ff ffa5 	bl	800ee50 <sbrk_aligned>
 800ef06:	3001      	adds	r0, #1
 800ef08:	d02b      	beq.n	800ef62 <_malloc_r+0xd2>
 800ef0a:	6823      	ldr	r3, [r4, #0]
 800ef0c:	442b      	add	r3, r5
 800ef0e:	6023      	str	r3, [r4, #0]
 800ef10:	e00e      	b.n	800ef30 <_malloc_r+0xa0>
 800ef12:	6822      	ldr	r2, [r4, #0]
 800ef14:	1b52      	subs	r2, r2, r5
 800ef16:	d41e      	bmi.n	800ef56 <_malloc_r+0xc6>
 800ef18:	2a0b      	cmp	r2, #11
 800ef1a:	d916      	bls.n	800ef4a <_malloc_r+0xba>
 800ef1c:	1961      	adds	r1, r4, r5
 800ef1e:	42a3      	cmp	r3, r4
 800ef20:	6025      	str	r5, [r4, #0]
 800ef22:	bf18      	it	ne
 800ef24:	6059      	strne	r1, [r3, #4]
 800ef26:	6863      	ldr	r3, [r4, #4]
 800ef28:	bf08      	it	eq
 800ef2a:	6031      	streq	r1, [r6, #0]
 800ef2c:	5162      	str	r2, [r4, r5]
 800ef2e:	604b      	str	r3, [r1, #4]
 800ef30:	4638      	mov	r0, r7
 800ef32:	f104 060b 	add.w	r6, r4, #11
 800ef36:	f000 fbe1 	bl	800f6fc <__malloc_unlock>
 800ef3a:	f026 0607 	bic.w	r6, r6, #7
 800ef3e:	1d23      	adds	r3, r4, #4
 800ef40:	1af2      	subs	r2, r6, r3
 800ef42:	d0b6      	beq.n	800eeb2 <_malloc_r+0x22>
 800ef44:	1b9b      	subs	r3, r3, r6
 800ef46:	50a3      	str	r3, [r4, r2]
 800ef48:	e7b3      	b.n	800eeb2 <_malloc_r+0x22>
 800ef4a:	6862      	ldr	r2, [r4, #4]
 800ef4c:	42a3      	cmp	r3, r4
 800ef4e:	bf0c      	ite	eq
 800ef50:	6032      	streq	r2, [r6, #0]
 800ef52:	605a      	strne	r2, [r3, #4]
 800ef54:	e7ec      	b.n	800ef30 <_malloc_r+0xa0>
 800ef56:	4623      	mov	r3, r4
 800ef58:	6864      	ldr	r4, [r4, #4]
 800ef5a:	e7b2      	b.n	800eec2 <_malloc_r+0x32>
 800ef5c:	4634      	mov	r4, r6
 800ef5e:	6876      	ldr	r6, [r6, #4]
 800ef60:	e7b9      	b.n	800eed6 <_malloc_r+0x46>
 800ef62:	230c      	movs	r3, #12
 800ef64:	603b      	str	r3, [r7, #0]
 800ef66:	4638      	mov	r0, r7
 800ef68:	f000 fbc8 	bl	800f6fc <__malloc_unlock>
 800ef6c:	e7a1      	b.n	800eeb2 <_malloc_r+0x22>
 800ef6e:	6025      	str	r5, [r4, #0]
 800ef70:	e7de      	b.n	800ef30 <_malloc_r+0xa0>
 800ef72:	bf00      	nop
 800ef74:	20000ee0 	.word	0x20000ee0

0800ef78 <__ssputs_r>:
 800ef78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef7c:	688e      	ldr	r6, [r1, #8]
 800ef7e:	429e      	cmp	r6, r3
 800ef80:	4682      	mov	sl, r0
 800ef82:	460c      	mov	r4, r1
 800ef84:	4690      	mov	r8, r2
 800ef86:	461f      	mov	r7, r3
 800ef88:	d838      	bhi.n	800effc <__ssputs_r+0x84>
 800ef8a:	898a      	ldrh	r2, [r1, #12]
 800ef8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ef90:	d032      	beq.n	800eff8 <__ssputs_r+0x80>
 800ef92:	6825      	ldr	r5, [r4, #0]
 800ef94:	6909      	ldr	r1, [r1, #16]
 800ef96:	eba5 0901 	sub.w	r9, r5, r1
 800ef9a:	6965      	ldr	r5, [r4, #20]
 800ef9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800efa0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800efa4:	3301      	adds	r3, #1
 800efa6:	444b      	add	r3, r9
 800efa8:	106d      	asrs	r5, r5, #1
 800efaa:	429d      	cmp	r5, r3
 800efac:	bf38      	it	cc
 800efae:	461d      	movcc	r5, r3
 800efb0:	0553      	lsls	r3, r2, #21
 800efb2:	d531      	bpl.n	800f018 <__ssputs_r+0xa0>
 800efb4:	4629      	mov	r1, r5
 800efb6:	f7ff ff6b 	bl	800ee90 <_malloc_r>
 800efba:	4606      	mov	r6, r0
 800efbc:	b950      	cbnz	r0, 800efd4 <__ssputs_r+0x5c>
 800efbe:	230c      	movs	r3, #12
 800efc0:	f8ca 3000 	str.w	r3, [sl]
 800efc4:	89a3      	ldrh	r3, [r4, #12]
 800efc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efca:	81a3      	strh	r3, [r4, #12]
 800efcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800efd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efd4:	6921      	ldr	r1, [r4, #16]
 800efd6:	464a      	mov	r2, r9
 800efd8:	f7fd fc8c 	bl	800c8f4 <memcpy>
 800efdc:	89a3      	ldrh	r3, [r4, #12]
 800efde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800efe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efe6:	81a3      	strh	r3, [r4, #12]
 800efe8:	6126      	str	r6, [r4, #16]
 800efea:	6165      	str	r5, [r4, #20]
 800efec:	444e      	add	r6, r9
 800efee:	eba5 0509 	sub.w	r5, r5, r9
 800eff2:	6026      	str	r6, [r4, #0]
 800eff4:	60a5      	str	r5, [r4, #8]
 800eff6:	463e      	mov	r6, r7
 800eff8:	42be      	cmp	r6, r7
 800effa:	d900      	bls.n	800effe <__ssputs_r+0x86>
 800effc:	463e      	mov	r6, r7
 800effe:	6820      	ldr	r0, [r4, #0]
 800f000:	4632      	mov	r2, r6
 800f002:	4641      	mov	r1, r8
 800f004:	f000 fb5a 	bl	800f6bc <memmove>
 800f008:	68a3      	ldr	r3, [r4, #8]
 800f00a:	1b9b      	subs	r3, r3, r6
 800f00c:	60a3      	str	r3, [r4, #8]
 800f00e:	6823      	ldr	r3, [r4, #0]
 800f010:	4433      	add	r3, r6
 800f012:	6023      	str	r3, [r4, #0]
 800f014:	2000      	movs	r0, #0
 800f016:	e7db      	b.n	800efd0 <__ssputs_r+0x58>
 800f018:	462a      	mov	r2, r5
 800f01a:	f000 fb75 	bl	800f708 <_realloc_r>
 800f01e:	4606      	mov	r6, r0
 800f020:	2800      	cmp	r0, #0
 800f022:	d1e1      	bne.n	800efe8 <__ssputs_r+0x70>
 800f024:	6921      	ldr	r1, [r4, #16]
 800f026:	4650      	mov	r0, sl
 800f028:	f7ff fec6 	bl	800edb8 <_free_r>
 800f02c:	e7c7      	b.n	800efbe <__ssputs_r+0x46>
	...

0800f030 <_svfiprintf_r>:
 800f030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f034:	4698      	mov	r8, r3
 800f036:	898b      	ldrh	r3, [r1, #12]
 800f038:	061b      	lsls	r3, r3, #24
 800f03a:	b09d      	sub	sp, #116	; 0x74
 800f03c:	4607      	mov	r7, r0
 800f03e:	460d      	mov	r5, r1
 800f040:	4614      	mov	r4, r2
 800f042:	d50e      	bpl.n	800f062 <_svfiprintf_r+0x32>
 800f044:	690b      	ldr	r3, [r1, #16]
 800f046:	b963      	cbnz	r3, 800f062 <_svfiprintf_r+0x32>
 800f048:	2140      	movs	r1, #64	; 0x40
 800f04a:	f7ff ff21 	bl	800ee90 <_malloc_r>
 800f04e:	6028      	str	r0, [r5, #0]
 800f050:	6128      	str	r0, [r5, #16]
 800f052:	b920      	cbnz	r0, 800f05e <_svfiprintf_r+0x2e>
 800f054:	230c      	movs	r3, #12
 800f056:	603b      	str	r3, [r7, #0]
 800f058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f05c:	e0d1      	b.n	800f202 <_svfiprintf_r+0x1d2>
 800f05e:	2340      	movs	r3, #64	; 0x40
 800f060:	616b      	str	r3, [r5, #20]
 800f062:	2300      	movs	r3, #0
 800f064:	9309      	str	r3, [sp, #36]	; 0x24
 800f066:	2320      	movs	r3, #32
 800f068:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f06c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f070:	2330      	movs	r3, #48	; 0x30
 800f072:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f21c <_svfiprintf_r+0x1ec>
 800f076:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f07a:	f04f 0901 	mov.w	r9, #1
 800f07e:	4623      	mov	r3, r4
 800f080:	469a      	mov	sl, r3
 800f082:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f086:	b10a      	cbz	r2, 800f08c <_svfiprintf_r+0x5c>
 800f088:	2a25      	cmp	r2, #37	; 0x25
 800f08a:	d1f9      	bne.n	800f080 <_svfiprintf_r+0x50>
 800f08c:	ebba 0b04 	subs.w	fp, sl, r4
 800f090:	d00b      	beq.n	800f0aa <_svfiprintf_r+0x7a>
 800f092:	465b      	mov	r3, fp
 800f094:	4622      	mov	r2, r4
 800f096:	4629      	mov	r1, r5
 800f098:	4638      	mov	r0, r7
 800f09a:	f7ff ff6d 	bl	800ef78 <__ssputs_r>
 800f09e:	3001      	adds	r0, #1
 800f0a0:	f000 80aa 	beq.w	800f1f8 <_svfiprintf_r+0x1c8>
 800f0a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0a6:	445a      	add	r2, fp
 800f0a8:	9209      	str	r2, [sp, #36]	; 0x24
 800f0aa:	f89a 3000 	ldrb.w	r3, [sl]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	f000 80a2 	beq.w	800f1f8 <_svfiprintf_r+0x1c8>
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f0ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f0be:	f10a 0a01 	add.w	sl, sl, #1
 800f0c2:	9304      	str	r3, [sp, #16]
 800f0c4:	9307      	str	r3, [sp, #28]
 800f0c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f0ca:	931a      	str	r3, [sp, #104]	; 0x68
 800f0cc:	4654      	mov	r4, sl
 800f0ce:	2205      	movs	r2, #5
 800f0d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0d4:	4851      	ldr	r0, [pc, #324]	; (800f21c <_svfiprintf_r+0x1ec>)
 800f0d6:	f7f1 f883 	bl	80001e0 <memchr>
 800f0da:	9a04      	ldr	r2, [sp, #16]
 800f0dc:	b9d8      	cbnz	r0, 800f116 <_svfiprintf_r+0xe6>
 800f0de:	06d0      	lsls	r0, r2, #27
 800f0e0:	bf44      	itt	mi
 800f0e2:	2320      	movmi	r3, #32
 800f0e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0e8:	0711      	lsls	r1, r2, #28
 800f0ea:	bf44      	itt	mi
 800f0ec:	232b      	movmi	r3, #43	; 0x2b
 800f0ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0f2:	f89a 3000 	ldrb.w	r3, [sl]
 800f0f6:	2b2a      	cmp	r3, #42	; 0x2a
 800f0f8:	d015      	beq.n	800f126 <_svfiprintf_r+0xf6>
 800f0fa:	9a07      	ldr	r2, [sp, #28]
 800f0fc:	4654      	mov	r4, sl
 800f0fe:	2000      	movs	r0, #0
 800f100:	f04f 0c0a 	mov.w	ip, #10
 800f104:	4621      	mov	r1, r4
 800f106:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f10a:	3b30      	subs	r3, #48	; 0x30
 800f10c:	2b09      	cmp	r3, #9
 800f10e:	d94e      	bls.n	800f1ae <_svfiprintf_r+0x17e>
 800f110:	b1b0      	cbz	r0, 800f140 <_svfiprintf_r+0x110>
 800f112:	9207      	str	r2, [sp, #28]
 800f114:	e014      	b.n	800f140 <_svfiprintf_r+0x110>
 800f116:	eba0 0308 	sub.w	r3, r0, r8
 800f11a:	fa09 f303 	lsl.w	r3, r9, r3
 800f11e:	4313      	orrs	r3, r2
 800f120:	9304      	str	r3, [sp, #16]
 800f122:	46a2      	mov	sl, r4
 800f124:	e7d2      	b.n	800f0cc <_svfiprintf_r+0x9c>
 800f126:	9b03      	ldr	r3, [sp, #12]
 800f128:	1d19      	adds	r1, r3, #4
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	9103      	str	r1, [sp, #12]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	bfbb      	ittet	lt
 800f132:	425b      	neglt	r3, r3
 800f134:	f042 0202 	orrlt.w	r2, r2, #2
 800f138:	9307      	strge	r3, [sp, #28]
 800f13a:	9307      	strlt	r3, [sp, #28]
 800f13c:	bfb8      	it	lt
 800f13e:	9204      	strlt	r2, [sp, #16]
 800f140:	7823      	ldrb	r3, [r4, #0]
 800f142:	2b2e      	cmp	r3, #46	; 0x2e
 800f144:	d10c      	bne.n	800f160 <_svfiprintf_r+0x130>
 800f146:	7863      	ldrb	r3, [r4, #1]
 800f148:	2b2a      	cmp	r3, #42	; 0x2a
 800f14a:	d135      	bne.n	800f1b8 <_svfiprintf_r+0x188>
 800f14c:	9b03      	ldr	r3, [sp, #12]
 800f14e:	1d1a      	adds	r2, r3, #4
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	9203      	str	r2, [sp, #12]
 800f154:	2b00      	cmp	r3, #0
 800f156:	bfb8      	it	lt
 800f158:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f15c:	3402      	adds	r4, #2
 800f15e:	9305      	str	r3, [sp, #20]
 800f160:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f22c <_svfiprintf_r+0x1fc>
 800f164:	7821      	ldrb	r1, [r4, #0]
 800f166:	2203      	movs	r2, #3
 800f168:	4650      	mov	r0, sl
 800f16a:	f7f1 f839 	bl	80001e0 <memchr>
 800f16e:	b140      	cbz	r0, 800f182 <_svfiprintf_r+0x152>
 800f170:	2340      	movs	r3, #64	; 0x40
 800f172:	eba0 000a 	sub.w	r0, r0, sl
 800f176:	fa03 f000 	lsl.w	r0, r3, r0
 800f17a:	9b04      	ldr	r3, [sp, #16]
 800f17c:	4303      	orrs	r3, r0
 800f17e:	3401      	adds	r4, #1
 800f180:	9304      	str	r3, [sp, #16]
 800f182:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f186:	4826      	ldr	r0, [pc, #152]	; (800f220 <_svfiprintf_r+0x1f0>)
 800f188:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f18c:	2206      	movs	r2, #6
 800f18e:	f7f1 f827 	bl	80001e0 <memchr>
 800f192:	2800      	cmp	r0, #0
 800f194:	d038      	beq.n	800f208 <_svfiprintf_r+0x1d8>
 800f196:	4b23      	ldr	r3, [pc, #140]	; (800f224 <_svfiprintf_r+0x1f4>)
 800f198:	bb1b      	cbnz	r3, 800f1e2 <_svfiprintf_r+0x1b2>
 800f19a:	9b03      	ldr	r3, [sp, #12]
 800f19c:	3307      	adds	r3, #7
 800f19e:	f023 0307 	bic.w	r3, r3, #7
 800f1a2:	3308      	adds	r3, #8
 800f1a4:	9303      	str	r3, [sp, #12]
 800f1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1a8:	4433      	add	r3, r6
 800f1aa:	9309      	str	r3, [sp, #36]	; 0x24
 800f1ac:	e767      	b.n	800f07e <_svfiprintf_r+0x4e>
 800f1ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800f1b2:	460c      	mov	r4, r1
 800f1b4:	2001      	movs	r0, #1
 800f1b6:	e7a5      	b.n	800f104 <_svfiprintf_r+0xd4>
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	3401      	adds	r4, #1
 800f1bc:	9305      	str	r3, [sp, #20]
 800f1be:	4619      	mov	r1, r3
 800f1c0:	f04f 0c0a 	mov.w	ip, #10
 800f1c4:	4620      	mov	r0, r4
 800f1c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f1ca:	3a30      	subs	r2, #48	; 0x30
 800f1cc:	2a09      	cmp	r2, #9
 800f1ce:	d903      	bls.n	800f1d8 <_svfiprintf_r+0x1a8>
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d0c5      	beq.n	800f160 <_svfiprintf_r+0x130>
 800f1d4:	9105      	str	r1, [sp, #20]
 800f1d6:	e7c3      	b.n	800f160 <_svfiprintf_r+0x130>
 800f1d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f1dc:	4604      	mov	r4, r0
 800f1de:	2301      	movs	r3, #1
 800f1e0:	e7f0      	b.n	800f1c4 <_svfiprintf_r+0x194>
 800f1e2:	ab03      	add	r3, sp, #12
 800f1e4:	9300      	str	r3, [sp, #0]
 800f1e6:	462a      	mov	r2, r5
 800f1e8:	4b0f      	ldr	r3, [pc, #60]	; (800f228 <_svfiprintf_r+0x1f8>)
 800f1ea:	a904      	add	r1, sp, #16
 800f1ec:	4638      	mov	r0, r7
 800f1ee:	f7fd fc37 	bl	800ca60 <_printf_float>
 800f1f2:	1c42      	adds	r2, r0, #1
 800f1f4:	4606      	mov	r6, r0
 800f1f6:	d1d6      	bne.n	800f1a6 <_svfiprintf_r+0x176>
 800f1f8:	89ab      	ldrh	r3, [r5, #12]
 800f1fa:	065b      	lsls	r3, r3, #25
 800f1fc:	f53f af2c 	bmi.w	800f058 <_svfiprintf_r+0x28>
 800f200:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f202:	b01d      	add	sp, #116	; 0x74
 800f204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f208:	ab03      	add	r3, sp, #12
 800f20a:	9300      	str	r3, [sp, #0]
 800f20c:	462a      	mov	r2, r5
 800f20e:	4b06      	ldr	r3, [pc, #24]	; (800f228 <_svfiprintf_r+0x1f8>)
 800f210:	a904      	add	r1, sp, #16
 800f212:	4638      	mov	r0, r7
 800f214:	f7fd fec8 	bl	800cfa8 <_printf_i>
 800f218:	e7eb      	b.n	800f1f2 <_svfiprintf_r+0x1c2>
 800f21a:	bf00      	nop
 800f21c:	08010054 	.word	0x08010054
 800f220:	0801005e 	.word	0x0801005e
 800f224:	0800ca61 	.word	0x0800ca61
 800f228:	0800ef79 	.word	0x0800ef79
 800f22c:	0801005a 	.word	0x0801005a

0800f230 <__sfputc_r>:
 800f230:	6893      	ldr	r3, [r2, #8]
 800f232:	3b01      	subs	r3, #1
 800f234:	2b00      	cmp	r3, #0
 800f236:	b410      	push	{r4}
 800f238:	6093      	str	r3, [r2, #8]
 800f23a:	da08      	bge.n	800f24e <__sfputc_r+0x1e>
 800f23c:	6994      	ldr	r4, [r2, #24]
 800f23e:	42a3      	cmp	r3, r4
 800f240:	db01      	blt.n	800f246 <__sfputc_r+0x16>
 800f242:	290a      	cmp	r1, #10
 800f244:	d103      	bne.n	800f24e <__sfputc_r+0x1e>
 800f246:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f24a:	f7fe b8b5 	b.w	800d3b8 <__swbuf_r>
 800f24e:	6813      	ldr	r3, [r2, #0]
 800f250:	1c58      	adds	r0, r3, #1
 800f252:	6010      	str	r0, [r2, #0]
 800f254:	7019      	strb	r1, [r3, #0]
 800f256:	4608      	mov	r0, r1
 800f258:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f25c:	4770      	bx	lr

0800f25e <__sfputs_r>:
 800f25e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f260:	4606      	mov	r6, r0
 800f262:	460f      	mov	r7, r1
 800f264:	4614      	mov	r4, r2
 800f266:	18d5      	adds	r5, r2, r3
 800f268:	42ac      	cmp	r4, r5
 800f26a:	d101      	bne.n	800f270 <__sfputs_r+0x12>
 800f26c:	2000      	movs	r0, #0
 800f26e:	e007      	b.n	800f280 <__sfputs_r+0x22>
 800f270:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f274:	463a      	mov	r2, r7
 800f276:	4630      	mov	r0, r6
 800f278:	f7ff ffda 	bl	800f230 <__sfputc_r>
 800f27c:	1c43      	adds	r3, r0, #1
 800f27e:	d1f3      	bne.n	800f268 <__sfputs_r+0xa>
 800f280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f284 <_vfiprintf_r>:
 800f284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f288:	460d      	mov	r5, r1
 800f28a:	b09d      	sub	sp, #116	; 0x74
 800f28c:	4614      	mov	r4, r2
 800f28e:	4698      	mov	r8, r3
 800f290:	4606      	mov	r6, r0
 800f292:	b118      	cbz	r0, 800f29c <_vfiprintf_r+0x18>
 800f294:	6983      	ldr	r3, [r0, #24]
 800f296:	b90b      	cbnz	r3, 800f29c <_vfiprintf_r+0x18>
 800f298:	f7ff f8e2 	bl	800e460 <__sinit>
 800f29c:	4b89      	ldr	r3, [pc, #548]	; (800f4c4 <_vfiprintf_r+0x240>)
 800f29e:	429d      	cmp	r5, r3
 800f2a0:	d11b      	bne.n	800f2da <_vfiprintf_r+0x56>
 800f2a2:	6875      	ldr	r5, [r6, #4]
 800f2a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2a6:	07d9      	lsls	r1, r3, #31
 800f2a8:	d405      	bmi.n	800f2b6 <_vfiprintf_r+0x32>
 800f2aa:	89ab      	ldrh	r3, [r5, #12]
 800f2ac:	059a      	lsls	r2, r3, #22
 800f2ae:	d402      	bmi.n	800f2b6 <_vfiprintf_r+0x32>
 800f2b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f2b2:	f7ff f978 	bl	800e5a6 <__retarget_lock_acquire_recursive>
 800f2b6:	89ab      	ldrh	r3, [r5, #12]
 800f2b8:	071b      	lsls	r3, r3, #28
 800f2ba:	d501      	bpl.n	800f2c0 <_vfiprintf_r+0x3c>
 800f2bc:	692b      	ldr	r3, [r5, #16]
 800f2be:	b9eb      	cbnz	r3, 800f2fc <_vfiprintf_r+0x78>
 800f2c0:	4629      	mov	r1, r5
 800f2c2:	4630      	mov	r0, r6
 800f2c4:	f7fe f8ca 	bl	800d45c <__swsetup_r>
 800f2c8:	b1c0      	cbz	r0, 800f2fc <_vfiprintf_r+0x78>
 800f2ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2cc:	07dc      	lsls	r4, r3, #31
 800f2ce:	d50e      	bpl.n	800f2ee <_vfiprintf_r+0x6a>
 800f2d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f2d4:	b01d      	add	sp, #116	; 0x74
 800f2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2da:	4b7b      	ldr	r3, [pc, #492]	; (800f4c8 <_vfiprintf_r+0x244>)
 800f2dc:	429d      	cmp	r5, r3
 800f2de:	d101      	bne.n	800f2e4 <_vfiprintf_r+0x60>
 800f2e0:	68b5      	ldr	r5, [r6, #8]
 800f2e2:	e7df      	b.n	800f2a4 <_vfiprintf_r+0x20>
 800f2e4:	4b79      	ldr	r3, [pc, #484]	; (800f4cc <_vfiprintf_r+0x248>)
 800f2e6:	429d      	cmp	r5, r3
 800f2e8:	bf08      	it	eq
 800f2ea:	68f5      	ldreq	r5, [r6, #12]
 800f2ec:	e7da      	b.n	800f2a4 <_vfiprintf_r+0x20>
 800f2ee:	89ab      	ldrh	r3, [r5, #12]
 800f2f0:	0598      	lsls	r0, r3, #22
 800f2f2:	d4ed      	bmi.n	800f2d0 <_vfiprintf_r+0x4c>
 800f2f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f2f6:	f7ff f957 	bl	800e5a8 <__retarget_lock_release_recursive>
 800f2fa:	e7e9      	b.n	800f2d0 <_vfiprintf_r+0x4c>
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	9309      	str	r3, [sp, #36]	; 0x24
 800f300:	2320      	movs	r3, #32
 800f302:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f306:	f8cd 800c 	str.w	r8, [sp, #12]
 800f30a:	2330      	movs	r3, #48	; 0x30
 800f30c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f4d0 <_vfiprintf_r+0x24c>
 800f310:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f314:	f04f 0901 	mov.w	r9, #1
 800f318:	4623      	mov	r3, r4
 800f31a:	469a      	mov	sl, r3
 800f31c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f320:	b10a      	cbz	r2, 800f326 <_vfiprintf_r+0xa2>
 800f322:	2a25      	cmp	r2, #37	; 0x25
 800f324:	d1f9      	bne.n	800f31a <_vfiprintf_r+0x96>
 800f326:	ebba 0b04 	subs.w	fp, sl, r4
 800f32a:	d00b      	beq.n	800f344 <_vfiprintf_r+0xc0>
 800f32c:	465b      	mov	r3, fp
 800f32e:	4622      	mov	r2, r4
 800f330:	4629      	mov	r1, r5
 800f332:	4630      	mov	r0, r6
 800f334:	f7ff ff93 	bl	800f25e <__sfputs_r>
 800f338:	3001      	adds	r0, #1
 800f33a:	f000 80aa 	beq.w	800f492 <_vfiprintf_r+0x20e>
 800f33e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f340:	445a      	add	r2, fp
 800f342:	9209      	str	r2, [sp, #36]	; 0x24
 800f344:	f89a 3000 	ldrb.w	r3, [sl]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	f000 80a2 	beq.w	800f492 <_vfiprintf_r+0x20e>
 800f34e:	2300      	movs	r3, #0
 800f350:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f354:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f358:	f10a 0a01 	add.w	sl, sl, #1
 800f35c:	9304      	str	r3, [sp, #16]
 800f35e:	9307      	str	r3, [sp, #28]
 800f360:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f364:	931a      	str	r3, [sp, #104]	; 0x68
 800f366:	4654      	mov	r4, sl
 800f368:	2205      	movs	r2, #5
 800f36a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f36e:	4858      	ldr	r0, [pc, #352]	; (800f4d0 <_vfiprintf_r+0x24c>)
 800f370:	f7f0 ff36 	bl	80001e0 <memchr>
 800f374:	9a04      	ldr	r2, [sp, #16]
 800f376:	b9d8      	cbnz	r0, 800f3b0 <_vfiprintf_r+0x12c>
 800f378:	06d1      	lsls	r1, r2, #27
 800f37a:	bf44      	itt	mi
 800f37c:	2320      	movmi	r3, #32
 800f37e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f382:	0713      	lsls	r3, r2, #28
 800f384:	bf44      	itt	mi
 800f386:	232b      	movmi	r3, #43	; 0x2b
 800f388:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f38c:	f89a 3000 	ldrb.w	r3, [sl]
 800f390:	2b2a      	cmp	r3, #42	; 0x2a
 800f392:	d015      	beq.n	800f3c0 <_vfiprintf_r+0x13c>
 800f394:	9a07      	ldr	r2, [sp, #28]
 800f396:	4654      	mov	r4, sl
 800f398:	2000      	movs	r0, #0
 800f39a:	f04f 0c0a 	mov.w	ip, #10
 800f39e:	4621      	mov	r1, r4
 800f3a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f3a4:	3b30      	subs	r3, #48	; 0x30
 800f3a6:	2b09      	cmp	r3, #9
 800f3a8:	d94e      	bls.n	800f448 <_vfiprintf_r+0x1c4>
 800f3aa:	b1b0      	cbz	r0, 800f3da <_vfiprintf_r+0x156>
 800f3ac:	9207      	str	r2, [sp, #28]
 800f3ae:	e014      	b.n	800f3da <_vfiprintf_r+0x156>
 800f3b0:	eba0 0308 	sub.w	r3, r0, r8
 800f3b4:	fa09 f303 	lsl.w	r3, r9, r3
 800f3b8:	4313      	orrs	r3, r2
 800f3ba:	9304      	str	r3, [sp, #16]
 800f3bc:	46a2      	mov	sl, r4
 800f3be:	e7d2      	b.n	800f366 <_vfiprintf_r+0xe2>
 800f3c0:	9b03      	ldr	r3, [sp, #12]
 800f3c2:	1d19      	adds	r1, r3, #4
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	9103      	str	r1, [sp, #12]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	bfbb      	ittet	lt
 800f3cc:	425b      	neglt	r3, r3
 800f3ce:	f042 0202 	orrlt.w	r2, r2, #2
 800f3d2:	9307      	strge	r3, [sp, #28]
 800f3d4:	9307      	strlt	r3, [sp, #28]
 800f3d6:	bfb8      	it	lt
 800f3d8:	9204      	strlt	r2, [sp, #16]
 800f3da:	7823      	ldrb	r3, [r4, #0]
 800f3dc:	2b2e      	cmp	r3, #46	; 0x2e
 800f3de:	d10c      	bne.n	800f3fa <_vfiprintf_r+0x176>
 800f3e0:	7863      	ldrb	r3, [r4, #1]
 800f3e2:	2b2a      	cmp	r3, #42	; 0x2a
 800f3e4:	d135      	bne.n	800f452 <_vfiprintf_r+0x1ce>
 800f3e6:	9b03      	ldr	r3, [sp, #12]
 800f3e8:	1d1a      	adds	r2, r3, #4
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	9203      	str	r2, [sp, #12]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	bfb8      	it	lt
 800f3f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f3f6:	3402      	adds	r4, #2
 800f3f8:	9305      	str	r3, [sp, #20]
 800f3fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f4e0 <_vfiprintf_r+0x25c>
 800f3fe:	7821      	ldrb	r1, [r4, #0]
 800f400:	2203      	movs	r2, #3
 800f402:	4650      	mov	r0, sl
 800f404:	f7f0 feec 	bl	80001e0 <memchr>
 800f408:	b140      	cbz	r0, 800f41c <_vfiprintf_r+0x198>
 800f40a:	2340      	movs	r3, #64	; 0x40
 800f40c:	eba0 000a 	sub.w	r0, r0, sl
 800f410:	fa03 f000 	lsl.w	r0, r3, r0
 800f414:	9b04      	ldr	r3, [sp, #16]
 800f416:	4303      	orrs	r3, r0
 800f418:	3401      	adds	r4, #1
 800f41a:	9304      	str	r3, [sp, #16]
 800f41c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f420:	482c      	ldr	r0, [pc, #176]	; (800f4d4 <_vfiprintf_r+0x250>)
 800f422:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f426:	2206      	movs	r2, #6
 800f428:	f7f0 feda 	bl	80001e0 <memchr>
 800f42c:	2800      	cmp	r0, #0
 800f42e:	d03f      	beq.n	800f4b0 <_vfiprintf_r+0x22c>
 800f430:	4b29      	ldr	r3, [pc, #164]	; (800f4d8 <_vfiprintf_r+0x254>)
 800f432:	bb1b      	cbnz	r3, 800f47c <_vfiprintf_r+0x1f8>
 800f434:	9b03      	ldr	r3, [sp, #12]
 800f436:	3307      	adds	r3, #7
 800f438:	f023 0307 	bic.w	r3, r3, #7
 800f43c:	3308      	adds	r3, #8
 800f43e:	9303      	str	r3, [sp, #12]
 800f440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f442:	443b      	add	r3, r7
 800f444:	9309      	str	r3, [sp, #36]	; 0x24
 800f446:	e767      	b.n	800f318 <_vfiprintf_r+0x94>
 800f448:	fb0c 3202 	mla	r2, ip, r2, r3
 800f44c:	460c      	mov	r4, r1
 800f44e:	2001      	movs	r0, #1
 800f450:	e7a5      	b.n	800f39e <_vfiprintf_r+0x11a>
 800f452:	2300      	movs	r3, #0
 800f454:	3401      	adds	r4, #1
 800f456:	9305      	str	r3, [sp, #20]
 800f458:	4619      	mov	r1, r3
 800f45a:	f04f 0c0a 	mov.w	ip, #10
 800f45e:	4620      	mov	r0, r4
 800f460:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f464:	3a30      	subs	r2, #48	; 0x30
 800f466:	2a09      	cmp	r2, #9
 800f468:	d903      	bls.n	800f472 <_vfiprintf_r+0x1ee>
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d0c5      	beq.n	800f3fa <_vfiprintf_r+0x176>
 800f46e:	9105      	str	r1, [sp, #20]
 800f470:	e7c3      	b.n	800f3fa <_vfiprintf_r+0x176>
 800f472:	fb0c 2101 	mla	r1, ip, r1, r2
 800f476:	4604      	mov	r4, r0
 800f478:	2301      	movs	r3, #1
 800f47a:	e7f0      	b.n	800f45e <_vfiprintf_r+0x1da>
 800f47c:	ab03      	add	r3, sp, #12
 800f47e:	9300      	str	r3, [sp, #0]
 800f480:	462a      	mov	r2, r5
 800f482:	4b16      	ldr	r3, [pc, #88]	; (800f4dc <_vfiprintf_r+0x258>)
 800f484:	a904      	add	r1, sp, #16
 800f486:	4630      	mov	r0, r6
 800f488:	f7fd faea 	bl	800ca60 <_printf_float>
 800f48c:	4607      	mov	r7, r0
 800f48e:	1c78      	adds	r0, r7, #1
 800f490:	d1d6      	bne.n	800f440 <_vfiprintf_r+0x1bc>
 800f492:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f494:	07d9      	lsls	r1, r3, #31
 800f496:	d405      	bmi.n	800f4a4 <_vfiprintf_r+0x220>
 800f498:	89ab      	ldrh	r3, [r5, #12]
 800f49a:	059a      	lsls	r2, r3, #22
 800f49c:	d402      	bmi.n	800f4a4 <_vfiprintf_r+0x220>
 800f49e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f4a0:	f7ff f882 	bl	800e5a8 <__retarget_lock_release_recursive>
 800f4a4:	89ab      	ldrh	r3, [r5, #12]
 800f4a6:	065b      	lsls	r3, r3, #25
 800f4a8:	f53f af12 	bmi.w	800f2d0 <_vfiprintf_r+0x4c>
 800f4ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f4ae:	e711      	b.n	800f2d4 <_vfiprintf_r+0x50>
 800f4b0:	ab03      	add	r3, sp, #12
 800f4b2:	9300      	str	r3, [sp, #0]
 800f4b4:	462a      	mov	r2, r5
 800f4b6:	4b09      	ldr	r3, [pc, #36]	; (800f4dc <_vfiprintf_r+0x258>)
 800f4b8:	a904      	add	r1, sp, #16
 800f4ba:	4630      	mov	r0, r6
 800f4bc:	f7fd fd74 	bl	800cfa8 <_printf_i>
 800f4c0:	e7e4      	b.n	800f48c <_vfiprintf_r+0x208>
 800f4c2:	bf00      	nop
 800f4c4:	0800feb8 	.word	0x0800feb8
 800f4c8:	0800fed8 	.word	0x0800fed8
 800f4cc:	0800fe98 	.word	0x0800fe98
 800f4d0:	08010054 	.word	0x08010054
 800f4d4:	0801005e 	.word	0x0801005e
 800f4d8:	0800ca61 	.word	0x0800ca61
 800f4dc:	0800f25f 	.word	0x0800f25f
 800f4e0:	0801005a 	.word	0x0801005a

0800f4e4 <_sbrk_r>:
 800f4e4:	b538      	push	{r3, r4, r5, lr}
 800f4e6:	4d06      	ldr	r5, [pc, #24]	; (800f500 <_sbrk_r+0x1c>)
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	4604      	mov	r4, r0
 800f4ec:	4608      	mov	r0, r1
 800f4ee:	602b      	str	r3, [r5, #0]
 800f4f0:	f7f3 fb92 	bl	8002c18 <_sbrk>
 800f4f4:	1c43      	adds	r3, r0, #1
 800f4f6:	d102      	bne.n	800f4fe <_sbrk_r+0x1a>
 800f4f8:	682b      	ldr	r3, [r5, #0]
 800f4fa:	b103      	cbz	r3, 800f4fe <_sbrk_r+0x1a>
 800f4fc:	6023      	str	r3, [r4, #0]
 800f4fe:	bd38      	pop	{r3, r4, r5, pc}
 800f500:	20000ee8 	.word	0x20000ee8

0800f504 <__sread>:
 800f504:	b510      	push	{r4, lr}
 800f506:	460c      	mov	r4, r1
 800f508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f50c:	f000 f92c 	bl	800f768 <_read_r>
 800f510:	2800      	cmp	r0, #0
 800f512:	bfab      	itete	ge
 800f514:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f516:	89a3      	ldrhlt	r3, [r4, #12]
 800f518:	181b      	addge	r3, r3, r0
 800f51a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f51e:	bfac      	ite	ge
 800f520:	6563      	strge	r3, [r4, #84]	; 0x54
 800f522:	81a3      	strhlt	r3, [r4, #12]
 800f524:	bd10      	pop	{r4, pc}

0800f526 <__swrite>:
 800f526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f52a:	461f      	mov	r7, r3
 800f52c:	898b      	ldrh	r3, [r1, #12]
 800f52e:	05db      	lsls	r3, r3, #23
 800f530:	4605      	mov	r5, r0
 800f532:	460c      	mov	r4, r1
 800f534:	4616      	mov	r6, r2
 800f536:	d505      	bpl.n	800f544 <__swrite+0x1e>
 800f538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f53c:	2302      	movs	r3, #2
 800f53e:	2200      	movs	r2, #0
 800f540:	f000 f898 	bl	800f674 <_lseek_r>
 800f544:	89a3      	ldrh	r3, [r4, #12]
 800f546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f54a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f54e:	81a3      	strh	r3, [r4, #12]
 800f550:	4632      	mov	r2, r6
 800f552:	463b      	mov	r3, r7
 800f554:	4628      	mov	r0, r5
 800f556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f55a:	f000 b817 	b.w	800f58c <_write_r>

0800f55e <__sseek>:
 800f55e:	b510      	push	{r4, lr}
 800f560:	460c      	mov	r4, r1
 800f562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f566:	f000 f885 	bl	800f674 <_lseek_r>
 800f56a:	1c43      	adds	r3, r0, #1
 800f56c:	89a3      	ldrh	r3, [r4, #12]
 800f56e:	bf15      	itete	ne
 800f570:	6560      	strne	r0, [r4, #84]	; 0x54
 800f572:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f576:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f57a:	81a3      	strheq	r3, [r4, #12]
 800f57c:	bf18      	it	ne
 800f57e:	81a3      	strhne	r3, [r4, #12]
 800f580:	bd10      	pop	{r4, pc}

0800f582 <__sclose>:
 800f582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f586:	f000 b831 	b.w	800f5ec <_close_r>
	...

0800f58c <_write_r>:
 800f58c:	b538      	push	{r3, r4, r5, lr}
 800f58e:	4d07      	ldr	r5, [pc, #28]	; (800f5ac <_write_r+0x20>)
 800f590:	4604      	mov	r4, r0
 800f592:	4608      	mov	r0, r1
 800f594:	4611      	mov	r1, r2
 800f596:	2200      	movs	r2, #0
 800f598:	602a      	str	r2, [r5, #0]
 800f59a:	461a      	mov	r2, r3
 800f59c:	f7f3 faeb 	bl	8002b76 <_write>
 800f5a0:	1c43      	adds	r3, r0, #1
 800f5a2:	d102      	bne.n	800f5aa <_write_r+0x1e>
 800f5a4:	682b      	ldr	r3, [r5, #0]
 800f5a6:	b103      	cbz	r3, 800f5aa <_write_r+0x1e>
 800f5a8:	6023      	str	r3, [r4, #0]
 800f5aa:	bd38      	pop	{r3, r4, r5, pc}
 800f5ac:	20000ee8 	.word	0x20000ee8

0800f5b0 <__assert_func>:
 800f5b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f5b2:	4614      	mov	r4, r2
 800f5b4:	461a      	mov	r2, r3
 800f5b6:	4b09      	ldr	r3, [pc, #36]	; (800f5dc <__assert_func+0x2c>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	4605      	mov	r5, r0
 800f5bc:	68d8      	ldr	r0, [r3, #12]
 800f5be:	b14c      	cbz	r4, 800f5d4 <__assert_func+0x24>
 800f5c0:	4b07      	ldr	r3, [pc, #28]	; (800f5e0 <__assert_func+0x30>)
 800f5c2:	9100      	str	r1, [sp, #0]
 800f5c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f5c8:	4906      	ldr	r1, [pc, #24]	; (800f5e4 <__assert_func+0x34>)
 800f5ca:	462b      	mov	r3, r5
 800f5cc:	f000 f81e 	bl	800f60c <fiprintf>
 800f5d0:	f000 f8e9 	bl	800f7a6 <abort>
 800f5d4:	4b04      	ldr	r3, [pc, #16]	; (800f5e8 <__assert_func+0x38>)
 800f5d6:	461c      	mov	r4, r3
 800f5d8:	e7f3      	b.n	800f5c2 <__assert_func+0x12>
 800f5da:	bf00      	nop
 800f5dc:	20000118 	.word	0x20000118
 800f5e0:	08010065 	.word	0x08010065
 800f5e4:	08010072 	.word	0x08010072
 800f5e8:	080100a0 	.word	0x080100a0

0800f5ec <_close_r>:
 800f5ec:	b538      	push	{r3, r4, r5, lr}
 800f5ee:	4d06      	ldr	r5, [pc, #24]	; (800f608 <_close_r+0x1c>)
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	4604      	mov	r4, r0
 800f5f4:	4608      	mov	r0, r1
 800f5f6:	602b      	str	r3, [r5, #0]
 800f5f8:	f7f3 fad9 	bl	8002bae <_close>
 800f5fc:	1c43      	adds	r3, r0, #1
 800f5fe:	d102      	bne.n	800f606 <_close_r+0x1a>
 800f600:	682b      	ldr	r3, [r5, #0]
 800f602:	b103      	cbz	r3, 800f606 <_close_r+0x1a>
 800f604:	6023      	str	r3, [r4, #0]
 800f606:	bd38      	pop	{r3, r4, r5, pc}
 800f608:	20000ee8 	.word	0x20000ee8

0800f60c <fiprintf>:
 800f60c:	b40e      	push	{r1, r2, r3}
 800f60e:	b503      	push	{r0, r1, lr}
 800f610:	4601      	mov	r1, r0
 800f612:	ab03      	add	r3, sp, #12
 800f614:	4805      	ldr	r0, [pc, #20]	; (800f62c <fiprintf+0x20>)
 800f616:	f853 2b04 	ldr.w	r2, [r3], #4
 800f61a:	6800      	ldr	r0, [r0, #0]
 800f61c:	9301      	str	r3, [sp, #4]
 800f61e:	f7ff fe31 	bl	800f284 <_vfiprintf_r>
 800f622:	b002      	add	sp, #8
 800f624:	f85d eb04 	ldr.w	lr, [sp], #4
 800f628:	b003      	add	sp, #12
 800f62a:	4770      	bx	lr
 800f62c:	20000118 	.word	0x20000118

0800f630 <_fstat_r>:
 800f630:	b538      	push	{r3, r4, r5, lr}
 800f632:	4d07      	ldr	r5, [pc, #28]	; (800f650 <_fstat_r+0x20>)
 800f634:	2300      	movs	r3, #0
 800f636:	4604      	mov	r4, r0
 800f638:	4608      	mov	r0, r1
 800f63a:	4611      	mov	r1, r2
 800f63c:	602b      	str	r3, [r5, #0]
 800f63e:	f7f3 fac2 	bl	8002bc6 <_fstat>
 800f642:	1c43      	adds	r3, r0, #1
 800f644:	d102      	bne.n	800f64c <_fstat_r+0x1c>
 800f646:	682b      	ldr	r3, [r5, #0]
 800f648:	b103      	cbz	r3, 800f64c <_fstat_r+0x1c>
 800f64a:	6023      	str	r3, [r4, #0]
 800f64c:	bd38      	pop	{r3, r4, r5, pc}
 800f64e:	bf00      	nop
 800f650:	20000ee8 	.word	0x20000ee8

0800f654 <_isatty_r>:
 800f654:	b538      	push	{r3, r4, r5, lr}
 800f656:	4d06      	ldr	r5, [pc, #24]	; (800f670 <_isatty_r+0x1c>)
 800f658:	2300      	movs	r3, #0
 800f65a:	4604      	mov	r4, r0
 800f65c:	4608      	mov	r0, r1
 800f65e:	602b      	str	r3, [r5, #0]
 800f660:	f7f3 fac1 	bl	8002be6 <_isatty>
 800f664:	1c43      	adds	r3, r0, #1
 800f666:	d102      	bne.n	800f66e <_isatty_r+0x1a>
 800f668:	682b      	ldr	r3, [r5, #0]
 800f66a:	b103      	cbz	r3, 800f66e <_isatty_r+0x1a>
 800f66c:	6023      	str	r3, [r4, #0]
 800f66e:	bd38      	pop	{r3, r4, r5, pc}
 800f670:	20000ee8 	.word	0x20000ee8

0800f674 <_lseek_r>:
 800f674:	b538      	push	{r3, r4, r5, lr}
 800f676:	4d07      	ldr	r5, [pc, #28]	; (800f694 <_lseek_r+0x20>)
 800f678:	4604      	mov	r4, r0
 800f67a:	4608      	mov	r0, r1
 800f67c:	4611      	mov	r1, r2
 800f67e:	2200      	movs	r2, #0
 800f680:	602a      	str	r2, [r5, #0]
 800f682:	461a      	mov	r2, r3
 800f684:	f7f3 faba 	bl	8002bfc <_lseek>
 800f688:	1c43      	adds	r3, r0, #1
 800f68a:	d102      	bne.n	800f692 <_lseek_r+0x1e>
 800f68c:	682b      	ldr	r3, [r5, #0]
 800f68e:	b103      	cbz	r3, 800f692 <_lseek_r+0x1e>
 800f690:	6023      	str	r3, [r4, #0]
 800f692:	bd38      	pop	{r3, r4, r5, pc}
 800f694:	20000ee8 	.word	0x20000ee8

0800f698 <__ascii_mbtowc>:
 800f698:	b082      	sub	sp, #8
 800f69a:	b901      	cbnz	r1, 800f69e <__ascii_mbtowc+0x6>
 800f69c:	a901      	add	r1, sp, #4
 800f69e:	b142      	cbz	r2, 800f6b2 <__ascii_mbtowc+0x1a>
 800f6a0:	b14b      	cbz	r3, 800f6b6 <__ascii_mbtowc+0x1e>
 800f6a2:	7813      	ldrb	r3, [r2, #0]
 800f6a4:	600b      	str	r3, [r1, #0]
 800f6a6:	7812      	ldrb	r2, [r2, #0]
 800f6a8:	1e10      	subs	r0, r2, #0
 800f6aa:	bf18      	it	ne
 800f6ac:	2001      	movne	r0, #1
 800f6ae:	b002      	add	sp, #8
 800f6b0:	4770      	bx	lr
 800f6b2:	4610      	mov	r0, r2
 800f6b4:	e7fb      	b.n	800f6ae <__ascii_mbtowc+0x16>
 800f6b6:	f06f 0001 	mvn.w	r0, #1
 800f6ba:	e7f8      	b.n	800f6ae <__ascii_mbtowc+0x16>

0800f6bc <memmove>:
 800f6bc:	4288      	cmp	r0, r1
 800f6be:	b510      	push	{r4, lr}
 800f6c0:	eb01 0402 	add.w	r4, r1, r2
 800f6c4:	d902      	bls.n	800f6cc <memmove+0x10>
 800f6c6:	4284      	cmp	r4, r0
 800f6c8:	4623      	mov	r3, r4
 800f6ca:	d807      	bhi.n	800f6dc <memmove+0x20>
 800f6cc:	1e43      	subs	r3, r0, #1
 800f6ce:	42a1      	cmp	r1, r4
 800f6d0:	d008      	beq.n	800f6e4 <memmove+0x28>
 800f6d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f6d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f6da:	e7f8      	b.n	800f6ce <memmove+0x12>
 800f6dc:	4402      	add	r2, r0
 800f6de:	4601      	mov	r1, r0
 800f6e0:	428a      	cmp	r2, r1
 800f6e2:	d100      	bne.n	800f6e6 <memmove+0x2a>
 800f6e4:	bd10      	pop	{r4, pc}
 800f6e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f6ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f6ee:	e7f7      	b.n	800f6e0 <memmove+0x24>

0800f6f0 <__malloc_lock>:
 800f6f0:	4801      	ldr	r0, [pc, #4]	; (800f6f8 <__malloc_lock+0x8>)
 800f6f2:	f7fe bf58 	b.w	800e5a6 <__retarget_lock_acquire_recursive>
 800f6f6:	bf00      	nop
 800f6f8:	20000edc 	.word	0x20000edc

0800f6fc <__malloc_unlock>:
 800f6fc:	4801      	ldr	r0, [pc, #4]	; (800f704 <__malloc_unlock+0x8>)
 800f6fe:	f7fe bf53 	b.w	800e5a8 <__retarget_lock_release_recursive>
 800f702:	bf00      	nop
 800f704:	20000edc 	.word	0x20000edc

0800f708 <_realloc_r>:
 800f708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f70c:	4680      	mov	r8, r0
 800f70e:	4614      	mov	r4, r2
 800f710:	460e      	mov	r6, r1
 800f712:	b921      	cbnz	r1, 800f71e <_realloc_r+0x16>
 800f714:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f718:	4611      	mov	r1, r2
 800f71a:	f7ff bbb9 	b.w	800ee90 <_malloc_r>
 800f71e:	b92a      	cbnz	r2, 800f72c <_realloc_r+0x24>
 800f720:	f7ff fb4a 	bl	800edb8 <_free_r>
 800f724:	4625      	mov	r5, r4
 800f726:	4628      	mov	r0, r5
 800f728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f72c:	f000 f842 	bl	800f7b4 <_malloc_usable_size_r>
 800f730:	4284      	cmp	r4, r0
 800f732:	4607      	mov	r7, r0
 800f734:	d802      	bhi.n	800f73c <_realloc_r+0x34>
 800f736:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f73a:	d812      	bhi.n	800f762 <_realloc_r+0x5a>
 800f73c:	4621      	mov	r1, r4
 800f73e:	4640      	mov	r0, r8
 800f740:	f7ff fba6 	bl	800ee90 <_malloc_r>
 800f744:	4605      	mov	r5, r0
 800f746:	2800      	cmp	r0, #0
 800f748:	d0ed      	beq.n	800f726 <_realloc_r+0x1e>
 800f74a:	42bc      	cmp	r4, r7
 800f74c:	4622      	mov	r2, r4
 800f74e:	4631      	mov	r1, r6
 800f750:	bf28      	it	cs
 800f752:	463a      	movcs	r2, r7
 800f754:	f7fd f8ce 	bl	800c8f4 <memcpy>
 800f758:	4631      	mov	r1, r6
 800f75a:	4640      	mov	r0, r8
 800f75c:	f7ff fb2c 	bl	800edb8 <_free_r>
 800f760:	e7e1      	b.n	800f726 <_realloc_r+0x1e>
 800f762:	4635      	mov	r5, r6
 800f764:	e7df      	b.n	800f726 <_realloc_r+0x1e>
	...

0800f768 <_read_r>:
 800f768:	b538      	push	{r3, r4, r5, lr}
 800f76a:	4d07      	ldr	r5, [pc, #28]	; (800f788 <_read_r+0x20>)
 800f76c:	4604      	mov	r4, r0
 800f76e:	4608      	mov	r0, r1
 800f770:	4611      	mov	r1, r2
 800f772:	2200      	movs	r2, #0
 800f774:	602a      	str	r2, [r5, #0]
 800f776:	461a      	mov	r2, r3
 800f778:	f7f3 f9e0 	bl	8002b3c <_read>
 800f77c:	1c43      	adds	r3, r0, #1
 800f77e:	d102      	bne.n	800f786 <_read_r+0x1e>
 800f780:	682b      	ldr	r3, [r5, #0]
 800f782:	b103      	cbz	r3, 800f786 <_read_r+0x1e>
 800f784:	6023      	str	r3, [r4, #0]
 800f786:	bd38      	pop	{r3, r4, r5, pc}
 800f788:	20000ee8 	.word	0x20000ee8

0800f78c <__ascii_wctomb>:
 800f78c:	b149      	cbz	r1, 800f7a2 <__ascii_wctomb+0x16>
 800f78e:	2aff      	cmp	r2, #255	; 0xff
 800f790:	bf85      	ittet	hi
 800f792:	238a      	movhi	r3, #138	; 0x8a
 800f794:	6003      	strhi	r3, [r0, #0]
 800f796:	700a      	strbls	r2, [r1, #0]
 800f798:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800f79c:	bf98      	it	ls
 800f79e:	2001      	movls	r0, #1
 800f7a0:	4770      	bx	lr
 800f7a2:	4608      	mov	r0, r1
 800f7a4:	4770      	bx	lr

0800f7a6 <abort>:
 800f7a6:	b508      	push	{r3, lr}
 800f7a8:	2006      	movs	r0, #6
 800f7aa:	f000 f833 	bl	800f814 <raise>
 800f7ae:	2001      	movs	r0, #1
 800f7b0:	f7f3 f9ba 	bl	8002b28 <_exit>

0800f7b4 <_malloc_usable_size_r>:
 800f7b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7b8:	1f18      	subs	r0, r3, #4
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	bfbc      	itt	lt
 800f7be:	580b      	ldrlt	r3, [r1, r0]
 800f7c0:	18c0      	addlt	r0, r0, r3
 800f7c2:	4770      	bx	lr

0800f7c4 <_raise_r>:
 800f7c4:	291f      	cmp	r1, #31
 800f7c6:	b538      	push	{r3, r4, r5, lr}
 800f7c8:	4604      	mov	r4, r0
 800f7ca:	460d      	mov	r5, r1
 800f7cc:	d904      	bls.n	800f7d8 <_raise_r+0x14>
 800f7ce:	2316      	movs	r3, #22
 800f7d0:	6003      	str	r3, [r0, #0]
 800f7d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f7d6:	bd38      	pop	{r3, r4, r5, pc}
 800f7d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f7da:	b112      	cbz	r2, 800f7e2 <_raise_r+0x1e>
 800f7dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f7e0:	b94b      	cbnz	r3, 800f7f6 <_raise_r+0x32>
 800f7e2:	4620      	mov	r0, r4
 800f7e4:	f000 f830 	bl	800f848 <_getpid_r>
 800f7e8:	462a      	mov	r2, r5
 800f7ea:	4601      	mov	r1, r0
 800f7ec:	4620      	mov	r0, r4
 800f7ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7f2:	f000 b817 	b.w	800f824 <_kill_r>
 800f7f6:	2b01      	cmp	r3, #1
 800f7f8:	d00a      	beq.n	800f810 <_raise_r+0x4c>
 800f7fa:	1c59      	adds	r1, r3, #1
 800f7fc:	d103      	bne.n	800f806 <_raise_r+0x42>
 800f7fe:	2316      	movs	r3, #22
 800f800:	6003      	str	r3, [r0, #0]
 800f802:	2001      	movs	r0, #1
 800f804:	e7e7      	b.n	800f7d6 <_raise_r+0x12>
 800f806:	2400      	movs	r4, #0
 800f808:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f80c:	4628      	mov	r0, r5
 800f80e:	4798      	blx	r3
 800f810:	2000      	movs	r0, #0
 800f812:	e7e0      	b.n	800f7d6 <_raise_r+0x12>

0800f814 <raise>:
 800f814:	4b02      	ldr	r3, [pc, #8]	; (800f820 <raise+0xc>)
 800f816:	4601      	mov	r1, r0
 800f818:	6818      	ldr	r0, [r3, #0]
 800f81a:	f7ff bfd3 	b.w	800f7c4 <_raise_r>
 800f81e:	bf00      	nop
 800f820:	20000118 	.word	0x20000118

0800f824 <_kill_r>:
 800f824:	b538      	push	{r3, r4, r5, lr}
 800f826:	4d07      	ldr	r5, [pc, #28]	; (800f844 <_kill_r+0x20>)
 800f828:	2300      	movs	r3, #0
 800f82a:	4604      	mov	r4, r0
 800f82c:	4608      	mov	r0, r1
 800f82e:	4611      	mov	r1, r2
 800f830:	602b      	str	r3, [r5, #0]
 800f832:	f7f3 f969 	bl	8002b08 <_kill>
 800f836:	1c43      	adds	r3, r0, #1
 800f838:	d102      	bne.n	800f840 <_kill_r+0x1c>
 800f83a:	682b      	ldr	r3, [r5, #0]
 800f83c:	b103      	cbz	r3, 800f840 <_kill_r+0x1c>
 800f83e:	6023      	str	r3, [r4, #0]
 800f840:	bd38      	pop	{r3, r4, r5, pc}
 800f842:	bf00      	nop
 800f844:	20000ee8 	.word	0x20000ee8

0800f848 <_getpid_r>:
 800f848:	f7f3 b956 	b.w	8002af8 <_getpid>

0800f84c <_init>:
 800f84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f84e:	bf00      	nop
 800f850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f852:	bc08      	pop	{r3}
 800f854:	469e      	mov	lr, r3
 800f856:	4770      	bx	lr

0800f858 <_fini>:
 800f858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f85a:	bf00      	nop
 800f85c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f85e:	bc08      	pop	{r3}
 800f860:	469e      	mov	lr, r3
 800f862:	4770      	bx	lr
